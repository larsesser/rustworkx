Search.setIndex({"docnames": ["CONTRIBUTING", "api/algorithm_functions/centrality", "api/algorithm_functions/coloring", "api/algorithm_functions/connectivity_and_cycles", "api/algorithm_functions/dag_algorithms", "api/algorithm_functions/dominance", "api/algorithm_functions/graph_operations", "api/algorithm_functions/index", "api/algorithm_functions/isomorphism", "api/algorithm_functions/link_analysis", "api/algorithm_functions/matching", "api/algorithm_functions/other", "api/algorithm_functions/shortest_paths", "api/algorithm_functions/traversal", "api/algorithm_functions/tree", "api/converters", "api/custom_return_types", "api/exceptions", "api/generators", "api/graph_classes", "api/index", "api/layout_functions", "api/pydigraph_api_functions", "api/pygraph_api_functions", "api/random_graph_generator_functions", "api/serialization", "apiref/rustworkx.AllPairsPathLengthMapping", "apiref/rustworkx.AllPairsPathLengthMapping.items", "apiref/rustworkx.AllPairsPathLengthMapping.keys", "apiref/rustworkx.AllPairsPathLengthMapping.values", "apiref/rustworkx.AllPairsPathMapping", "apiref/rustworkx.AllPairsPathMapping.items", "apiref/rustworkx.AllPairsPathMapping.keys", "apiref/rustworkx.AllPairsPathMapping.values", "apiref/rustworkx.BFSPredecessors", "apiref/rustworkx.BFSSuccessors", "apiref/rustworkx.BiconnectedComponents", "apiref/rustworkx.BiconnectedComponents.items", "apiref/rustworkx.BiconnectedComponents.keys", "apiref/rustworkx.BiconnectedComponents.values", "apiref/rustworkx.CentralityMapping", "apiref/rustworkx.CentralityMapping.items", "apiref/rustworkx.CentralityMapping.keys", "apiref/rustworkx.CentralityMapping.values", "apiref/rustworkx.Chains", "apiref/rustworkx.ColoringStrategy", "apiref/rustworkx.DAGHasCycle", "apiref/rustworkx.DAGWouldCycle", "apiref/rustworkx.EdgeCentralityMapping", "apiref/rustworkx.EdgeCentralityMapping.items", "apiref/rustworkx.EdgeCentralityMapping.keys", "apiref/rustworkx.EdgeCentralityMapping.values", "apiref/rustworkx.EdgeIndexMap", "apiref/rustworkx.EdgeIndexMap.items", "apiref/rustworkx.EdgeIndexMap.keys", "apiref/rustworkx.EdgeIndexMap.values", "apiref/rustworkx.EdgeIndices", "apiref/rustworkx.EdgeList", "apiref/rustworkx.GraphNotBipartite", "apiref/rustworkx.IndexPartitionBlock", "apiref/rustworkx.InvalidMapping", "apiref/rustworkx.InvalidNode", "apiref/rustworkx.JSONSerializationError", "apiref/rustworkx.NegativeCycle", "apiref/rustworkx.NoEdgeBetweenNodes", "apiref/rustworkx.NoPathFound", "apiref/rustworkx.NoSuitableNeighbors", "apiref/rustworkx.NodeIndices", "apiref/rustworkx.NodeMap", "apiref/rustworkx.NodeMap.items", "apiref/rustworkx.NodeMap.keys", "apiref/rustworkx.NodeMap.values", "apiref/rustworkx.NullGraph", "apiref/rustworkx.PathLengthMapping", "apiref/rustworkx.PathLengthMapping.items", "apiref/rustworkx.PathLengthMapping.keys", "apiref/rustworkx.PathLengthMapping.values", "apiref/rustworkx.PathMapping", "apiref/rustworkx.PathMapping.items", "apiref/rustworkx.PathMapping.keys", "apiref/rustworkx.PathMapping.values", "apiref/rustworkx.Pos2DMapping", "apiref/rustworkx.Pos2DMapping.items", "apiref/rustworkx.Pos2DMapping.keys", "apiref/rustworkx.Pos2DMapping.values", "apiref/rustworkx.ProductNodeMap", "apiref/rustworkx.ProductNodeMap.items", "apiref/rustworkx.ProductNodeMap.keys", "apiref/rustworkx.ProductNodeMap.values", "apiref/rustworkx.PyDAG", "apiref/rustworkx.PyDAG.add_child", "apiref/rustworkx.PyDAG.add_edge", "apiref/rustworkx.PyDAG.add_edges_from", "apiref/rustworkx.PyDAG.add_edges_from_no_data", "apiref/rustworkx.PyDAG.add_node", "apiref/rustworkx.PyDAG.add_nodes_from", "apiref/rustworkx.PyDAG.add_parent", "apiref/rustworkx.PyDAG.adj", "apiref/rustworkx.PyDAG.adj_direction", "apiref/rustworkx.PyDAG.clear", "apiref/rustworkx.PyDAG.clear_edges", "apiref/rustworkx.PyDAG.compose", "apiref/rustworkx.PyDAG.contract_nodes", "apiref/rustworkx.PyDAG.copy", "apiref/rustworkx.PyDAG.edge_index_map", "apiref/rustworkx.PyDAG.edge_indices", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints", "apiref/rustworkx.PyDAG.edge_list", "apiref/rustworkx.PyDAG.edge_subgraph", "apiref/rustworkx.PyDAG.edges", "apiref/rustworkx.PyDAG.extend_from_edge_list", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list", "apiref/rustworkx.PyDAG.filter_edges", "apiref/rustworkx.PyDAG.filter_nodes", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge", "apiref/rustworkx.PyDAG.find_node_by_weight", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge", "apiref/rustworkx.PyDAG.find_predecessors_by_edge", "apiref/rustworkx.PyDAG.find_successors_by_edge", "apiref/rustworkx.PyDAG.from_adjacency_matrix", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix", "apiref/rustworkx.PyDAG.get_all_edge_data", "apiref/rustworkx.PyDAG.get_edge_data", "apiref/rustworkx.PyDAG.get_edge_data_by_index", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index", "apiref/rustworkx.PyDAG.get_node_data", "apiref/rustworkx.PyDAG.has_edge", "apiref/rustworkx.PyDAG.has_node", "apiref/rustworkx.PyDAG.has_parallel_edges", "apiref/rustworkx.PyDAG.in_degree", "apiref/rustworkx.PyDAG.in_edges", "apiref/rustworkx.PyDAG.incident_edge_index_map", "apiref/rustworkx.PyDAG.incident_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDAG.insert_node_on_out_edges", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDAG.is_symmetric", "apiref/rustworkx.PyDAG.make_symmetric", "apiref/rustworkx.PyDAG.merge_nodes", "apiref/rustworkx.PyDAG.neighbors", "apiref/rustworkx.PyDAG.neighbors_undirected", "apiref/rustworkx.PyDAG.node_indexes", "apiref/rustworkx.PyDAG.node_indices", "apiref/rustworkx.PyDAG.nodes", "apiref/rustworkx.PyDAG.num_edges", "apiref/rustworkx.PyDAG.num_nodes", "apiref/rustworkx.PyDAG.out_degree", "apiref/rustworkx.PyDAG.out_edges", "apiref/rustworkx.PyDAG.predecessor_indices", "apiref/rustworkx.PyDAG.predecessors", "apiref/rustworkx.PyDAG.read_edge_list", "apiref/rustworkx.PyDAG.remove_edge", "apiref/rustworkx.PyDAG.remove_edge_from_index", "apiref/rustworkx.PyDAG.remove_edges_from", "apiref/rustworkx.PyDAG.remove_node", "apiref/rustworkx.PyDAG.remove_node_retain_edges", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDAG.remove_nodes_from", "apiref/rustworkx.PyDAG.reverse", "apiref/rustworkx.PyDAG.subgraph", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph", "apiref/rustworkx.PyDAG.successor_indices", "apiref/rustworkx.PyDAG.successors", "apiref/rustworkx.PyDAG.to_dot", "apiref/rustworkx.PyDAG.to_undirected", "apiref/rustworkx.PyDAG.update_edge", "apiref/rustworkx.PyDAG.update_edge_by_index", "apiref/rustworkx.PyDAG.weighted_edge_list", "apiref/rustworkx.PyDAG.write_edge_list", "apiref/rustworkx.PyDiGraph", "apiref/rustworkx.PyDiGraph.add_child", "apiref/rustworkx.PyDiGraph.add_edge", "apiref/rustworkx.PyDiGraph.add_edges_from", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data", "apiref/rustworkx.PyDiGraph.add_node", "apiref/rustworkx.PyDiGraph.add_nodes_from", "apiref/rustworkx.PyDiGraph.add_parent", "apiref/rustworkx.PyDiGraph.adj", "apiref/rustworkx.PyDiGraph.adj_direction", "apiref/rustworkx.PyDiGraph.clear", "apiref/rustworkx.PyDiGraph.clear_edges", "apiref/rustworkx.PyDiGraph.compose", "apiref/rustworkx.PyDiGraph.contract_nodes", "apiref/rustworkx.PyDiGraph.copy", "apiref/rustworkx.PyDiGraph.edge_index_map", "apiref/rustworkx.PyDiGraph.edge_indices", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyDiGraph.edge_list", "apiref/rustworkx.PyDiGraph.edge_subgraph", "apiref/rustworkx.PyDiGraph.edges", "apiref/rustworkx.PyDiGraph.extend_from_edge_list", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyDiGraph.filter_edges", "apiref/rustworkx.PyDiGraph.filter_nodes", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge", "apiref/rustworkx.PyDiGraph.find_node_by_weight", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge", "apiref/rustworkx.PyDiGraph.find_successors_by_edge", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyDiGraph.get_all_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyDiGraph.get_node_data", "apiref/rustworkx.PyDiGraph.has_edge", "apiref/rustworkx.PyDiGraph.has_node", "apiref/rustworkx.PyDiGraph.has_parallel_edges", "apiref/rustworkx.PyDiGraph.in_degree", "apiref/rustworkx.PyDiGraph.in_edges", "apiref/rustworkx.PyDiGraph.incident_edge_index_map", "apiref/rustworkx.PyDiGraph.incident_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDiGraph.is_symmetric", "apiref/rustworkx.PyDiGraph.make_symmetric", "apiref/rustworkx.PyDiGraph.merge_nodes", "apiref/rustworkx.PyDiGraph.neighbors", "apiref/rustworkx.PyDiGraph.neighbors_undirected", "apiref/rustworkx.PyDiGraph.node_indexes", "apiref/rustworkx.PyDiGraph.node_indices", "apiref/rustworkx.PyDiGraph.nodes", "apiref/rustworkx.PyDiGraph.num_edges", "apiref/rustworkx.PyDiGraph.num_nodes", "apiref/rustworkx.PyDiGraph.out_degree", "apiref/rustworkx.PyDiGraph.out_edges", "apiref/rustworkx.PyDiGraph.predecessor_indices", "apiref/rustworkx.PyDiGraph.predecessors", "apiref/rustworkx.PyDiGraph.read_edge_list", "apiref/rustworkx.PyDiGraph.remove_edge", "apiref/rustworkx.PyDiGraph.remove_edge_from_index", "apiref/rustworkx.PyDiGraph.remove_edges_from", "apiref/rustworkx.PyDiGraph.remove_node", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDiGraph.remove_nodes_from", "apiref/rustworkx.PyDiGraph.reverse", "apiref/rustworkx.PyDiGraph.subgraph", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyDiGraph.successor_indices", "apiref/rustworkx.PyDiGraph.successors", "apiref/rustworkx.PyDiGraph.to_dot", "apiref/rustworkx.PyDiGraph.to_undirected", "apiref/rustworkx.PyDiGraph.update_edge", "apiref/rustworkx.PyDiGraph.update_edge_by_index", "apiref/rustworkx.PyDiGraph.weighted_edge_list", "apiref/rustworkx.PyDiGraph.write_edge_list", "apiref/rustworkx.PyGraph", "apiref/rustworkx.PyGraph.add_edge", "apiref/rustworkx.PyGraph.add_edges_from", "apiref/rustworkx.PyGraph.add_edges_from_no_data", "apiref/rustworkx.PyGraph.add_node", "apiref/rustworkx.PyGraph.add_nodes_from", "apiref/rustworkx.PyGraph.adj", "apiref/rustworkx.PyGraph.clear", "apiref/rustworkx.PyGraph.clear_edges", "apiref/rustworkx.PyGraph.compose", "apiref/rustworkx.PyGraph.contract_nodes", "apiref/rustworkx.PyGraph.copy", "apiref/rustworkx.PyGraph.degree", "apiref/rustworkx.PyGraph.edge_index_map", "apiref/rustworkx.PyGraph.edge_indices", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyGraph.edge_list", "apiref/rustworkx.PyGraph.edge_subgraph", "apiref/rustworkx.PyGraph.edges", "apiref/rustworkx.PyGraph.extend_from_edge_list", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyGraph.filter_edges", "apiref/rustworkx.PyGraph.filter_nodes", "apiref/rustworkx.PyGraph.find_node_by_weight", "apiref/rustworkx.PyGraph.from_adjacency_matrix", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyGraph.get_all_edge_data", "apiref/rustworkx.PyGraph.get_edge_data", "apiref/rustworkx.PyGraph.get_edge_data_by_index", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyGraph.get_node_data", "apiref/rustworkx.PyGraph.has_edge", "apiref/rustworkx.PyGraph.has_node", "apiref/rustworkx.PyGraph.has_parallel_edges", "apiref/rustworkx.PyGraph.in_edges", "apiref/rustworkx.PyGraph.incident_edge_index_map", "apiref/rustworkx.PyGraph.incident_edges", "apiref/rustworkx.PyGraph.neighbors", "apiref/rustworkx.PyGraph.node_indexes", "apiref/rustworkx.PyGraph.node_indices", "apiref/rustworkx.PyGraph.nodes", "apiref/rustworkx.PyGraph.num_edges", "apiref/rustworkx.PyGraph.num_nodes", "apiref/rustworkx.PyGraph.out_edges", "apiref/rustworkx.PyGraph.read_edge_list", "apiref/rustworkx.PyGraph.remove_edge", "apiref/rustworkx.PyGraph.remove_edge_from_index", "apiref/rustworkx.PyGraph.remove_edges_from", "apiref/rustworkx.PyGraph.remove_node", "apiref/rustworkx.PyGraph.remove_nodes_from", "apiref/rustworkx.PyGraph.subgraph", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyGraph.to_directed", "apiref/rustworkx.PyGraph.to_dot", "apiref/rustworkx.PyGraph.update_edge", "apiref/rustworkx.PyGraph.update_edge_by_index", "apiref/rustworkx.PyGraph.weighted_edge_list", "apiref/rustworkx.PyGraph.write_edge_list", "apiref/rustworkx.RelationalCoarsestPartition", "apiref/rustworkx.TopologicalSorter", "apiref/rustworkx.TopologicalSorter.done", "apiref/rustworkx.TopologicalSorter.get_ready", "apiref/rustworkx.TopologicalSorter.is_active", "apiref/rustworkx.WeightedEdgeList", "apiref/rustworkx.adjacency_matrix", "apiref/rustworkx.all_pairs_all_simple_paths", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.all_pairs_dijkstra_path_lengths", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.all_shortest_paths", "apiref/rustworkx.all_simple_paths", "apiref/rustworkx.ancestors", "apiref/rustworkx.articulation_points", "apiref/rustworkx.astar_shortest_path", "apiref/rustworkx.barabasi_albert_graph", "apiref/rustworkx.bellman_ford_shortest_path_lengths", "apiref/rustworkx.bellman_ford_shortest_paths", "apiref/rustworkx.betweenness_centrality", "apiref/rustworkx.bfs_predecessors", "apiref/rustworkx.bfs_search", "apiref/rustworkx.bfs_successors", "apiref/rustworkx.biconnected_components", "apiref/rustworkx.bipartite_layout", "apiref/rustworkx.bridges", "apiref/rustworkx.cartesian_product", "apiref/rustworkx.chain_decomposition", "apiref/rustworkx.circular_layout", "apiref/rustworkx.closeness_centrality", "apiref/rustworkx.collect_bicolor_runs", "apiref/rustworkx.collect_runs", "apiref/rustworkx.complement", "apiref/rustworkx.connected_components", "apiref/rustworkx.connected_subgraphs", "apiref/rustworkx.core_number", "apiref/rustworkx.cycle_basis", "apiref/rustworkx.dag_longest_path", "apiref/rustworkx.dag_longest_path_length", "apiref/rustworkx.dag_weighted_longest_path", "apiref/rustworkx.dag_weighted_longest_path_length", "apiref/rustworkx.descendants", "apiref/rustworkx.dfs_edges", "apiref/rustworkx.dfs_search", "apiref/rustworkx.digraph_adjacency_matrix", "apiref/rustworkx.digraph_all_pairs_all_simple_paths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.digraph_all_shortest_paths", "apiref/rustworkx.digraph_all_simple_paths", "apiref/rustworkx.digraph_astar_shortest_path", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.digraph_betweenness_centrality", "apiref/rustworkx.digraph_bfs_search", "apiref/rustworkx.digraph_bipartite_layout", "apiref/rustworkx.digraph_cartesian_product", "apiref/rustworkx.digraph_circular_layout", "apiref/rustworkx.digraph_closeness_centrality", "apiref/rustworkx.digraph_complement", "apiref/rustworkx.digraph_core_number", "apiref/rustworkx.digraph_dfs_edges", "apiref/rustworkx.digraph_dfs_search", "apiref/rustworkx.digraph_dijkstra_search", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths", "apiref/rustworkx.digraph_dijkstra_shortest_paths", "apiref/rustworkx.digraph_distance_matrix", "apiref/rustworkx.digraph_edge_betweenness_centrality", "apiref/rustworkx.digraph_eigenvector_centrality", "apiref/rustworkx.digraph_find_cycle", "apiref/rustworkx.digraph_floyd_warshall", "apiref/rustworkx.digraph_floyd_warshall_numpy", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance", "apiref/rustworkx.digraph_is_isomorphic", "apiref/rustworkx.digraph_is_subgraph_isomorphic", "apiref/rustworkx.digraph_k_shortest_path_lengths", "apiref/rustworkx.digraph_katz_centrality", "apiref/rustworkx.digraph_longest_simple_path", "apiref/rustworkx.digraph_maximum_bisimulation", "apiref/rustworkx.digraph_node_link_json", "apiref/rustworkx.digraph_num_shortest_paths_unweighted", "apiref/rustworkx.digraph_random_layout", "apiref/rustworkx.digraph_shell_layout", "apiref/rustworkx.digraph_spiral_layout", "apiref/rustworkx.digraph_spring_layout", "apiref/rustworkx.digraph_tensor_product", "apiref/rustworkx.digraph_transitivity", "apiref/rustworkx.digraph_union", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length", "apiref/rustworkx.digraph_vf2_mapping", "apiref/rustworkx.dijkstra_search", "apiref/rustworkx.dijkstra_shortest_path_lengths", "apiref/rustworkx.dijkstra_shortest_paths", "apiref/rustworkx.directed_barabasi_albert_graph", "apiref/rustworkx.directed_gnm_random_graph", "apiref/rustworkx.directed_gnp_random_graph", "apiref/rustworkx.directed_random_bipartite_graph", "apiref/rustworkx.directed_sbm_random_graph", "apiref/rustworkx.distance_matrix", "apiref/rustworkx.dominance_frontiers", "apiref/rustworkx.edge_betweenness_centrality", "apiref/rustworkx.eigenvector_centrality", "apiref/rustworkx.find_negative_cycle", "apiref/rustworkx.floyd_warshall", "apiref/rustworkx.floyd_warshall_numpy", "apiref/rustworkx.floyd_warshall_successor_and_distance", "apiref/rustworkx.from_node_link_json_file", "apiref/rustworkx.generators.barbell_graph", "apiref/rustworkx.generators.binomial_tree_graph", "apiref/rustworkx.generators.complete_graph", "apiref/rustworkx.generators.cycle_graph", "apiref/rustworkx.generators.directed_binomial_tree_graph", "apiref/rustworkx.generators.directed_complete_graph", "apiref/rustworkx.generators.directed_cycle_graph", "apiref/rustworkx.generators.directed_empty_graph", "apiref/rustworkx.generators.directed_grid_graph", "apiref/rustworkx.generators.directed_heavy_hex_graph", "apiref/rustworkx.generators.directed_heavy_square_graph", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph", "apiref/rustworkx.generators.directed_mesh_graph", "apiref/rustworkx.generators.directed_path_graph", "apiref/rustworkx.generators.directed_star_graph", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "apiref/rustworkx.generators.empty_graph", "apiref/rustworkx.generators.full_rary_tree", "apiref/rustworkx.generators.generalized_petersen_graph", "apiref/rustworkx.generators.grid_graph", "apiref/rustworkx.generators.heavy_hex_graph", "apiref/rustworkx.generators.heavy_square_graph", "apiref/rustworkx.generators.hexagonal_lattice_graph", "apiref/rustworkx.generators.lollipop_graph", "apiref/rustworkx.generators.mesh_graph", "apiref/rustworkx.generators.path_graph", "apiref/rustworkx.generators.star_graph", "apiref/rustworkx.graph_adjacency_matrix", "apiref/rustworkx.graph_all_pairs_all_simple_paths", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.graph_all_shortest_paths", "apiref/rustworkx.graph_all_simple_paths", "apiref/rustworkx.graph_astar_shortest_path", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.graph_betweenness_centrality", "apiref/rustworkx.graph_bfs_search", "apiref/rustworkx.graph_bipartite_edge_color", "apiref/rustworkx.graph_bipartite_layout", "apiref/rustworkx.graph_cartesian_product", "apiref/rustworkx.graph_circular_layout", "apiref/rustworkx.graph_closeness_centrality", "apiref/rustworkx.graph_complement", "apiref/rustworkx.graph_core_number", "apiref/rustworkx.graph_dfs_edges", "apiref/rustworkx.graph_dfs_search", "apiref/rustworkx.graph_dijkstra_search", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths", "apiref/rustworkx.graph_dijkstra_shortest_paths", "apiref/rustworkx.graph_distance_matrix", "apiref/rustworkx.graph_edge_betweenness_centrality", "apiref/rustworkx.graph_eigenvector_centrality", "apiref/rustworkx.graph_floyd_warshall", "apiref/rustworkx.graph_floyd_warshall_numpy", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance", "apiref/rustworkx.graph_greedy_color", "apiref/rustworkx.graph_greedy_edge_color", "apiref/rustworkx.graph_is_isomorphic", "apiref/rustworkx.graph_is_subgraph_isomorphic", "apiref/rustworkx.graph_k_shortest_path_lengths", "apiref/rustworkx.graph_katz_centrality", "apiref/rustworkx.graph_line_graph", "apiref/rustworkx.graph_longest_simple_path", "apiref/rustworkx.graph_misra_gries_edge_color", "apiref/rustworkx.graph_node_link_json", "apiref/rustworkx.graph_num_shortest_paths_unweighted", "apiref/rustworkx.graph_random_layout", "apiref/rustworkx.graph_shell_layout", "apiref/rustworkx.graph_spiral_layout", "apiref/rustworkx.graph_spring_layout", "apiref/rustworkx.graph_tensor_product", "apiref/rustworkx.graph_token_swapper", "apiref/rustworkx.graph_transitivity", "apiref/rustworkx.graph_union", "apiref/rustworkx.graph_unweighted_average_shortest_path_length", "apiref/rustworkx.graph_vf2_mapping", "apiref/rustworkx.has_path", "apiref/rustworkx.hits", "apiref/rustworkx.hyperbolic_random_graph", "apiref/rustworkx.immediate_dominators", "apiref/rustworkx.is_bipartite", "apiref/rustworkx.is_connected", "apiref/rustworkx.is_directed_acyclic_graph", "apiref/rustworkx.is_isomorphic", "apiref/rustworkx.is_isomorphic_node_match", "apiref/rustworkx.is_matching", "apiref/rustworkx.is_maximal_matching", "apiref/rustworkx.is_planar", "apiref/rustworkx.is_subgraph_isomorphic", "apiref/rustworkx.is_weakly_connected", "apiref/rustworkx.isolates", "apiref/rustworkx.k_shortest_path_lengths", "apiref/rustworkx.katz_centrality", "apiref/rustworkx.layers", "apiref/rustworkx.lexicographical_topological_sort", "apiref/rustworkx.longest_simple_path", "apiref/rustworkx.max_weight_matching", "apiref/rustworkx.metric_closure", "apiref/rustworkx.minimum_spanning_edges", "apiref/rustworkx.minimum_spanning_tree", "apiref/rustworkx.negative_edge_cycle", "apiref/rustworkx.networkx_converter", "apiref/rustworkx.node_connected_component", "apiref/rustworkx.node_link_json", "apiref/rustworkx.num_shortest_paths_unweighted", "apiref/rustworkx.number_connected_components", "apiref/rustworkx.number_weakly_connected_components", "apiref/rustworkx.pagerank", "apiref/rustworkx.parse_node_link_json", "apiref/rustworkx.random_geometric_graph", "apiref/rustworkx.random_layout", "apiref/rustworkx.read_graphml", "apiref/rustworkx.shell_layout", "apiref/rustworkx.simple_cycles", "apiref/rustworkx.spiral_layout", "apiref/rustworkx.spring_layout", "apiref/rustworkx.steiner_tree", "apiref/rustworkx.stoer_wagner_min_cut", "apiref/rustworkx.strongly_connected_components", "apiref/rustworkx.topological_generations", "apiref/rustworkx.topological_sort", "apiref/rustworkx.transitive_reduction", "apiref/rustworkx.transitivity", "apiref/rustworkx.two_color", "apiref/rustworkx.undirected_gnm_random_graph", "apiref/rustworkx.undirected_gnp_random_graph", "apiref/rustworkx.undirected_random_bipartite_graph", "apiref/rustworkx.undirected_sbm_random_graph", "apiref/rustworkx.union", "apiref/rustworkx.unweighted_average_shortest_path_length", "apiref/rustworkx.vf2_mapping", "apiref/rustworkx.visit.BFSVisitor", "apiref/rustworkx.visit.BFSVisitor.black_target_edge", "apiref/rustworkx.visit.BFSVisitor.discover_vertex", "apiref/rustworkx.visit.BFSVisitor.finish_vertex", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge", "apiref/rustworkx.visit.BFSVisitor.tree_edge", "apiref/rustworkx.visit.DFSVisitor", "apiref/rustworkx.visit.DFSVisitor.back_edge", "apiref/rustworkx.visit.DFSVisitor.discover_vertex", "apiref/rustworkx.visit.DFSVisitor.finish_vertex", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge", "apiref/rustworkx.visit.DFSVisitor.tree_edge", "apiref/rustworkx.visit.DijkstraVisitor", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex", "apiref/rustworkx.visit.PruneSearch", "apiref/rustworkx.visit.StopSearch", "apiref/rustworkx.visualization.graphviz_draw", "apiref/rustworkx.visualization.mpl_draw", "apiref/rustworkx.weakly_connected_components", "benchmarks", "index", "install", "networkx", "release_notes", "tutorial/betweenness_centrality", "tutorial/dags", "tutorial/index", "tutorial/introduction", "visualization"], "filenames": ["CONTRIBUTING.md", "api/algorithm_functions/centrality.rst", "api/algorithm_functions/coloring.rst", "api/algorithm_functions/connectivity_and_cycles.rst", "api/algorithm_functions/dag_algorithms.rst", "api/algorithm_functions/dominance.rst", "api/algorithm_functions/graph_operations.rst", "api/algorithm_functions/index.rst", "api/algorithm_functions/isomorphism.rst", "api/algorithm_functions/link_analysis.rst", "api/algorithm_functions/matching.rst", "api/algorithm_functions/other.rst", "api/algorithm_functions/shortest_paths.rst", "api/algorithm_functions/traversal.rst", "api/algorithm_functions/tree.rst", "api/converters.rst", "api/custom_return_types.rst", "api/exceptions.rst", "api/generators.rst", "api/graph_classes.rst", "api/index.rst", "api/layout_functions.rst", "api/pydigraph_api_functions.rst", "api/pygraph_api_functions.rst", "api/random_graph_generator_functions.rst", "api/serialization.rst", "apiref/rustworkx.AllPairsPathLengthMapping.rst", "apiref/rustworkx.AllPairsPathLengthMapping.items.rst", "apiref/rustworkx.AllPairsPathLengthMapping.keys.rst", "apiref/rustworkx.AllPairsPathLengthMapping.values.rst", "apiref/rustworkx.AllPairsPathMapping.rst", "apiref/rustworkx.AllPairsPathMapping.items.rst", "apiref/rustworkx.AllPairsPathMapping.keys.rst", "apiref/rustworkx.AllPairsPathMapping.values.rst", "apiref/rustworkx.BFSPredecessors.rst", "apiref/rustworkx.BFSSuccessors.rst", "apiref/rustworkx.BiconnectedComponents.rst", "apiref/rustworkx.BiconnectedComponents.items.rst", "apiref/rustworkx.BiconnectedComponents.keys.rst", "apiref/rustworkx.BiconnectedComponents.values.rst", "apiref/rustworkx.CentralityMapping.rst", "apiref/rustworkx.CentralityMapping.items.rst", "apiref/rustworkx.CentralityMapping.keys.rst", "apiref/rustworkx.CentralityMapping.values.rst", "apiref/rustworkx.Chains.rst", "apiref/rustworkx.ColoringStrategy.rst", "apiref/rustworkx.DAGHasCycle.rst", "apiref/rustworkx.DAGWouldCycle.rst", "apiref/rustworkx.EdgeCentralityMapping.rst", "apiref/rustworkx.EdgeCentralityMapping.items.rst", "apiref/rustworkx.EdgeCentralityMapping.keys.rst", "apiref/rustworkx.EdgeCentralityMapping.values.rst", "apiref/rustworkx.EdgeIndexMap.rst", "apiref/rustworkx.EdgeIndexMap.items.rst", "apiref/rustworkx.EdgeIndexMap.keys.rst", "apiref/rustworkx.EdgeIndexMap.values.rst", "apiref/rustworkx.EdgeIndices.rst", "apiref/rustworkx.EdgeList.rst", "apiref/rustworkx.GraphNotBipartite.rst", "apiref/rustworkx.IndexPartitionBlock.rst", "apiref/rustworkx.InvalidMapping.rst", "apiref/rustworkx.InvalidNode.rst", "apiref/rustworkx.JSONSerializationError.rst", "apiref/rustworkx.NegativeCycle.rst", "apiref/rustworkx.NoEdgeBetweenNodes.rst", "apiref/rustworkx.NoPathFound.rst", "apiref/rustworkx.NoSuitableNeighbors.rst", "apiref/rustworkx.NodeIndices.rst", "apiref/rustworkx.NodeMap.rst", "apiref/rustworkx.NodeMap.items.rst", "apiref/rustworkx.NodeMap.keys.rst", "apiref/rustworkx.NodeMap.values.rst", "apiref/rustworkx.NullGraph.rst", "apiref/rustworkx.PathLengthMapping.rst", "apiref/rustworkx.PathLengthMapping.items.rst", "apiref/rustworkx.PathLengthMapping.keys.rst", "apiref/rustworkx.PathLengthMapping.values.rst", "apiref/rustworkx.PathMapping.rst", "apiref/rustworkx.PathMapping.items.rst", "apiref/rustworkx.PathMapping.keys.rst", "apiref/rustworkx.PathMapping.values.rst", "apiref/rustworkx.Pos2DMapping.rst", "apiref/rustworkx.Pos2DMapping.items.rst", "apiref/rustworkx.Pos2DMapping.keys.rst", "apiref/rustworkx.Pos2DMapping.values.rst", "apiref/rustworkx.ProductNodeMap.rst", "apiref/rustworkx.ProductNodeMap.items.rst", "apiref/rustworkx.ProductNodeMap.keys.rst", "apiref/rustworkx.ProductNodeMap.values.rst", "apiref/rustworkx.PyDAG.rst", "apiref/rustworkx.PyDAG.add_child.rst", "apiref/rustworkx.PyDAG.add_edge.rst", "apiref/rustworkx.PyDAG.add_edges_from.rst", "apiref/rustworkx.PyDAG.add_edges_from_no_data.rst", "apiref/rustworkx.PyDAG.add_node.rst", "apiref/rustworkx.PyDAG.add_nodes_from.rst", "apiref/rustworkx.PyDAG.add_parent.rst", "apiref/rustworkx.PyDAG.adj.rst", "apiref/rustworkx.PyDAG.adj_direction.rst", "apiref/rustworkx.PyDAG.clear.rst", "apiref/rustworkx.PyDAG.clear_edges.rst", "apiref/rustworkx.PyDAG.compose.rst", "apiref/rustworkx.PyDAG.contract_nodes.rst", "apiref/rustworkx.PyDAG.copy.rst", "apiref/rustworkx.PyDAG.edge_index_map.rst", "apiref/rustworkx.PyDAG.edge_indices.rst", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDAG.edge_list.rst", "apiref/rustworkx.PyDAG.edge_subgraph.rst", "apiref/rustworkx.PyDAG.edges.rst", "apiref/rustworkx.PyDAG.extend_from_edge_list.rst", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDAG.filter_edges.rst", "apiref/rustworkx.PyDAG.filter_nodes.rst", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_node_by_weight.rst", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDAG.find_successors_by_edge.rst", "apiref/rustworkx.PyDAG.from_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.get_all_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data_by_index.rst", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDAG.get_node_data.rst", "apiref/rustworkx.PyDAG.has_edge.rst", "apiref/rustworkx.PyDAG.has_node.rst", "apiref/rustworkx.PyDAG.has_parallel_edges.rst", "apiref/rustworkx.PyDAG.in_degree.rst", "apiref/rustworkx.PyDAG.in_edges.rst", "apiref/rustworkx.PyDAG.incident_edge_index_map.rst", "apiref/rustworkx.PyDAG.incident_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDAG.is_symmetric.rst", "apiref/rustworkx.PyDAG.make_symmetric.rst", "apiref/rustworkx.PyDAG.merge_nodes.rst", "apiref/rustworkx.PyDAG.neighbors.rst", "apiref/rustworkx.PyDAG.neighbors_undirected.rst", "apiref/rustworkx.PyDAG.node_indexes.rst", "apiref/rustworkx.PyDAG.node_indices.rst", "apiref/rustworkx.PyDAG.nodes.rst", "apiref/rustworkx.PyDAG.num_edges.rst", "apiref/rustworkx.PyDAG.num_nodes.rst", "apiref/rustworkx.PyDAG.out_degree.rst", "apiref/rustworkx.PyDAG.out_edges.rst", "apiref/rustworkx.PyDAG.predecessor_indices.rst", "apiref/rustworkx.PyDAG.predecessors.rst", "apiref/rustworkx.PyDAG.read_edge_list.rst", "apiref/rustworkx.PyDAG.remove_edge.rst", "apiref/rustworkx.PyDAG.remove_edge_from_index.rst", "apiref/rustworkx.PyDAG.remove_edges_from.rst", "apiref/rustworkx.PyDAG.remove_node.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDAG.remove_nodes_from.rst", "apiref/rustworkx.PyDAG.reverse.rst", "apiref/rustworkx.PyDAG.subgraph.rst", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDAG.successor_indices.rst", "apiref/rustworkx.PyDAG.successors.rst", "apiref/rustworkx.PyDAG.to_dot.rst", "apiref/rustworkx.PyDAG.to_undirected.rst", "apiref/rustworkx.PyDAG.update_edge.rst", "apiref/rustworkx.PyDAG.update_edge_by_index.rst", "apiref/rustworkx.PyDAG.weighted_edge_list.rst", "apiref/rustworkx.PyDAG.write_edge_list.rst", "apiref/rustworkx.PyDiGraph.rst", "apiref/rustworkx.PyDiGraph.add_child.rst", "apiref/rustworkx.PyDiGraph.add_edge.rst", "apiref/rustworkx.PyDiGraph.add_edges_from.rst", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyDiGraph.add_node.rst", "apiref/rustworkx.PyDiGraph.add_nodes_from.rst", "apiref/rustworkx.PyDiGraph.add_parent.rst", "apiref/rustworkx.PyDiGraph.adj.rst", "apiref/rustworkx.PyDiGraph.adj_direction.rst", "apiref/rustworkx.PyDiGraph.clear.rst", "apiref/rustworkx.PyDiGraph.clear_edges.rst", "apiref/rustworkx.PyDiGraph.compose.rst", "apiref/rustworkx.PyDiGraph.contract_nodes.rst", "apiref/rustworkx.PyDiGraph.copy.rst", "apiref/rustworkx.PyDiGraph.edge_index_map.rst", "apiref/rustworkx.PyDiGraph.edge_indices.rst", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDiGraph.edge_list.rst", "apiref/rustworkx.PyDiGraph.edge_subgraph.rst", "apiref/rustworkx.PyDiGraph.edges.rst", "apiref/rustworkx.PyDiGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.filter_edges.rst", "apiref/rustworkx.PyDiGraph.filter_nodes.rst", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_node_by_weight.rst", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successors_by_edge.rst", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.get_all_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDiGraph.get_node_data.rst", "apiref/rustworkx.PyDiGraph.has_edge.rst", "apiref/rustworkx.PyDiGraph.has_node.rst", "apiref/rustworkx.PyDiGraph.has_parallel_edges.rst", "apiref/rustworkx.PyDiGraph.in_degree.rst", "apiref/rustworkx.PyDiGraph.in_edges.rst", "apiref/rustworkx.PyDiGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyDiGraph.incident_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.is_symmetric.rst", "apiref/rustworkx.PyDiGraph.make_symmetric.rst", "apiref/rustworkx.PyDiGraph.merge_nodes.rst", "apiref/rustworkx.PyDiGraph.neighbors.rst", "apiref/rustworkx.PyDiGraph.neighbors_undirected.rst", "apiref/rustworkx.PyDiGraph.node_indexes.rst", "apiref/rustworkx.PyDiGraph.node_indices.rst", "apiref/rustworkx.PyDiGraph.nodes.rst", "apiref/rustworkx.PyDiGraph.num_edges.rst", "apiref/rustworkx.PyDiGraph.num_nodes.rst", "apiref/rustworkx.PyDiGraph.out_degree.rst", "apiref/rustworkx.PyDiGraph.out_edges.rst", "apiref/rustworkx.PyDiGraph.predecessor_indices.rst", "apiref/rustworkx.PyDiGraph.predecessors.rst", "apiref/rustworkx.PyDiGraph.read_edge_list.rst", "apiref/rustworkx.PyDiGraph.remove_edge.rst", "apiref/rustworkx.PyDiGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyDiGraph.remove_edges_from.rst", "apiref/rustworkx.PyDiGraph.remove_node.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDiGraph.remove_nodes_from.rst", "apiref/rustworkx.PyDiGraph.reverse.rst", "apiref/rustworkx.PyDiGraph.subgraph.rst", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDiGraph.successor_indices.rst", "apiref/rustworkx.PyDiGraph.successors.rst", "apiref/rustworkx.PyDiGraph.to_dot.rst", "apiref/rustworkx.PyDiGraph.to_undirected.rst", "apiref/rustworkx.PyDiGraph.update_edge.rst", "apiref/rustworkx.PyDiGraph.update_edge_by_index.rst", "apiref/rustworkx.PyDiGraph.weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.write_edge_list.rst", "apiref/rustworkx.PyGraph.rst", "apiref/rustworkx.PyGraph.add_edge.rst", "apiref/rustworkx.PyGraph.add_edges_from.rst", "apiref/rustworkx.PyGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyGraph.add_node.rst", "apiref/rustworkx.PyGraph.add_nodes_from.rst", "apiref/rustworkx.PyGraph.adj.rst", "apiref/rustworkx.PyGraph.clear.rst", "apiref/rustworkx.PyGraph.clear_edges.rst", "apiref/rustworkx.PyGraph.compose.rst", "apiref/rustworkx.PyGraph.contract_nodes.rst", "apiref/rustworkx.PyGraph.copy.rst", "apiref/rustworkx.PyGraph.degree.rst", "apiref/rustworkx.PyGraph.edge_index_map.rst", "apiref/rustworkx.PyGraph.edge_indices.rst", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyGraph.edge_list.rst", "apiref/rustworkx.PyGraph.edge_subgraph.rst", "apiref/rustworkx.PyGraph.edges.rst", "apiref/rustworkx.PyGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyGraph.filter_edges.rst", "apiref/rustworkx.PyGraph.filter_nodes.rst", "apiref/rustworkx.PyGraph.find_node_by_weight.rst", "apiref/rustworkx.PyGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.get_all_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyGraph.get_node_data.rst", "apiref/rustworkx.PyGraph.has_edge.rst", "apiref/rustworkx.PyGraph.has_node.rst", "apiref/rustworkx.PyGraph.has_parallel_edges.rst", "apiref/rustworkx.PyGraph.in_edges.rst", "apiref/rustworkx.PyGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyGraph.incident_edges.rst", "apiref/rustworkx.PyGraph.neighbors.rst", "apiref/rustworkx.PyGraph.node_indexes.rst", "apiref/rustworkx.PyGraph.node_indices.rst", "apiref/rustworkx.PyGraph.nodes.rst", "apiref/rustworkx.PyGraph.num_edges.rst", "apiref/rustworkx.PyGraph.num_nodes.rst", "apiref/rustworkx.PyGraph.out_edges.rst", "apiref/rustworkx.PyGraph.read_edge_list.rst", "apiref/rustworkx.PyGraph.remove_edge.rst", "apiref/rustworkx.PyGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyGraph.remove_edges_from.rst", "apiref/rustworkx.PyGraph.remove_node.rst", "apiref/rustworkx.PyGraph.remove_nodes_from.rst", "apiref/rustworkx.PyGraph.subgraph.rst", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyGraph.to_directed.rst", "apiref/rustworkx.PyGraph.to_dot.rst", "apiref/rustworkx.PyGraph.update_edge.rst", "apiref/rustworkx.PyGraph.update_edge_by_index.rst", "apiref/rustworkx.PyGraph.weighted_edge_list.rst", "apiref/rustworkx.PyGraph.write_edge_list.rst", "apiref/rustworkx.RelationalCoarsestPartition.rst", "apiref/rustworkx.TopologicalSorter.rst", "apiref/rustworkx.TopologicalSorter.done.rst", "apiref/rustworkx.TopologicalSorter.get_ready.rst", "apiref/rustworkx.TopologicalSorter.is_active.rst", "apiref/rustworkx.WeightedEdgeList.rst", "apiref/rustworkx.adjacency_matrix.rst", "apiref/rustworkx.all_pairs_all_simple_paths.rst", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.all_shortest_paths.rst", "apiref/rustworkx.all_simple_paths.rst", "apiref/rustworkx.ancestors.rst", "apiref/rustworkx.articulation_points.rst", "apiref/rustworkx.astar_shortest_path.rst", "apiref/rustworkx.barabasi_albert_graph.rst", "apiref/rustworkx.bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.bellman_ford_shortest_paths.rst", "apiref/rustworkx.betweenness_centrality.rst", "apiref/rustworkx.bfs_predecessors.rst", "apiref/rustworkx.bfs_search.rst", "apiref/rustworkx.bfs_successors.rst", "apiref/rustworkx.biconnected_components.rst", "apiref/rustworkx.bipartite_layout.rst", "apiref/rustworkx.bridges.rst", "apiref/rustworkx.cartesian_product.rst", "apiref/rustworkx.chain_decomposition.rst", "apiref/rustworkx.circular_layout.rst", "apiref/rustworkx.closeness_centrality.rst", "apiref/rustworkx.collect_bicolor_runs.rst", "apiref/rustworkx.collect_runs.rst", "apiref/rustworkx.complement.rst", "apiref/rustworkx.connected_components.rst", "apiref/rustworkx.connected_subgraphs.rst", "apiref/rustworkx.core_number.rst", "apiref/rustworkx.cycle_basis.rst", "apiref/rustworkx.dag_longest_path.rst", "apiref/rustworkx.dag_longest_path_length.rst", "apiref/rustworkx.dag_weighted_longest_path.rst", "apiref/rustworkx.dag_weighted_longest_path_length.rst", "apiref/rustworkx.descendants.rst", "apiref/rustworkx.dfs_edges.rst", "apiref/rustworkx.dfs_search.rst", "apiref/rustworkx.digraph_adjacency_matrix.rst", "apiref/rustworkx.digraph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_all_shortest_paths.rst", "apiref/rustworkx.digraph_all_simple_paths.rst", "apiref/rustworkx.digraph_astar_shortest_path.rst", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.digraph_betweenness_centrality.rst", "apiref/rustworkx.digraph_bfs_search.rst", "apiref/rustworkx.digraph_bipartite_layout.rst", "apiref/rustworkx.digraph_cartesian_product.rst", "apiref/rustworkx.digraph_circular_layout.rst", "apiref/rustworkx.digraph_closeness_centrality.rst", "apiref/rustworkx.digraph_complement.rst", "apiref/rustworkx.digraph_core_number.rst", "apiref/rustworkx.digraph_dfs_edges.rst", "apiref/rustworkx.digraph_dfs_search.rst", "apiref/rustworkx.digraph_dijkstra_search.rst", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.digraph_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_distance_matrix.rst", "apiref/rustworkx.digraph_edge_betweenness_centrality.rst", "apiref/rustworkx.digraph_eigenvector_centrality.rst", "apiref/rustworkx.digraph_find_cycle.rst", "apiref/rustworkx.digraph_floyd_warshall.rst", "apiref/rustworkx.digraph_floyd_warshall_numpy.rst", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.digraph_is_isomorphic.rst", "apiref/rustworkx.digraph_is_subgraph_isomorphic.rst", "apiref/rustworkx.digraph_k_shortest_path_lengths.rst", "apiref/rustworkx.digraph_katz_centrality.rst", "apiref/rustworkx.digraph_longest_simple_path.rst", "apiref/rustworkx.digraph_maximum_bisimulation.rst", "apiref/rustworkx.digraph_node_link_json.rst", "apiref/rustworkx.digraph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.digraph_random_layout.rst", "apiref/rustworkx.digraph_shell_layout.rst", "apiref/rustworkx.digraph_spiral_layout.rst", "apiref/rustworkx.digraph_spring_layout.rst", "apiref/rustworkx.digraph_tensor_product.rst", "apiref/rustworkx.digraph_transitivity.rst", "apiref/rustworkx.digraph_union.rst", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.digraph_vf2_mapping.rst", "apiref/rustworkx.dijkstra_search.rst", "apiref/rustworkx.dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.dijkstra_shortest_paths.rst", "apiref/rustworkx.directed_barabasi_albert_graph.rst", "apiref/rustworkx.directed_gnm_random_graph.rst", "apiref/rustworkx.directed_gnp_random_graph.rst", "apiref/rustworkx.directed_random_bipartite_graph.rst", "apiref/rustworkx.directed_sbm_random_graph.rst", "apiref/rustworkx.distance_matrix.rst", "apiref/rustworkx.dominance_frontiers.rst", "apiref/rustworkx.edge_betweenness_centrality.rst", "apiref/rustworkx.eigenvector_centrality.rst", "apiref/rustworkx.find_negative_cycle.rst", "apiref/rustworkx.floyd_warshall.rst", "apiref/rustworkx.floyd_warshall_numpy.rst", "apiref/rustworkx.floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.from_node_link_json_file.rst", "apiref/rustworkx.generators.barbell_graph.rst", "apiref/rustworkx.generators.binomial_tree_graph.rst", "apiref/rustworkx.generators.complete_graph.rst", "apiref/rustworkx.generators.cycle_graph.rst", "apiref/rustworkx.generators.directed_binomial_tree_graph.rst", "apiref/rustworkx.generators.directed_complete_graph.rst", "apiref/rustworkx.generators.directed_cycle_graph.rst", "apiref/rustworkx.generators.directed_empty_graph.rst", "apiref/rustworkx.generators.directed_grid_graph.rst", "apiref/rustworkx.generators.directed_heavy_hex_graph.rst", "apiref/rustworkx.generators.directed_heavy_square_graph.rst", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.directed_mesh_graph.rst", "apiref/rustworkx.generators.directed_path_graph.rst", "apiref/rustworkx.generators.directed_star_graph.rst", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph.rst", "apiref/rustworkx.generators.empty_graph.rst", "apiref/rustworkx.generators.full_rary_tree.rst", "apiref/rustworkx.generators.generalized_petersen_graph.rst", "apiref/rustworkx.generators.grid_graph.rst", "apiref/rustworkx.generators.heavy_hex_graph.rst", "apiref/rustworkx.generators.heavy_square_graph.rst", "apiref/rustworkx.generators.hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.lollipop_graph.rst", "apiref/rustworkx.generators.mesh_graph.rst", "apiref/rustworkx.generators.path_graph.rst", "apiref/rustworkx.generators.star_graph.rst", "apiref/rustworkx.graph_adjacency_matrix.rst", "apiref/rustworkx.graph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_all_shortest_paths.rst", "apiref/rustworkx.graph_all_simple_paths.rst", "apiref/rustworkx.graph_astar_shortest_path.rst", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.graph_betweenness_centrality.rst", "apiref/rustworkx.graph_bfs_search.rst", "apiref/rustworkx.graph_bipartite_edge_color.rst", "apiref/rustworkx.graph_bipartite_layout.rst", "apiref/rustworkx.graph_cartesian_product.rst", "apiref/rustworkx.graph_circular_layout.rst", "apiref/rustworkx.graph_closeness_centrality.rst", "apiref/rustworkx.graph_complement.rst", "apiref/rustworkx.graph_core_number.rst", "apiref/rustworkx.graph_dfs_edges.rst", "apiref/rustworkx.graph_dfs_search.rst", "apiref/rustworkx.graph_dijkstra_search.rst", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.graph_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_distance_matrix.rst", "apiref/rustworkx.graph_edge_betweenness_centrality.rst", "apiref/rustworkx.graph_eigenvector_centrality.rst", "apiref/rustworkx.graph_floyd_warshall.rst", "apiref/rustworkx.graph_floyd_warshall_numpy.rst", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.graph_greedy_color.rst", "apiref/rustworkx.graph_greedy_edge_color.rst", "apiref/rustworkx.graph_is_isomorphic.rst", "apiref/rustworkx.graph_is_subgraph_isomorphic.rst", "apiref/rustworkx.graph_k_shortest_path_lengths.rst", "apiref/rustworkx.graph_katz_centrality.rst", "apiref/rustworkx.graph_line_graph.rst", "apiref/rustworkx.graph_longest_simple_path.rst", "apiref/rustworkx.graph_misra_gries_edge_color.rst", "apiref/rustworkx.graph_node_link_json.rst", "apiref/rustworkx.graph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.graph_random_layout.rst", "apiref/rustworkx.graph_shell_layout.rst", "apiref/rustworkx.graph_spiral_layout.rst", "apiref/rustworkx.graph_spring_layout.rst", "apiref/rustworkx.graph_tensor_product.rst", "apiref/rustworkx.graph_token_swapper.rst", "apiref/rustworkx.graph_transitivity.rst", "apiref/rustworkx.graph_union.rst", "apiref/rustworkx.graph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.graph_vf2_mapping.rst", "apiref/rustworkx.has_path.rst", "apiref/rustworkx.hits.rst", "apiref/rustworkx.hyperbolic_random_graph.rst", "apiref/rustworkx.immediate_dominators.rst", "apiref/rustworkx.is_bipartite.rst", "apiref/rustworkx.is_connected.rst", "apiref/rustworkx.is_directed_acyclic_graph.rst", "apiref/rustworkx.is_isomorphic.rst", "apiref/rustworkx.is_isomorphic_node_match.rst", "apiref/rustworkx.is_matching.rst", "apiref/rustworkx.is_maximal_matching.rst", "apiref/rustworkx.is_planar.rst", "apiref/rustworkx.is_subgraph_isomorphic.rst", "apiref/rustworkx.is_weakly_connected.rst", "apiref/rustworkx.isolates.rst", "apiref/rustworkx.k_shortest_path_lengths.rst", "apiref/rustworkx.katz_centrality.rst", "apiref/rustworkx.layers.rst", "apiref/rustworkx.lexicographical_topological_sort.rst", "apiref/rustworkx.longest_simple_path.rst", "apiref/rustworkx.max_weight_matching.rst", "apiref/rustworkx.metric_closure.rst", "apiref/rustworkx.minimum_spanning_edges.rst", "apiref/rustworkx.minimum_spanning_tree.rst", "apiref/rustworkx.negative_edge_cycle.rst", "apiref/rustworkx.networkx_converter.rst", "apiref/rustworkx.node_connected_component.rst", "apiref/rustworkx.node_link_json.rst", "apiref/rustworkx.num_shortest_paths_unweighted.rst", "apiref/rustworkx.number_connected_components.rst", "apiref/rustworkx.number_weakly_connected_components.rst", "apiref/rustworkx.pagerank.rst", "apiref/rustworkx.parse_node_link_json.rst", "apiref/rustworkx.random_geometric_graph.rst", "apiref/rustworkx.random_layout.rst", "apiref/rustworkx.read_graphml.rst", "apiref/rustworkx.shell_layout.rst", "apiref/rustworkx.simple_cycles.rst", "apiref/rustworkx.spiral_layout.rst", "apiref/rustworkx.spring_layout.rst", "apiref/rustworkx.steiner_tree.rst", "apiref/rustworkx.stoer_wagner_min_cut.rst", "apiref/rustworkx.strongly_connected_components.rst", "apiref/rustworkx.topological_generations.rst", "apiref/rustworkx.topological_sort.rst", "apiref/rustworkx.transitive_reduction.rst", "apiref/rustworkx.transitivity.rst", "apiref/rustworkx.two_color.rst", "apiref/rustworkx.undirected_gnm_random_graph.rst", "apiref/rustworkx.undirected_gnp_random_graph.rst", "apiref/rustworkx.undirected_random_bipartite_graph.rst", "apiref/rustworkx.undirected_sbm_random_graph.rst", "apiref/rustworkx.union.rst", "apiref/rustworkx.unweighted_average_shortest_path_length.rst", "apiref/rustworkx.vf2_mapping.rst", "apiref/rustworkx.visit.BFSVisitor.rst", "apiref/rustworkx.visit.BFSVisitor.black_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge.rst", "apiref/rustworkx.visit.BFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DFSVisitor.rst", "apiref/rustworkx.visit.DFSVisitor.back_edge.rst", "apiref/rustworkx.visit.DFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge.rst", "apiref/rustworkx.visit.DFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.rst", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex.rst", "apiref/rustworkx.visit.PruneSearch.rst", "apiref/rustworkx.visit.StopSearch.rst", "apiref/rustworkx.visualization.graphviz_draw.rst", "apiref/rustworkx.visualization.mpl_draw.rst", "apiref/rustworkx.weakly_connected_components.rst", "benchmarks.rst", "index.rst", "install.rst", "networkx.rst", "release_notes.rst", "tutorial/betweenness_centrality.rst", "tutorial/dags.rst", "tutorial/index.rst", "tutorial/introduction.rst", "visualization.rst"], "titles": ["Contributing", "Centrality", "Coloring", "Connectivity and Cycles", "DAG Algorithms", "Dominance", "Graph Operations", "Algorithm Functions", "Isomorphism", "Link Analysis", "Matching", "Other Algorithm Functions", "Shortest Paths", "Traversal", "Tree", "Converters", "Custom Return Types", "Exceptions", "Generators", "Graph Classes", "Rustworkx API Reference", "Layout Functions", "API functions for PyDigraph", "API functions for PyGraph", "Random Graph Generator Functions", "Serialization", "AllPairsPathLengthMapping", "rustworkx.AllPairsPathLengthMapping.items", "rustworkx.AllPairsPathLengthMapping.keys", "rustworkx.AllPairsPathLengthMapping.values", "AllPairsPathMapping", "rustworkx.AllPairsPathMapping.items", "rustworkx.AllPairsPathMapping.keys", "rustworkx.AllPairsPathMapping.values", "BFSPredecessors", "BFSSuccessors", "BiconnectedComponents", "rustworkx.BiconnectedComponents.items", "rustworkx.BiconnectedComponents.keys", "rustworkx.BiconnectedComponents.values", "CentralityMapping", "rustworkx.CentralityMapping.items", "rustworkx.CentralityMapping.keys", "rustworkx.CentralityMapping.values", "Chains", "ColoringStrategy", "rustworkx.DAGHasCycle", "rustworkx.DAGWouldCycle", "EdgeCentralityMapping", "rustworkx.EdgeCentralityMapping.items", "rustworkx.EdgeCentralityMapping.keys", "rustworkx.EdgeCentralityMapping.values", "EdgeIndexMap", "rustworkx.EdgeIndexMap.items", "rustworkx.EdgeIndexMap.keys", "rustworkx.EdgeIndexMap.values", "EdgeIndices", "EdgeList", "rustworkx.GraphNotBipartite", "IndexPartitionBlock", "rustworkx.InvalidMapping", "rustworkx.InvalidNode", "rustworkx.JSONSerializationError", "rustworkx.NegativeCycle", "rustworkx.NoEdgeBetweenNodes", "rustworkx.NoPathFound", "rustworkx.NoSuitableNeighbors", "NodeIndices", "NodeMap", "rustworkx.NodeMap.items", "rustworkx.NodeMap.keys", "rustworkx.NodeMap.values", "rustworkx.NullGraph", "PathLengthMapping", "rustworkx.PathLengthMapping.items", "rustworkx.PathLengthMapping.keys", "rustworkx.PathLengthMapping.values", "PathMapping", "rustworkx.PathMapping.items", "rustworkx.PathMapping.keys", "rustworkx.PathMapping.values", "Pos2DMapping", "rustworkx.Pos2DMapping.items", "rustworkx.Pos2DMapping.keys", "rustworkx.Pos2DMapping.values", "ProductNodeMap", "rustworkx.ProductNodeMap.items", "rustworkx.ProductNodeMap.keys", "rustworkx.ProductNodeMap.values", "PyDAG", "rustworkx.PyDAG.add_child", "rustworkx.PyDAG.add_edge", "rustworkx.PyDAG.add_edges_from", "rustworkx.PyDAG.add_edges_from_no_data", "rustworkx.PyDAG.add_node", "rustworkx.PyDAG.add_nodes_from", "rustworkx.PyDAG.add_parent", "rustworkx.PyDAG.adj", "rustworkx.PyDAG.adj_direction", "rustworkx.PyDAG.clear", "rustworkx.PyDAG.clear_edges", "rustworkx.PyDAG.compose", "rustworkx.PyDAG.contract_nodes", "rustworkx.PyDAG.copy", "rustworkx.PyDAG.edge_index_map", "rustworkx.PyDAG.edge_indices", "rustworkx.PyDAG.edge_indices_from_endpoints", "rustworkx.PyDAG.edge_list", "rustworkx.PyDAG.edge_subgraph", "rustworkx.PyDAG.edges", "rustworkx.PyDAG.extend_from_edge_list", "rustworkx.PyDAG.extend_from_weighted_edge_list", "rustworkx.PyDAG.filter_edges", "rustworkx.PyDAG.filter_nodes", "rustworkx.PyDAG.find_adjacent_node_by_edge", "rustworkx.PyDAG.find_node_by_weight", "rustworkx.PyDAG.find_predecessor_node_by_edge", "rustworkx.PyDAG.find_predecessors_by_edge", "rustworkx.PyDAG.find_successors_by_edge", "rustworkx.PyDAG.from_adjacency_matrix", "rustworkx.PyDAG.from_complex_adjacency_matrix", "rustworkx.PyDAG.get_all_edge_data", "rustworkx.PyDAG.get_edge_data", "rustworkx.PyDAG.get_edge_data_by_index", "rustworkx.PyDAG.get_edge_endpoints_by_index", "rustworkx.PyDAG.get_node_data", "rustworkx.PyDAG.has_edge", "rustworkx.PyDAG.has_node", "rustworkx.PyDAG.has_parallel_edges", "rustworkx.PyDAG.in_degree", "rustworkx.PyDAG.in_edges", "rustworkx.PyDAG.incident_edge_index_map", "rustworkx.PyDAG.incident_edges", "rustworkx.PyDAG.insert_node_on_in_edges", "rustworkx.PyDAG.insert_node_on_in_edges_multiple", "rustworkx.PyDAG.insert_node_on_out_edges", "rustworkx.PyDAG.insert_node_on_out_edges_multiple", "rustworkx.PyDAG.is_symmetric", "rustworkx.PyDAG.make_symmetric", "rustworkx.PyDAG.merge_nodes", "rustworkx.PyDAG.neighbors", "rustworkx.PyDAG.neighbors_undirected", "rustworkx.PyDAG.node_indexes", "rustworkx.PyDAG.node_indices", "rustworkx.PyDAG.nodes", "rustworkx.PyDAG.num_edges", "rustworkx.PyDAG.num_nodes", "rustworkx.PyDAG.out_degree", "rustworkx.PyDAG.out_edges", "rustworkx.PyDAG.predecessor_indices", "rustworkx.PyDAG.predecessors", "rustworkx.PyDAG.read_edge_list", "rustworkx.PyDAG.remove_edge", "rustworkx.PyDAG.remove_edge_from_index", "rustworkx.PyDAG.remove_edges_from", "rustworkx.PyDAG.remove_node", "rustworkx.PyDAG.remove_node_retain_edges", "rustworkx.PyDAG.remove_node_retain_edges_by_id", "rustworkx.PyDAG.remove_node_retain_edges_by_key", "rustworkx.PyDAG.remove_nodes_from", "rustworkx.PyDAG.reverse", "rustworkx.PyDAG.subgraph", "rustworkx.PyDAG.substitute_node_with_subgraph", "rustworkx.PyDAG.successor_indices", "rustworkx.PyDAG.successors", "rustworkx.PyDAG.to_dot", "rustworkx.PyDAG.to_undirected", "rustworkx.PyDAG.update_edge", "rustworkx.PyDAG.update_edge_by_index", "rustworkx.PyDAG.weighted_edge_list", "rustworkx.PyDAG.write_edge_list", "PyDiGraph", "rustworkx.PyDiGraph.add_child", "rustworkx.PyDiGraph.add_edge", "rustworkx.PyDiGraph.add_edges_from", "rustworkx.PyDiGraph.add_edges_from_no_data", "rustworkx.PyDiGraph.add_node", "rustworkx.PyDiGraph.add_nodes_from", "rustworkx.PyDiGraph.add_parent", "rustworkx.PyDiGraph.adj", "rustworkx.PyDiGraph.adj_direction", "rustworkx.PyDiGraph.clear", "rustworkx.PyDiGraph.clear_edges", "rustworkx.PyDiGraph.compose", "rustworkx.PyDiGraph.contract_nodes", "rustworkx.PyDiGraph.copy", "rustworkx.PyDiGraph.edge_index_map", "rustworkx.PyDiGraph.edge_indices", "rustworkx.PyDiGraph.edge_indices_from_endpoints", "rustworkx.PyDiGraph.edge_list", "rustworkx.PyDiGraph.edge_subgraph", "rustworkx.PyDiGraph.edges", "rustworkx.PyDiGraph.extend_from_edge_list", "rustworkx.PyDiGraph.extend_from_weighted_edge_list", "rustworkx.PyDiGraph.filter_edges", "rustworkx.PyDiGraph.filter_nodes", "rustworkx.PyDiGraph.find_adjacent_node_by_edge", "rustworkx.PyDiGraph.find_node_by_weight", "rustworkx.PyDiGraph.find_predecessor_node_by_edge", "rustworkx.PyDiGraph.find_predecessors_by_edge", "rustworkx.PyDiGraph.find_successors_by_edge", "rustworkx.PyDiGraph.from_adjacency_matrix", "rustworkx.PyDiGraph.from_complex_adjacency_matrix", "rustworkx.PyDiGraph.get_all_edge_data", "rustworkx.PyDiGraph.get_edge_data", "rustworkx.PyDiGraph.get_edge_data_by_index", "rustworkx.PyDiGraph.get_edge_endpoints_by_index", "rustworkx.PyDiGraph.get_node_data", "rustworkx.PyDiGraph.has_edge", "rustworkx.PyDiGraph.has_node", "rustworkx.PyDiGraph.has_parallel_edges", "rustworkx.PyDiGraph.in_degree", "rustworkx.PyDiGraph.in_edges", "rustworkx.PyDiGraph.incident_edge_index_map", "rustworkx.PyDiGraph.incident_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "rustworkx.PyDiGraph.insert_node_on_out_edges", "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "rustworkx.PyDiGraph.is_symmetric", "rustworkx.PyDiGraph.make_symmetric", "rustworkx.PyDiGraph.merge_nodes", "rustworkx.PyDiGraph.neighbors", "rustworkx.PyDiGraph.neighbors_undirected", "rustworkx.PyDiGraph.node_indexes", "rustworkx.PyDiGraph.node_indices", "rustworkx.PyDiGraph.nodes", "rustworkx.PyDiGraph.num_edges", "rustworkx.PyDiGraph.num_nodes", "rustworkx.PyDiGraph.out_degree", "rustworkx.PyDiGraph.out_edges", "rustworkx.PyDiGraph.predecessor_indices", "rustworkx.PyDiGraph.predecessors", "rustworkx.PyDiGraph.read_edge_list", "rustworkx.PyDiGraph.remove_edge", "rustworkx.PyDiGraph.remove_edge_from_index", "rustworkx.PyDiGraph.remove_edges_from", "rustworkx.PyDiGraph.remove_node", "rustworkx.PyDiGraph.remove_node_retain_edges", "rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "rustworkx.PyDiGraph.remove_nodes_from", "rustworkx.PyDiGraph.reverse", "rustworkx.PyDiGraph.subgraph", "rustworkx.PyDiGraph.substitute_node_with_subgraph", "rustworkx.PyDiGraph.successor_indices", "rustworkx.PyDiGraph.successors", "rustworkx.PyDiGraph.to_dot", "rustworkx.PyDiGraph.to_undirected", "rustworkx.PyDiGraph.update_edge", "rustworkx.PyDiGraph.update_edge_by_index", "rustworkx.PyDiGraph.weighted_edge_list", "rustworkx.PyDiGraph.write_edge_list", "PyGraph", "rustworkx.PyGraph.add_edge", "rustworkx.PyGraph.add_edges_from", "rustworkx.PyGraph.add_edges_from_no_data", "rustworkx.PyGraph.add_node", "rustworkx.PyGraph.add_nodes_from", "rustworkx.PyGraph.adj", "rustworkx.PyGraph.clear", "rustworkx.PyGraph.clear_edges", "rustworkx.PyGraph.compose", "rustworkx.PyGraph.contract_nodes", "rustworkx.PyGraph.copy", "rustworkx.PyGraph.degree", "rustworkx.PyGraph.edge_index_map", "rustworkx.PyGraph.edge_indices", "rustworkx.PyGraph.edge_indices_from_endpoints", "rustworkx.PyGraph.edge_list", "rustworkx.PyGraph.edge_subgraph", "rustworkx.PyGraph.edges", "rustworkx.PyGraph.extend_from_edge_list", "rustworkx.PyGraph.extend_from_weighted_edge_list", "rustworkx.PyGraph.filter_edges", "rustworkx.PyGraph.filter_nodes", "rustworkx.PyGraph.find_node_by_weight", "rustworkx.PyGraph.from_adjacency_matrix", "rustworkx.PyGraph.from_complex_adjacency_matrix", "rustworkx.PyGraph.get_all_edge_data", "rustworkx.PyGraph.get_edge_data", "rustworkx.PyGraph.get_edge_data_by_index", "rustworkx.PyGraph.get_edge_endpoints_by_index", "rustworkx.PyGraph.get_node_data", "rustworkx.PyGraph.has_edge", "rustworkx.PyGraph.has_node", "rustworkx.PyGraph.has_parallel_edges", "rustworkx.PyGraph.in_edges", "rustworkx.PyGraph.incident_edge_index_map", "rustworkx.PyGraph.incident_edges", "rustworkx.PyGraph.neighbors", "rustworkx.PyGraph.node_indexes", "rustworkx.PyGraph.node_indices", "rustworkx.PyGraph.nodes", "rustworkx.PyGraph.num_edges", "rustworkx.PyGraph.num_nodes", "rustworkx.PyGraph.out_edges", "rustworkx.PyGraph.read_edge_list", "rustworkx.PyGraph.remove_edge", "rustworkx.PyGraph.remove_edge_from_index", "rustworkx.PyGraph.remove_edges_from", "rustworkx.PyGraph.remove_node", "rustworkx.PyGraph.remove_nodes_from", "rustworkx.PyGraph.subgraph", "rustworkx.PyGraph.substitute_node_with_subgraph", "rustworkx.PyGraph.to_directed", "rustworkx.PyGraph.to_dot", "rustworkx.PyGraph.update_edge", "rustworkx.PyGraph.update_edge_by_index", "rustworkx.PyGraph.weighted_edge_list", "rustworkx.PyGraph.write_edge_list", "RelationalCoarsestPartition", "TopologicalSorter", "rustworkx.TopologicalSorter.done", "rustworkx.TopologicalSorter.get_ready", "rustworkx.TopologicalSorter.is_active", "WeightedEdgeList", "rustworkx.adjacency_matrix", "rustworkx.all_pairs_all_simple_paths", "rustworkx.all_pairs_bellman_ford_path_lengths", "rustworkx.all_pairs_bellman_ford_shortest_paths", "rustworkx.all_pairs_dijkstra_path_lengths", "rustworkx.all_pairs_dijkstra_shortest_paths", "rustworkx.all_shortest_paths", "rustworkx.all_simple_paths", "rustworkx.ancestors", "rustworkx.articulation_points", "rustworkx.astar_shortest_path", "rustworkx.barabasi_albert_graph", "rustworkx.bellman_ford_shortest_path_lengths", "rustworkx.bellman_ford_shortest_paths", "rustworkx.betweenness_centrality", "rustworkx.bfs_predecessors", "rustworkx.bfs_search", "rustworkx.bfs_successors", "rustworkx.biconnected_components", "rustworkx.bipartite_layout", "rustworkx.bridges", "rustworkx.cartesian_product", "rustworkx.chain_decomposition", "rustworkx.circular_layout", "rustworkx.closeness_centrality", "rustworkx.collect_bicolor_runs", "rustworkx.collect_runs", "rustworkx.complement", "rustworkx.connected_components", "rustworkx.connected_subgraphs", "rustworkx.core_number", "rustworkx.cycle_basis", "rustworkx.dag_longest_path", "rustworkx.dag_longest_path_length", "rustworkx.dag_weighted_longest_path", "rustworkx.dag_weighted_longest_path_length", "rustworkx.descendants", "rustworkx.dfs_edges", "rustworkx.dfs_search", "rustworkx.digraph_adjacency_matrix", "rustworkx.digraph_all_pairs_all_simple_paths", "rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "rustworkx.digraph_all_pairs_dijkstra_path_lengths", "rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "rustworkx.digraph_all_shortest_paths", "rustworkx.digraph_all_simple_paths", "rustworkx.digraph_astar_shortest_path", "rustworkx.digraph_bellman_ford_shortest_path_lengths", "rustworkx.digraph_betweenness_centrality", "rustworkx.digraph_bfs_search", "rustworkx.digraph_bipartite_layout", "rustworkx.digraph_cartesian_product", "rustworkx.digraph_circular_layout", "rustworkx.digraph_closeness_centrality", "rustworkx.digraph_complement", "rustworkx.digraph_core_number", "rustworkx.digraph_dfs_edges", "rustworkx.digraph_dfs_search", "rustworkx.digraph_dijkstra_search", "rustworkx.digraph_dijkstra_shortest_path_lengths", "rustworkx.digraph_dijkstra_shortest_paths", "rustworkx.digraph_distance_matrix", "rustworkx.digraph_edge_betweenness_centrality", "rustworkx.digraph_eigenvector_centrality", "rustworkx.digraph_find_cycle", "rustworkx.digraph_floyd_warshall", "rustworkx.digraph_floyd_warshall_numpy", "rustworkx.digraph_floyd_warshall_successor_and_distance", "rustworkx.digraph_is_isomorphic", "rustworkx.digraph_is_subgraph_isomorphic", "rustworkx.digraph_k_shortest_path_lengths", "rustworkx.digraph_katz_centrality", "rustworkx.digraph_longest_simple_path", "rustworkx.digraph_maximum_bisimulation", "rustworkx.digraph_node_link_json", "rustworkx.digraph_num_shortest_paths_unweighted", "rustworkx.digraph_random_layout", "rustworkx.digraph_shell_layout", "rustworkx.digraph_spiral_layout", "rustworkx.digraph_spring_layout", "rustworkx.digraph_tensor_product", "rustworkx.digraph_transitivity", "rustworkx.digraph_union", "rustworkx.digraph_unweighted_average_shortest_path_length", "rustworkx.digraph_vf2_mapping", "rustworkx.dijkstra_search", "rustworkx.dijkstra_shortest_path_lengths", "rustworkx.dijkstra_shortest_paths", "rustworkx.directed_barabasi_albert_graph", "rustworkx.directed_gnm_random_graph", "rustworkx.directed_gnp_random_graph", "rustworkx.directed_random_bipartite_graph", "rustworkx.directed_sbm_random_graph", "rustworkx.distance_matrix", "rustworkx.dominance_frontiers", "rustworkx.edge_betweenness_centrality", "rustworkx.eigenvector_centrality", "rustworkx.find_negative_cycle", "rustworkx.floyd_warshall", "rustworkx.floyd_warshall_numpy", "rustworkx.floyd_warshall_successor_and_distance", "rustworkx.from_node_link_json_file", "rustworkx.generators.barbell_graph", "rustworkx.generators.binomial_tree_graph", "rustworkx.generators.complete_graph", "rustworkx.generators.cycle_graph", "rustworkx.generators.directed_binomial_tree_graph", "rustworkx.generators.directed_complete_graph", "rustworkx.generators.directed_cycle_graph", "rustworkx.generators.directed_empty_graph", "rustworkx.generators.directed_grid_graph", "rustworkx.generators.directed_heavy_hex_graph", "rustworkx.generators.directed_heavy_square_graph", "rustworkx.generators.directed_hexagonal_lattice_graph", "rustworkx.generators.directed_mesh_graph", "rustworkx.generators.directed_path_graph", "rustworkx.generators.directed_star_graph", "rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "rustworkx.generators.empty_graph", "rustworkx.generators.full_rary_tree", "rustworkx.generators.generalized_petersen_graph", "rustworkx.generators.grid_graph", "rustworkx.generators.heavy_hex_graph", "rustworkx.generators.heavy_square_graph", "rustworkx.generators.hexagonal_lattice_graph", "rustworkx.generators.lollipop_graph", "rustworkx.generators.mesh_graph", "rustworkx.generators.path_graph", "rustworkx.generators.star_graph", "rustworkx.graph_adjacency_matrix", "rustworkx.graph_all_pairs_all_simple_paths", "rustworkx.graph_all_pairs_bellman_ford_path_lengths", "rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "rustworkx.graph_all_pairs_dijkstra_path_lengths", "rustworkx.graph_all_pairs_dijkstra_shortest_paths", "rustworkx.graph_all_shortest_paths", "rustworkx.graph_all_simple_paths", "rustworkx.graph_astar_shortest_path", "rustworkx.graph_bellman_ford_shortest_path_lengths", "rustworkx.graph_betweenness_centrality", "rustworkx.graph_bfs_search", "rustworkx.graph_bipartite_edge_color", "rustworkx.graph_bipartite_layout", "rustworkx.graph_cartesian_product", "rustworkx.graph_circular_layout", "rustworkx.graph_closeness_centrality", "rustworkx.graph_complement", "rustworkx.graph_core_number", "rustworkx.graph_dfs_edges", "rustworkx.graph_dfs_search", "rustworkx.graph_dijkstra_search", "rustworkx.graph_dijkstra_shortest_path_lengths", "rustworkx.graph_dijkstra_shortest_paths", "rustworkx.graph_distance_matrix", "rustworkx.graph_edge_betweenness_centrality", "rustworkx.graph_eigenvector_centrality", "rustworkx.graph_floyd_warshall", "rustworkx.graph_floyd_warshall_numpy", "rustworkx.graph_floyd_warshall_successor_and_distance", "rustworkx.graph_greedy_color", "rustworkx.graph_greedy_edge_color", "rustworkx.graph_is_isomorphic", "rustworkx.graph_is_subgraph_isomorphic", "rustworkx.graph_k_shortest_path_lengths", "rustworkx.graph_katz_centrality", "rustworkx.graph_line_graph", "rustworkx.graph_longest_simple_path", "rustworkx.graph_misra_gries_edge_color", "rustworkx.graph_node_link_json", "rustworkx.graph_num_shortest_paths_unweighted", "rustworkx.graph_random_layout", "rustworkx.graph_shell_layout", "rustworkx.graph_spiral_layout", "rustworkx.graph_spring_layout", "rustworkx.graph_tensor_product", "rustworkx.graph_token_swapper", "rustworkx.graph_transitivity", "rustworkx.graph_union", "rustworkx.graph_unweighted_average_shortest_path_length", "rustworkx.graph_vf2_mapping", "rustworkx.has_path", "rustworkx.hits", "rustworkx.hyperbolic_random_graph", "rustworkx.immediate_dominators", "rustworkx.is_bipartite", "rustworkx.is_connected", "rustworkx.is_directed_acyclic_graph", "rustworkx.is_isomorphic", "rustworkx.is_isomorphic_node_match", "rustworkx.is_matching", "rustworkx.is_maximal_matching", "rustworkx.is_planar", "rustworkx.is_subgraph_isomorphic", "rustworkx.is_weakly_connected", "rustworkx.isolates", "rustworkx.k_shortest_path_lengths", "rustworkx.katz_centrality", "rustworkx.layers", "rustworkx.lexicographical_topological_sort", "rustworkx.longest_simple_path", "rustworkx.max_weight_matching", "rustworkx.metric_closure", "rustworkx.minimum_spanning_edges", "rustworkx.minimum_spanning_tree", "rustworkx.negative_edge_cycle", "rustworkx.networkx_converter", "rustworkx.node_connected_component", "rustworkx.node_link_json", "rustworkx.num_shortest_paths_unweighted", "rustworkx.number_connected_components", "rustworkx.number_weakly_connected_components", "rustworkx.pagerank", "rustworkx.parse_node_link_json", "rustworkx.random_geometric_graph", "rustworkx.random_layout", "rustworkx.read_graphml", "rustworkx.shell_layout", "rustworkx.simple_cycles", "rustworkx.spiral_layout", "rustworkx.spring_layout", "rustworkx.steiner_tree", "rustworkx.stoer_wagner_min_cut", "rustworkx.strongly_connected_components", "rustworkx.topological_generations", "rustworkx.topological_sort", "rustworkx.transitive_reduction", "rustworkx.transitivity", "rustworkx.two_color", "rustworkx.undirected_gnm_random_graph", "rustworkx.undirected_gnp_random_graph", "rustworkx.undirected_random_bipartite_graph", "rustworkx.undirected_sbm_random_graph", "rustworkx.union", "rustworkx.unweighted_average_shortest_path_length", "rustworkx.vf2_mapping", "BFSVisitor", "rustworkx.visit.BFSVisitor.black_target_edge", "rustworkx.visit.BFSVisitor.discover_vertex", "rustworkx.visit.BFSVisitor.finish_vertex", "rustworkx.visit.BFSVisitor.gray_target_edge", "rustworkx.visit.BFSVisitor.non_tree_edge", "rustworkx.visit.BFSVisitor.tree_edge", "DFSVisitor", "rustworkx.visit.DFSVisitor.back_edge", "rustworkx.visit.DFSVisitor.discover_vertex", "rustworkx.visit.DFSVisitor.finish_vertex", "rustworkx.visit.DFSVisitor.forward_or_cross_edge", "rustworkx.visit.DFSVisitor.tree_edge", "DijkstraVisitor", "rustworkx.visit.DijkstraVisitor.discover_vertex", "rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "rustworkx.visit.DijkstraVisitor.edge_relaxed", "rustworkx.visit.DijkstraVisitor.examine_edge", "rustworkx.visit.DijkstraVisitor.finish_vertex", "rustworkx.visit.PruneSearch", "rustworkx.visit.StopSearch", "rustworkx.visualization.graphviz_draw", "rustworkx.visualization.mpl_draw", "rustworkx.weakly_connected_components", "Rustworkx Comparison Benchmarks With Other Libraries", "rustworkx Documentation", "Getting Started", "rustworkx for NetworkX users", "Release Notes", "Working with Betweenness Centrality", "Directed Acyclic Graphs", "rustworkx Tutorials and Guides", "Introduction to rustworkx", "Visualization"], "terms": {"first": [0, 45, 101, 115, 121, 122, 151, 167, 183, 197, 203, 204, 233, 249, 262, 276, 279, 280, 284, 296, 297, 307, 312, 332, 333, 334, 338, 339, 354, 355, 367, 369, 374, 375, 382, 385, 386, 387, 398, 400, 402, 418, 423, 426, 433, 434, 445, 446, 458, 461, 466, 467, 476, 477, 478, 479, 480, 492, 495, 497, 499, 505, 506, 510, 515, 550, 552, 555, 562, 567, 577, 581, 582, 583, 585], "read": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 85, 104, 151, 170, 186, 233, 252, 266, 297, 310, 311, 316, 319, 320, 321, 322, 329, 330, 338, 358, 359, 360, 361, 365, 366, 369, 380, 381, 383, 389, 398, 413, 414, 416, 449, 450, 451, 452, 456, 457, 461, 472, 473, 474, 482, 492, 499, 514, 529, 533, 580, 581, 585], "overal": 0, "qiskit": [0, 578, 580, 581], "project": [0, 529, 580, 581], "guidelin": 0, "These": [0, 22, 23, 89, 171, 253, 579, 580, 581, 585], "ar": [0, 22, 23, 34, 35, 57, 77, 89, 92, 93, 97, 98, 101, 102, 107, 110, 111, 119, 120, 133, 134, 135, 136, 138, 151, 152, 154, 156, 157, 158, 161, 167, 169, 171, 174, 175, 179, 180, 183, 184, 189, 192, 193, 201, 202, 215, 216, 217, 218, 220, 233, 234, 236, 238, 239, 240, 243, 249, 251, 253, 255, 256, 259, 262, 263, 269, 272, 273, 277, 278, 280, 297, 298, 300, 303, 305, 307, 309, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 330, 333, 335, 337, 338, 339, 341, 344, 347, 348, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 369, 371, 372, 373, 374, 375, 376, 378, 380, 381, 383, 384, 385, 386, 387, 389, 390, 397, 398, 399, 400, 402, 403, 405, 406, 407, 410, 413, 414, 416, 417, 418, 420, 422, 423, 425, 426, 428, 431, 432, 433, 434, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 491, 492, 493, 494, 495, 497, 499, 500, 504, 505, 506, 510, 512, 514, 515, 516, 517, 518, 520, 521, 529, 531, 533, 537, 541, 544, 546, 549, 550, 552, 561, 574, 575, 577, 578, 579, 580, 581, 582, 583, 585], "all": [0, 26, 30, 97, 98, 99, 100, 103, 105, 106, 108, 109, 117, 118, 121, 130, 133, 134, 135, 136, 138, 139, 142, 143, 144, 148, 150, 156, 157, 158, 160, 164, 166, 167, 179, 180, 181, 182, 185, 187, 188, 190, 191, 199, 200, 203, 212, 215, 216, 217, 218, 220, 221, 224, 225, 226, 230, 232, 238, 239, 240, 242, 246, 248, 249, 259, 260, 261, 264, 267, 268, 270, 271, 279, 280, 287, 291, 292, 293, 296, 305, 307, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 333, 335, 339, 341, 342, 343, 346, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 371, 374, 375, 376, 380, 381, 383, 384, 385, 389, 390, 399, 400, 401, 402, 403, 406, 407, 408, 409, 412, 413, 414, 416, 417, 418, 428, 439, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 463, 466, 467, 468, 472, 473, 474, 475, 476, 482, 484, 495, 496, 497, 500, 501, 514, 516, 517, 518, 520, 521, 535, 538, 539, 543, 546, 547, 548, 550, 551, 552, 556, 563, 571, 574, 575, 578, 579, 581, 583, 585], "includ": [0, 117, 118, 161, 162, 199, 200, 243, 244, 303, 304, 318, 324, 331, 357, 363, 366, 392, 401, 448, 454, 457, 486, 496, 525, 551, 578, 579, 580, 581, 583, 585], "http": [0, 339, 381, 389, 408, 412, 414, 429, 430, 435, 438, 440, 441, 459, 473, 482, 485, 493, 499, 501, 509, 514, 529, 533, 535, 538, 547, 578, 580, 581], "github": [0, 408, 535, 547, 577, 578, 580, 581], "com": [0, 389, 408, 482, 514, 535, 538, 547, 578, 580, 581], "blob": [0, 408, 535, 547], "main": [0, 581], "md": 0, "while": [0, 119, 120, 201, 202, 277, 278, 312, 325, 333, 353, 354, 355, 367, 374, 375, 376, 385, 386, 387, 397, 401, 402, 403, 418, 458, 466, 467, 468, 476, 479, 480, 491, 497, 505, 510, 533, 537, 541, 542, 551, 552, 572, 574, 578, 580, 581, 583], "": [0, 89, 102, 112, 113, 162, 167, 168, 170, 171, 184, 194, 195, 244, 249, 250, 252, 253, 263, 274, 275, 304, 307, 308, 310, 312, 319, 320, 321, 322, 323, 327, 329, 330, 331, 332, 333, 334, 338, 341, 347, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 371, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 387, 389, 397, 400, 401, 403, 404, 405, 413, 414, 415, 416, 417, 418, 421, 424, 429, 430, 435, 440, 441, 449, 450, 451, 452, 453, 455, 456, 457, 458, 461, 463, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 480, 482, 485, 491, 493, 495, 496, 499, 502, 510, 514, 516, 519, 520, 521, 522, 529, 535, 537, 538, 539, 540, 544, 550, 551, 567, 574, 575, 578, 579, 580, 581, 582, 585], "directli": [0, 158, 240, 580, 581, 585], "applic": [0, 341, 438, 533, 578, 579, 581], "sinc": [0, 115, 197, 276, 387, 480, 510, 561, 578, 580, 581, 583, 585], "most": [0, 485, 531, 580, 581, 585], "about": [0, 577, 578, 579, 581], "itself": [0, 438, 580], "an": [0, 34, 35, 44, 52, 56, 57, 59, 67, 73, 77, 89, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 104, 107, 108, 110, 111, 112, 113, 114, 116, 119, 120, 122, 125, 126, 131, 132, 138, 141, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 183, 184, 186, 189, 190, 192, 193, 194, 195, 196, 198, 201, 202, 204, 207, 208, 213, 214, 220, 223, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 266, 269, 270, 272, 273, 274, 275, 277, 278, 283, 284, 288, 289, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 333, 335, 336, 337, 339, 340, 341, 345, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 389, 391, 392, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 419, 420, 421, 422, 423, 424, 429, 430, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 486, 488, 489, 490, 491, 493, 494, 497, 499, 500, 503, 505, 509, 510, 511, 512, 513, 514, 516, 518, 519, 522, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 545, 546, 547, 548, 549, 552, 561, 564, 574, 575, 577, 578, 579, 580, 581, 583, 585], "independ": [0, 408, 409, 477, 478, 523, 547, 548, 578, 581], "librari": [0, 529, 574, 578, 579, 580, 581, 585], "develop": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "tandem": 0, "advic": 0, "still": [0, 315, 407, 518, 546, 578, 579, 580, 581], "appli": [0, 493, 581, 585], "here": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "In": [0, 108, 190, 270, 317, 333, 341, 342, 355, 356, 367, 371, 375, 381, 389, 390, 408, 414, 447, 458, 463, 467, 473, 482, 484, 499, 514, 517, 529, 547, 564, 578, 580, 581, 583, 585], "addit": [0, 89, 171, 253, 342, 578, 579, 580, 581, 585], "detail": [0, 158, 240, 381, 389, 414, 438, 473, 482, 499, 514, 529, 574, 575, 578, 579, 580, 581, 585], "below": [0, 333, 354, 355, 367, 374, 375, 376, 397, 403, 420, 443, 458, 466, 467, 468, 491, 537, 580], "implement": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 158, 171, 240, 253, 311, 316, 332, 334, 381, 389, 408, 414, 430, 441, 459, 473, 482, 493, 514, 529, 533, 535, 538, 540, 547, 577, 578, 580, 581, 585], "primarili": [0, 580, 581], "thin": 0, "layer": [0, 7, 581], "becaus": [0, 165, 247, 306, 516, 580, 581, 582, 585], "your": [0, 156, 238, 421, 424, 579, 580, 581, 585], "involv": [0, 585], "modif": [0, 312], "src": 0, "To": [0, 280, 385, 418, 476, 579, 581, 582, 583, 585], "understand": 0, "which": [0, 89, 102, 112, 113, 114, 116, 117, 118, 138, 142, 157, 158, 162, 171, 184, 194, 195, 196, 198, 199, 200, 220, 224, 239, 240, 244, 253, 263, 274, 275, 291, 304, 312, 313, 317, 319, 320, 321, 322, 323, 327, 330, 333, 339, 348, 355, 356, 358, 359, 360, 361, 362, 364, 367, 375, 376, 378, 382, 383, 384, 385, 390, 391, 395, 397, 403, 405, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 458, 467, 468, 470, 474, 475, 476, 477, 484, 489, 491, 493, 500, 507, 508, 516, 517, 518, 519, 520, 521, 531, 534, 537, 538, 539, 541, 578, 579, 580, 581, 582, 583, 585], "you": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 68, 73, 77, 85, 89, 131, 132, 161, 165, 166, 167, 171, 213, 214, 243, 247, 248, 249, 253, 288, 289, 303, 306, 307, 311, 316, 318, 319, 320, 321, 322, 333, 355, 357, 358, 359, 360, 361, 367, 375, 376, 383, 384, 385, 390, 399, 403, 416, 417, 418, 448, 458, 467, 468, 474, 475, 476, 477, 478, 484, 493, 494, 517, 518, 519, 523, 538, 544, 574, 575, 578, 579, 580, 581, 582, 583, 585], "need": [0, 167, 171, 249, 253, 307, 428, 439, 574, 578, 579, 580, 581, 582, 583, 585], "we": [0, 312, 333, 355, 367, 375, 387, 458, 467, 480, 510, 562, 563, 567, 577, 580, 581, 582, 583, 585], "invit": 0, "overview": 0, "our": [0, 581, 583, 585], "simplifi": [0, 581, 583], "sourc": [0, 89, 102, 107, 108, 110, 111, 114, 116, 126, 131, 139, 162, 167, 169, 184, 189, 190, 192, 193, 196, 198, 208, 213, 221, 244, 249, 251, 269, 270, 272, 273, 288, 304, 307, 309, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 341, 344, 347, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 365, 367, 374, 375, 376, 377, 378, 382, 383, 385, 393, 403, 404, 405, 411, 413, 414, 416, 417, 418, 448, 449, 450, 451, 452, 453, 456, 458, 466, 467, 468, 469, 470, 474, 476, 487, 498, 499, 502, 505, 506, 510, 512, 513, 514, 517, 523, 525, 526, 532, 534, 536, 537, 538, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 581, 583], "tree": [0, 7, 20, 333, 339, 354, 355, 367, 374, 375, 376, 403, 421, 424, 437, 458, 466, 467, 468, 520, 521, 538, 554, 557, 559, 561, 563, 565, 572, 581], "tini": [0, 581], "larg": [0, 386, 387, 408, 479, 480, 505, 506, 547, 577, 580, 581, 583], "mod": 0, "pure_rust_cod": 0, "more_pure_rust_cod": 0, "add": [0, 89, 90, 91, 92, 93, 94, 95, 96, 101, 110, 111, 133, 134, 135, 136, 156, 157, 158, 171, 172, 173, 174, 175, 176, 177, 178, 183, 192, 193, 215, 216, 217, 218, 238, 239, 240, 253, 254, 255, 256, 257, 258, 262, 272, 273, 400, 426, 433, 434, 495, 518, 523, 533, 550, 579, 580, 581, 583, 585], "them": [0, 166, 248, 312, 386, 387, 479, 480, 505, 506, 510, 581, 585], "import": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 141, 151, 160, 165, 170, 171, 183, 194, 195, 223, 233, 242, 247, 252, 253, 262, 274, 275, 297, 306, 310, 311, 312, 316, 333, 355, 367, 369, 375, 390, 398, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 461, 467, 477, 478, 483, 484, 485, 492, 517, 574, 575, 579, 580, 581, 582, 583], "defin": [0, 319, 320, 329, 330, 341, 348, 358, 359, 365, 371, 399, 428, 439, 449, 450, 456, 463, 494, 539, 581, 582, 583], "see": [0, 339, 410, 438, 533, 549, 575, 577, 578, 581, 585], "next": [0, 34, 35, 44, 56, 57, 59, 67, 73, 77, 311, 316, 327, 354, 364, 374, 385, 402, 418, 455, 466, 476, 493, 497, 552, 581], "section": [0, 45, 584, 585], "us": [0, 34, 35, 44, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 93, 97, 98, 101, 102, 114, 116, 117, 118, 119, 120, 130, 138, 148, 151, 156, 158, 161, 162, 165, 166, 167, 170, 171, 173, 175, 179, 180, 183, 184, 196, 198, 199, 200, 201, 202, 212, 220, 230, 233, 238, 240, 243, 244, 247, 248, 249, 252, 253, 255, 256, 262, 263, 273, 277, 278, 280, 287, 296, 297, 303, 304, 306, 307, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 342, 343, 344, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 432, 433, 434, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 491, 493, 494, 496, 497, 498, 499, 500, 501, 505, 506, 509, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 529, 530, 531, 533, 537, 538, 539, 540, 544, 546, 547, 548, 549, 551, 552, 553, 560, 566, 574, 575, 577, 578, 580, 581, 582, 583, 584], "m": [0, 328, 339, 406, 407, 408, 409, 437, 459, 546, 547, 548, 577, 581, 583], "add_wrap": 0, "wrap_pyfunct": 0, "your_new_funct": 0, "modifi": [0, 102, 160, 171, 184, 242, 253, 328, 406, 581], "contain": [0, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 108, 171, 190, 253, 270, 311, 312, 316, 332, 334, 339, 347, 354, 373, 374, 389, 410, 428, 439, 465, 466, 482, 483, 499, 514, 516, 523, 524, 539, 543, 549, 580, 581, 583, 584, 585], "pyfunct": 0, "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "either": [0, 98, 162, 166, 180, 244, 248, 304, 315, 317, 319, 320, 321, 322, 324, 327, 329, 330, 336, 340, 341, 344, 347, 354, 356, 371, 392, 402, 404, 405, 411, 414, 416, 417, 431, 438, 442, 447, 463, 477, 478, 486, 497, 498, 505, 506, 510, 513, 514, 523, 525, 534, 536, 537, 544, 551, 552, 575, 580, 581, 583], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "give": [0, 312, 342, 516, 581, 583], "power": [0, 381, 389, 414, 473, 482, 499, 514, 529, 585], "interact": [0, 575, 578, 580, 581], "both": [0, 22, 23, 131, 132, 213, 214, 386, 387, 420, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 440, 443, 444, 445, 446, 479, 480, 505, 506, 510, 512, 518, 523, 561, 580, 581, 583, 585], "interpret": [0, 581], "pure": [0, 578], "exist": [0, 89, 108, 142, 171, 190, 224, 253, 254, 255, 256, 270, 272, 273, 291, 328, 387, 402, 406, 415, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 480, 497, 498, 510, 522, 552, 580, 581, 585], "search": [0, 114, 115, 116, 196, 197, 198, 276, 312, 332, 333, 334, 339, 354, 355, 367, 374, 375, 376, 386, 387, 390, 402, 403, 458, 466, 467, 468, 479, 480, 484, 497, 505, 510, 517, 552, 559, 565, 572, 581], "its": [0, 123, 124, 132, 133, 135, 205, 206, 214, 215, 217, 281, 282, 289, 326, 331, 341, 371, 463, 477, 478, 518, 543, 556, 571, 577, 581, 582, 583, 585], "name": [0, 151, 233, 297, 578, 580, 581, 585], "edit": 0, "alreadi": [0, 138, 220, 254, 255, 256, 272, 273, 312, 313, 314, 477, 478, 561, 580, 581, 585], "If": [0, 34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 89, 102, 110, 111, 115, 117, 118, 119, 120, 131, 132, 138, 139, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 170, 171, 184, 192, 193, 197, 199, 200, 201, 202, 213, 214, 220, 221, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 249, 252, 253, 254, 255, 256, 263, 272, 273, 276, 277, 278, 288, 289, 297, 298, 300, 301, 302, 303, 304, 306, 307, 310, 311, 312, 313, 316, 317, 323, 328, 330, 331, 333, 339, 341, 342, 343, 346, 349, 350, 351, 352, 354, 355, 356, 357, 362, 366, 367, 371, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 396, 397, 400, 401, 402, 403, 405, 406, 407, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 457, 458, 459, 463, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 484, 486, 487, 490, 491, 493, 495, 496, 497, 498, 499, 500, 503, 505, 506, 510, 511, 514, 515, 516, 517, 518, 520, 521, 523, 525, 526, 529, 530, 531, 536, 537, 539, 545, 546, 547, 550, 551, 552, 563, 574, 575, 579, 580, 581, 582, 583, 585], "want": [0, 34, 35, 44, 56, 57, 59, 67, 73, 77, 311, 316, 581, 585], "find": [0, 98, 114, 115, 116, 129, 147, 180, 196, 197, 198, 211, 229, 265, 276, 318, 320, 322, 323, 324, 327, 329, 330, 342, 343, 345, 346, 348, 349, 350, 351, 352, 357, 359, 361, 362, 363, 364, 365, 377, 378, 382, 383, 384, 385, 388, 390, 391, 393, 401, 402, 404, 405, 415, 416, 417, 418, 448, 450, 452, 453, 454, 455, 456, 459, 469, 470, 474, 475, 476, 477, 478, 481, 484, 487, 497, 498, 512, 513, 517, 518, 519, 520, 521, 526, 527, 528, 535, 540, 545, 551, 552, 576, 578, 581, 583, 585], "d": [0, 101, 183, 262, 341, 371, 376, 401, 403, 429, 430, 440, 441, 463, 468, 483, 485, 496, 500, 551, 575, 577, 581, 583], "like": [0, 102, 131, 132, 184, 213, 214, 263, 318, 324, 357, 363, 366, 379, 380, 381, 389, 390, 411, 413, 414, 448, 454, 457, 471, 472, 473, 482, 484, 499, 514, 517, 529, 575, 579, 580, 581, 583, 585], "insert": [0, 133, 134, 135, 136, 138, 215, 216, 217, 218, 220, 376, 403, 468, 581], "creat": [0, 89, 90, 91, 92, 93, 94, 95, 96, 102, 119, 120, 133, 134, 135, 136, 138, 151, 157, 158, 162, 166, 171, 172, 173, 174, 175, 176, 177, 178, 184, 201, 202, 215, 216, 217, 218, 220, 233, 239, 240, 244, 248, 253, 254, 255, 256, 257, 258, 263, 277, 278, 297, 304, 305, 312, 328, 344, 372, 406, 407, 408, 409, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 464, 531, 546, 547, 548, 575, 577, 578, 580, 581, 583], "one": [0, 97, 98, 101, 102, 115, 117, 118, 133, 134, 135, 136, 138, 152, 154, 156, 158, 167, 179, 180, 183, 184, 197, 199, 200, 215, 216, 217, 218, 220, 234, 236, 238, 240, 249, 262, 263, 276, 280, 298, 300, 307, 313, 335, 341, 342, 343, 371, 385, 386, 387, 390, 402, 418, 435, 463, 476, 477, 478, 479, 480, 484, 497, 505, 506, 510, 517, 529, 539, 552, 575, 578, 580, 581, 583, 585], "your_modul": 0, "Then": [0, 101, 183, 262, 581], "start": [0, 101, 106, 183, 188, 262, 268, 312, 313, 323, 328, 333, 348, 354, 355, 362, 367, 374, 375, 376, 388, 395, 403, 406, 412, 435, 453, 458, 466, 467, 468, 481, 489, 499, 501, 513, 516, 529, 534, 578, 581, 582, 583, 585], "boilerpl": 0, "bellow": 0, "docstr": [0, 580], "descript": 0, "pyo3": [0, 165, 247, 306, 581], "text_signatur": 0, "graph": [0, 7, 20, 22, 23, 26, 30, 34, 35, 44, 45, 52, 56, 57, 59, 67, 73, 77, 81, 89, 90, 92, 93, 94, 95, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 115, 119, 120, 127, 128, 131, 132, 137, 138, 139, 141, 142, 143, 144, 145, 146, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 201, 202, 209, 210, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 228, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 253, 255, 256, 257, 258, 262, 263, 264, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 286, 288, 289, 291, 292, 293, 294, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 558, 561, 564, 572, 573, 574, 575, 576, 578, 579, 581, 584], "pub": [0, 529], "fn": 0, "py": [0, 408, 535, 547], "pygraph": [0, 20, 89, 112, 161, 166, 171, 194, 243, 248, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 333, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 354, 355, 371, 375, 380, 388, 397, 398, 403, 404, 405, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 503, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 521, 523, 524, 525, 527, 530, 531, 532, 533, 534, 536, 537, 538, 539, 543, 544, 546, 547, 548, 549, 550, 551, 574, 575, 578, 579, 580, 581, 585], "pyresult": 0, "goe": [0, 408, 547], "rememb": 0, "declar": 0, "sometim": [0, 397, 437, 491, 537], "hard": [0, 477, 493, 581], "organ": 0, "those": [0, 108, 112, 113, 133, 134, 135, 136, 190, 194, 195, 215, 216, 217, 218, 270, 274, 275, 314, 331, 335, 338, 366, 369, 380, 398, 413, 457, 461, 472, 492, 538, 580, 581, 582, 583, 585], "case": [0, 97, 98, 108, 115, 157, 158, 179, 180, 190, 197, 239, 240, 254, 259, 270, 276, 317, 333, 341, 356, 367, 371, 376, 381, 389, 390, 403, 414, 447, 458, 463, 468, 473, 477, 478, 482, 484, 499, 514, 517, 529, 580, 581, 583, 585], "suggest": 0, "move": [0, 397, 491, 537, 581], "split": 0, "follow": [0, 89, 171, 253, 312, 333, 339, 355, 367, 375, 435, 458, 459, 467, 541, 581, 583, 585], "structur": [0, 341, 386, 387, 479, 480, 505, 506, 510, 533, 578, 580, 581, 585], "have": [0, 52, 68, 81, 89, 102, 103, 138, 139, 155, 156, 157, 158, 162, 166, 171, 184, 185, 220, 221, 237, 238, 239, 240, 244, 248, 253, 264, 301, 304, 305, 312, 314, 315, 325, 328, 329, 353, 365, 377, 387, 404, 406, 407, 410, 456, 469, 480, 483, 504, 510, 516, 518, 529, 539, 546, 549, 556, 563, 571, 579, 580, 581, 583, 585], "deleg": 0, "logic": [0, 312], "call": [0, 22, 23, 89, 130, 141, 148, 158, 171, 212, 223, 230, 240, 253, 287, 296, 312, 313, 314, 333, 339, 355, 367, 375, 376, 397, 403, 409, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 459, 467, 468, 491, 500, 535, 537, 548, 563, 564, 578, 579, 580, 581, 583, 585], "from": [0, 22, 23, 26, 30, 34, 35, 89, 90, 96, 101, 102, 104, 108, 110, 111, 112, 113, 114, 116, 119, 120, 126, 131, 132, 133, 134, 135, 136, 138, 139, 151, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 170, 171, 172, 178, 183, 184, 186, 190, 192, 193, 194, 195, 196, 198, 201, 202, 208, 213, 214, 215, 216, 217, 218, 220, 221, 233, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 252, 253, 255, 262, 263, 266, 270, 272, 273, 274, 275, 277, 278, 288, 289, 297, 300, 301, 302, 303, 304, 305, 306, 310, 312, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 338, 339, 348, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 374, 375, 376, 377, 378, 379, 382, 388, 389, 390, 393, 396, 398, 400, 401, 402, 404, 405, 406, 409, 410, 411, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 466, 467, 468, 469, 470, 471, 477, 481, 482, 484, 487, 490, 492, 495, 496, 497, 498, 500, 513, 514, 515, 516, 517, 519, 523, 526, 533, 536, 541, 542, 543, 549, 550, 551, 552, 554, 567, 574, 575, 577, 578, 579, 581, 582, 583], "do": [0, 89, 166, 171, 248, 312, 387, 477, 478, 480, 510, 580, 581, 585], "question": 0, "contact": 0, "u": [0, 139, 221, 333, 341, 355, 367, 371, 375, 376, 403, 410, 458, 463, 467, 468, 484, 500, 516, 549, 561, 579, 581, 583], "channel": 0, "slack": 0, "re": [0, 89, 165, 171, 247, 306, 386, 387, 397, 479, 480, 491, 505, 506, 510, 537, 580, 581, 585], "work": [0, 22, 23, 330, 405, 478, 498, 523, 574, 578, 580, 581, 583, 584, 585], "write": [0, 151, 165, 170, 233, 247, 252, 297, 306, 310, 392, 486, 525, 574, 580, 581, 585], "made": [0, 89, 139, 171, 221, 253, 314, 315, 581, 583, 585], "ani": [0, 89, 91, 102, 108, 117, 118, 119, 120, 151, 157, 158, 165, 171, 173, 184, 190, 199, 200, 201, 202, 233, 239, 240, 247, 253, 254, 263, 270, 277, 278, 297, 306, 312, 313, 326, 337, 339, 348, 381, 389, 401, 408, 414, 421, 424, 473, 477, 478, 482, 496, 499, 508, 509, 512, 514, 516, 529, 541, 547, 551, 574, 578, 579, 580, 581, 583, 585], "petgraph": [0, 581], "ha": [0, 89, 114, 115, 116, 117, 118, 128, 156, 157, 158, 171, 196, 197, 198, 199, 200, 210, 238, 239, 240, 253, 276, 286, 312, 313, 326, 333, 335, 337, 339, 347, 348, 349, 350, 351, 352, 367, 373, 375, 376, 399, 407, 408, 410, 458, 465, 467, 468, 477, 478, 494, 500, 512, 515, 516, 531, 538, 544, 546, 547, 549, 554, 563, 578, 580, 581], "depend": [0, 157, 158, 239, 240, 410, 523, 549, 575, 579, 580, 581, 583], "probabl": [0, 408, 409, 410, 500, 547, 548, 549, 579, 581], "sens": 0, "standalon": [0, 578, 581], "provid": [0, 97, 98, 102, 114, 116, 123, 124, 125, 131, 132, 153, 162, 166, 168, 179, 180, 184, 196, 198, 205, 206, 207, 213, 214, 235, 244, 248, 250, 259, 280, 281, 282, 283, 288, 289, 299, 304, 308, 312, 323, 325, 329, 332, 334, 353, 360, 361, 362, 364, 365, 377, 378, 386, 387, 388, 389, 390, 404, 407, 415, 451, 452, 453, 455, 456, 459, 469, 470, 479, 480, 481, 482, 484, 505, 506, 507, 508, 509, 510, 514, 516, 517, 519, 523, 524, 531, 538, 542, 546, 578, 579, 580, 581, 585], "api": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585], "other": [0, 7, 20, 101, 133, 134, 135, 136, 156, 158, 161, 162, 183, 215, 216, 217, 218, 238, 240, 243, 244, 262, 303, 304, 319, 320, 321, 322, 331, 358, 359, 360, 361, 366, 392, 396, 408, 432, 444, 449, 450, 451, 452, 457, 486, 490, 494, 500, 516, 525, 536, 547, 579, 580, 582, 583, 585], "unlik": [0, 68, 93, 175, 256, 580], "design": [0, 579, 580, 581], "top": [0, 336, 368, 460, 581], "algorithm": [0, 20, 22, 23, 115, 197, 276, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 333, 335, 348, 354, 355, 358, 359, 360, 361, 362, 364, 365, 366, 367, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 389, 391, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 491, 493, 495, 497, 499, 500, 501, 505, 509, 510, 514, 515, 518, 520, 521, 522, 529, 535, 537, 538, 539, 540, 546, 547, 548, 549, 550, 552, 553, 560, 566, 577, 578, 580, 581, 585], "kei": [0, 97, 98, 101, 158, 165, 179, 180, 183, 240, 247, 259, 262, 306, 319, 320, 321, 322, 329, 330, 335, 338, 347, 358, 359, 360, 361, 365, 366, 369, 373, 376, 377, 378, 380, 381, 383, 388, 389, 390, 392, 397, 398, 403, 404, 405, 413, 414, 416, 419, 449, 450, 451, 452, 456, 457, 459, 461, 465, 468, 469, 470, 472, 473, 474, 477, 478, 481, 482, 483, 484, 485, 486, 491, 492, 499, 513, 514, 516, 517, 523, 525, 529, 530, 537, 574, 575, 578, 581], "differ": [0, 68, 110, 111, 119, 120, 166, 192, 193, 201, 202, 248, 272, 273, 277, 278, 305, 325, 351, 352, 353, 379, 399, 410, 411, 471, 477, 478, 516, 521, 549, 574, 578, 579, 581, 583, 585], "keep": [0, 333, 355, 367, 375, 397, 458, 467, 491, 521, 537, 580, 581, 585], "mind": [0, 580], "public": [0, 580, 581], "interfac": [0, 578, 580, 581, 585], "treat": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 119, 120, 151, 201, 202, 233, 277, 278, 297, 311, 316, 317, 330, 356, 378, 379, 383, 384, 385, 397, 401, 405, 406, 411, 418, 447, 470, 471, 491, 498, 516, 537, 551, 580, 581], "where": [0, 34, 35, 57, 77, 92, 93, 97, 98, 107, 110, 111, 156, 157, 158, 169, 174, 175, 179, 180, 189, 192, 193, 238, 239, 240, 251, 255, 256, 259, 269, 272, 273, 309, 312, 316, 317, 324, 329, 331, 338, 339, 341, 342, 343, 345, 356, 363, 365, 366, 369, 371, 377, 380, 383, 384, 385, 388, 397, 398, 401, 404, 408, 410, 413, 416, 417, 418, 420, 432, 443, 444, 447, 454, 456, 457, 459, 461, 463, 469, 472, 474, 475, 476, 477, 478, 481, 483, 485, 491, 492, 496, 500, 513, 516, 518, 520, 523, 535, 537, 538, 547, 549, 551, 576, 578, 580, 581, 582, 583, 585], "compat": [0, 89, 142, 224, 291, 367, 375, 376, 458, 467, 468, 579, 581], "doesn": [0, 108, 170, 190, 252, 270, 310, 430, 441, 504, 580, 581, 583, 585], "t": [0, 108, 139, 170, 190, 221, 252, 270, 310, 315, 323, 330, 331, 349, 350, 351, 352, 362, 366, 378, 380, 397, 401, 405, 406, 413, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 453, 457, 470, 472, 491, 496, 504, 520, 521, 529, 537, 538, 551, 562, 563, 580, 581, 582, 583, 585], "matter": 0, "onli": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 85, 89, 97, 98, 104, 115, 131, 132, 152, 154, 156, 157, 158, 167, 171, 179, 180, 186, 197, 213, 214, 234, 236, 238, 239, 240, 249, 253, 259, 266, 276, 280, 298, 300, 307, 311, 312, 313, 316, 319, 320, 321, 322, 325, 329, 330, 338, 339, 342, 343, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 365, 366, 369, 374, 377, 380, 381, 383, 389, 390, 398, 401, 404, 405, 413, 414, 416, 449, 450, 451, 452, 456, 457, 461, 466, 469, 472, 473, 474, 482, 484, 492, 496, 498, 499, 514, 516, 517, 518, 529, 543, 551, 575, 579, 580, 581, 583, 585], "addition": [0, 89, 171, 253, 580, 581, 585], "should": [0, 68, 92, 93, 156, 158, 162, 167, 174, 175, 238, 240, 244, 249, 255, 256, 304, 307, 327, 333, 355, 364, 367, 375, 376, 403, 424, 428, 430, 431, 440, 455, 458, 467, 468, 499, 505, 506, 510, 553, 560, 566, 579, 580, 581], "done": [0, 312, 314, 315, 580, 581, 583], "via": [0, 574, 580, 581, 585], "cargo": [0, 579, 581], "doc": [0, 529, 578], "It": [0, 26, 30, 34, 35, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 117, 118, 119, 120, 158, 160, 161, 171, 173, 199, 200, 201, 202, 240, 242, 243, 253, 254, 277, 278, 303, 311, 312, 316, 319, 320, 321, 322, 323, 326, 327, 329, 330, 335, 337, 338, 339, 342, 343, 347, 348, 349, 350, 351, 352, 358, 359, 360, 361, 362, 364, 365, 369, 373, 376, 377, 378, 379, 383, 384, 385, 390, 397, 399, 400, 401, 403, 404, 405, 411, 416, 417, 418, 449, 450, 451, 452, 453, 455, 456, 461, 465, 468, 469, 470, 471, 474, 475, 476, 484, 491, 493, 494, 495, 496, 505, 506, 510, 516, 517, 518, 529, 533, 537, 538, 544, 550, 551, 574, 578, 579, 580, 581, 583, 585], "expect": [0, 151, 162, 170, 233, 244, 252, 297, 304, 310, 317, 349, 350, 351, 352, 356, 381, 383, 384, 385, 389, 392, 408, 414, 416, 417, 418, 419, 447, 473, 474, 475, 476, 477, 478, 482, 486, 499, 514, 516, 518, 519, 520, 521, 525, 529, 530, 538, 539, 547, 574, 579, 580, 581], "also": [0, 89, 161, 171, 243, 253, 303, 305, 317, 333, 338, 349, 350, 351, 352, 355, 356, 367, 369, 375, 376, 379, 383, 384, 385, 386, 387, 398, 401, 403, 407, 408, 411, 416, 417, 418, 428, 439, 447, 458, 461, 467, 468, 471, 474, 475, 476, 479, 480, 492, 496, 500, 505, 506, 510, 520, 521, 535, 546, 547, 551, 577, 578, 579, 580, 581, 583, 585], "being": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "so": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 160, 161, 162, 171, 242, 243, 244, 253, 255, 273, 303, 304, 311, 316, 409, 431, 442, 459, 548, 579, 580, 581, 582, 583, 585], "coverag": 0, "onc": [0, 158, 240, 314, 518, 535, 579, 580, 581, 585], "ve": [0, 101, 183, 262, 582, 583], "verifi": 0, "doe": [0, 89, 160, 162, 171, 242, 244, 253, 263, 304, 516, 533, 578, 580, 581, 583], "break": [0, 581], "successfulli": 0, "befor": [0, 102, 171, 184, 253, 390, 484, 516, 517, 581, 583], "open": [0, 151, 165, 170, 233, 247, 252, 297, 306, 310, 580, 581], "ll": [0, 579, 581, 582, 583], "suit": 0, "easiest": 0, "wai": [0, 561, 580, 585], "nox": [0, 581], "instal": [0, 523, 574, 575, 578, 580, 581], "pip": [0, 574, 575, 579, 581, 585], "sever": [0, 477, 478, 580, 581, 585], "advantag": [0, 578, 579, 581], "biggest": [0, 580, 581], "isol": [0, 7, 581], "virtualenv": 0, "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "mean": [0, 89, 98, 171, 180, 253, 327, 364, 387, 406, 455, 480, 494, 510, 512, 545, 578, 580, 581, 585], "pollut": 0, "system": [0, 421, 424, 578, 579, 581], "howev": [0, 89, 171, 253, 574, 578, 579, 580, 581, 585], "default": [0, 89, 119, 120, 131, 132, 138, 151, 156, 158, 161, 166, 171, 201, 202, 213, 214, 220, 233, 238, 240, 243, 248, 253, 277, 278, 297, 303, 312, 317, 318, 319, 320, 321, 322, 324, 331, 341, 356, 357, 358, 359, 360, 361, 363, 366, 367, 371, 375, 376, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 397, 399, 400, 401, 402, 403, 411, 413, 414, 416, 417, 418, 424, 426, 428, 430, 431, 433, 434, 440, 447, 448, 454, 457, 458, 463, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 491, 493, 494, 495, 496, 497, 499, 505, 506, 510, 514, 516, 517, 518, 529, 531, 537, 539, 544, 550, 551, 552, 553, 560, 566, 574, 575, 580, 581, 585], "recompil": [0, 581], "everi": [0, 166, 248, 312, 381, 388, 389, 409, 414, 432, 444, 473, 481, 482, 483, 499, 513, 514, 516, 519, 529, 538, 548, 570, 574, 581, 582], "time": [0, 89, 91, 156, 157, 158, 162, 171, 173, 238, 239, 240, 244, 304, 355, 375, 388, 399, 407, 408, 410, 435, 459, 467, 481, 494, 500, 501, 513, 518, 546, 547, 549, 554, 555, 557, 562, 563, 567, 577, 579, 580, 581, 583, 585], "even": [0, 312, 313, 344, 372, 429, 430, 431, 440, 441, 442, 464, 516, 580, 581], "avoid": [0, 89, 171, 538, 583], "packag": [0, 578, 579, 581], "rerun": 0, "without": [0, 93, 107, 165, 175, 189, 247, 256, 269, 306, 326, 333, 349, 350, 351, 352, 367, 376, 403, 458, 468, 509, 512, 529, 581, 583, 585], "flag": [0, 518, 580, 585], "recent": 0, "ran": [0, 585], "repo": 0, "otherwis": [0, 128, 210, 286, 315, 386, 387, 391, 402, 479, 480, 497, 505, 506, 510, 522, 552, 581], "out": [0, 135, 136, 139, 217, 218, 221, 353, 407, 512, 546, 556, 563, 570, 571, 581], "date": 0, "miss": [0, 493, 580, 581], "outsid": [0, 579, 581, 583], "root": [0, 339, 348, 563, 579], "shim": 0, "conflict": 0, "compil": [0, 578, 579, 581], "extens": [0, 406, 533, 580, 581], "test_with_vers": 0, "target": [0, 26, 30, 40, 48, 73, 77, 102, 107, 108, 110, 111, 114, 131, 139, 162, 167, 169, 184, 189, 190, 192, 193, 196, 213, 221, 244, 249, 251, 269, 270, 272, 273, 288, 304, 307, 309, 318, 319, 320, 321, 322, 323, 330, 333, 349, 350, 351, 352, 354, 357, 358, 359, 360, 361, 362, 367, 374, 378, 383, 385, 393, 405, 416, 418, 448, 449, 450, 451, 452, 453, 458, 466, 470, 474, 476, 487, 498, 526, 554, 557, 569, 581, 583, 585], "For": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 141, 151, 156, 160, 165, 166, 170, 171, 183, 194, 195, 223, 233, 238, 242, 247, 248, 252, 253, 262, 274, 275, 297, 306, 310, 311, 312, 316, 318, 319, 320, 321, 322, 327, 338, 339, 349, 350, 351, 352, 357, 358, 359, 360, 361, 364, 369, 373, 381, 383, 384, 385, 386, 387, 389, 390, 398, 399, 406, 407, 408, 409, 414, 416, 417, 418, 448, 449, 450, 451, 452, 455, 461, 473, 474, 475, 476, 479, 480, 482, 484, 492, 493, 494, 499, 505, 506, 512, 514, 517, 518, 519, 529, 533, 538, 539, 544, 546, 547, 548, 561, 575, 579, 580, 581, 582, 583, 585], "exampl": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 141, 151, 156, 160, 165, 170, 171, 183, 194, 195, 223, 233, 238, 242, 247, 252, 253, 262, 274, 275, 297, 306, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 333, 338, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 367, 369, 375, 383, 384, 385, 386, 387, 390, 398, 399, 402, 416, 417, 418, 447, 448, 449, 450, 451, 452, 458, 461, 467, 474, 475, 476, 479, 480, 484, 492, 493, 494, 497, 505, 506, 510, 517, 518, 519, 520, 521, 538, 544, 552, 575, 579, 580, 581, 583, 585], "launch": [0, 318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 390, 399, 416, 417, 418, 448, 474, 475, 476, 484, 493, 494, 517, 544], "3": [0, 30, 52, 68, 81, 89, 104, 112, 113, 141, 151, 160, 162, 170, 171, 186, 194, 195, 223, 233, 242, 244, 252, 253, 266, 274, 275, 297, 304, 310, 312, 333, 349, 350, 351, 352, 355, 367, 369, 375, 398, 399, 402, 428, 429, 430, 431, 435, 438, 439, 440, 441, 458, 461, 467, 477, 478, 483, 485, 492, 494, 497, 518, 535, 552, 577, 580, 581, 582, 583, 585], "11": [0, 438, 578, 579], "command": [0, 574], "e": [0, 101, 140, 141, 183, 222, 223, 262, 263, 380, 388, 399, 408, 413, 435, 438, 472, 481, 493, 500, 513, 515, 529, 539, 543, 547, 554, 557, 558, 559, 561, 564, 565, 581, 583, 585], "just": [0, 89, 339, 349, 350, 351, 352, 386, 387, 479, 480, 505, 506, 510, 575, 578, 579, 580, 581, 585], "pass": [0, 112, 113, 138, 156, 158, 161, 166, 170, 194, 195, 220, 238, 240, 243, 248, 252, 274, 275, 303, 310, 317, 331, 338, 349, 350, 351, 352, 356, 366, 369, 380, 381, 383, 384, 385, 386, 387, 389, 392, 400, 402, 407, 412, 413, 414, 416, 417, 418, 419, 447, 457, 461, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 495, 497, 499, 501, 503, 505, 506, 510, 511, 514, 516, 518, 519, 520, 521, 525, 529, 530, 538, 539, 546, 550, 552, 574, 575, 580, 581, 582, 583], "select": [0, 382, 493, 529, 585], "regex": 0, "runner": [0, 581], "dag": [0, 7, 20, 89, 92, 93, 96, 141, 165, 171, 174, 175, 178, 223, 247, 306, 312, 317, 332, 334, 349, 350, 351, 352, 356, 515, 516, 541, 542, 543, 581], "id": [0, 89, 151, 171, 233, 253, 297, 348, 382, 386, 387, 397, 402, 479, 480, 491, 497, 505, 506, 510, 515, 537, 540, 552, 581], "argument": [0, 112, 113, 117, 118, 138, 158, 171, 194, 195, 199, 200, 220, 240, 253, 274, 275, 312, 319, 320, 321, 322, 323, 330, 341, 342, 343, 349, 350, 351, 352, 356, 358, 359, 360, 361, 362, 367, 371, 375, 376, 378, 387, 397, 402, 403, 405, 410, 447, 449, 450, 451, 452, 453, 458, 463, 467, 468, 470, 480, 491, 497, 510, 516, 518, 531, 537, 549, 552, 581, 585], "after": [0, 89, 101, 162, 171, 183, 244, 253, 262, 304, 556, 563, 570, 571, 580, 581, 583, 585], "bare": 0, "option": [0, 89, 101, 102, 119, 120, 138, 151, 162, 165, 166, 170, 171, 183, 184, 201, 202, 220, 233, 244, 247, 248, 252, 253, 262, 263, 277, 278, 297, 304, 306, 310, 317, 323, 328, 329, 330, 333, 336, 339, 340, 341, 348, 354, 355, 356, 362, 365, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 381, 382, 386, 387, 388, 389, 392, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 416, 417, 419, 447, 453, 456, 458, 460, 462, 463, 466, 467, 468, 469, 470, 471, 473, 477, 478, 479, 480, 481, 482, 486, 488, 489, 490, 491, 497, 499, 500, 505, 510, 513, 514, 518, 520, 521, 525, 529, 530, 531, 532, 534, 536, 537, 539, 546, 547, 548, 549, 552, 574, 575, 580, 581], "refer": [0, 45, 103, 133, 134, 135, 136, 161, 162, 166, 185, 215, 216, 217, 218, 243, 244, 248, 264, 303, 304, 305, 338, 369, 381, 389, 400, 414, 461, 473, 482, 495, 499, 514, 529, 535, 550, 574, 579, 580, 581, 585], "stestr": 0, "readthedoc": 0, "io": [0, 578, 581], "en": [0, 529, 581], "html": [0, 535], "class": [0, 20, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 171, 253, 311, 312, 316, 324, 332, 333, 334, 355, 367, 375, 447, 458, 467, 553, 560, 566, 578, 579, 581, 585], "individu": 0, "method": [0, 26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 89, 91, 102, 110, 111, 114, 116, 119, 120, 131, 132, 138, 142, 160, 165, 171, 173, 184, 192, 193, 196, 198, 201, 202, 213, 214, 220, 224, 242, 247, 253, 263, 272, 273, 277, 278, 288, 289, 291, 306, 312, 313, 325, 333, 341, 353, 355, 367, 375, 376, 381, 389, 403, 414, 458, 467, 468, 473, 482, 499, 514, 518, 523, 529, 553, 560, 564, 566, 574, 579, 580, 581, 582, 583, 585], "faster": [0, 331, 366, 457, 538, 580, 581], "n": [0, 115, 151, 197, 233, 276, 297, 328, 341, 371, 397, 401, 406, 407, 408, 409, 410, 421, 422, 424, 425, 427, 435, 436, 437, 438, 459, 463, 491, 496, 500, 518, 520, 537, 546, 547, 548, 549, 551, 581, 585], "discov": [0, 333, 354, 355, 367, 374, 375, 376, 403, 458, 466, 467, 468, 562, 570], "test_max_weight_match": 0, "same": [0, 68, 89, 91, 102, 115, 156, 157, 158, 160, 162, 171, 173, 184, 197, 238, 239, 240, 242, 244, 276, 304, 312, 385, 390, 400, 418, 476, 484, 495, 505, 506, 510, 517, 521, 529, 550, 561, 575, 578, 581, 583], "path": [0, 7, 20, 26, 30, 73, 77, 151, 160, 165, 170, 233, 242, 247, 252, 297, 306, 310, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 339, 341, 343, 349, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 371, 377, 378, 379, 380, 383, 384, 385, 388, 390, 392, 393, 401, 404, 405, 413, 416, 417, 418, 419, 420, 433, 443, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 469, 470, 471, 472, 474, 475, 476, 481, 484, 486, 487, 496, 498, 513, 517, 518, 519, 525, 526, 533, 535, 538, 543, 551, 574, 578, 579, 581, 582, 583, 585], "test_nod": 0, "testnod": 0, "test_no_nod": 0, "rel": [0, 395, 397, 489, 491, 534, 537], "each": [0, 89, 108, 117, 118, 138, 158, 160, 170, 171, 190, 199, 200, 220, 240, 242, 252, 253, 270, 305, 310, 312, 313, 319, 320, 321, 322, 323, 324, 328, 330, 331, 333, 335, 337, 339, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 355, 358, 359, 360, 361, 362, 363, 366, 367, 371, 373, 375, 376, 378, 379, 380, 383, 384, 385, 386, 387, 392, 395, 396, 397, 401, 402, 403, 405, 406, 408, 409, 410, 411, 413, 418, 419, 422, 425, 431, 437, 442, 449, 450, 451, 452, 453, 454, 457, 458, 463, 465, 467, 468, 470, 471, 472, 477, 478, 479, 480, 486, 489, 490, 491, 497, 499, 505, 506, 507, 508, 510, 515, 518, 519, 520, 521, 525, 529, 530, 531, 534, 536, 537, 538, 541, 547, 548, 549, 551, 552, 559, 565, 570, 574, 576, 579, 580, 581, 582, 583, 585], "fail": [0, 383, 384, 385, 416, 417, 418, 474, 475, 476, 581], "except": [0, 20, 46, 47, 58, 60, 61, 62, 63, 64, 65, 66, 72, 89, 171, 253, 333, 349, 350, 351, 352, 355, 367, 375, 376, 392, 402, 403, 458, 467, 468, 486, 497, 518, 525, 552, 572, 573, 578, 580, 581], "rais": [0, 89, 91, 102, 121, 122, 123, 124, 125, 139, 152, 154, 165, 167, 168, 170, 171, 173, 184, 203, 204, 205, 206, 207, 221, 234, 236, 247, 249, 250, 252, 253, 279, 280, 281, 282, 283, 298, 300, 306, 307, 308, 310, 312, 313, 319, 320, 323, 329, 330, 333, 346, 347, 349, 350, 351, 352, 355, 357, 358, 359, 360, 361, 362, 364, 365, 367, 375, 376, 377, 378, 388, 392, 397, 403, 412, 415, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 467, 468, 469, 470, 481, 486, 491, 501, 503, 511, 515, 518, 519, 524, 525, 533, 537, 538, 541, 542, 543, 544, 580, 581, 583], "save": [0, 574], "output": [0, 119, 120, 157, 158, 161, 165, 166, 170, 201, 202, 239, 240, 243, 247, 248, 252, 277, 278, 303, 305, 306, 310, 312, 317, 318, 324, 329, 354, 356, 357, 363, 365, 374, 377, 379, 388, 392, 393, 404, 411, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 456, 466, 469, 481, 486, 487, 513, 515, 516, 518, 523, 525, 526, 530, 574, 581, 582, 583], "imag": [0, 165, 247, 262, 306, 429, 430, 440, 441, 574, 580, 581, 582, 583, 585], "current": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "ensur": [0, 89, 167, 171, 249, 288, 307, 579, 581], "usabl": [0, 581], "clutter": 0, "clean": 0, "up": [0, 312, 359, 361, 450, 452, 583, 585], "view": [0, 402, 497, 505, 510, 552, 580, 583], "inspect": [0, 583], "common": [0, 483, 507, 529, 581, 583], "set": [0, 89, 91, 102, 122, 125, 131, 132, 151, 156, 161, 166, 170, 171, 173, 184, 204, 207, 213, 214, 233, 238, 243, 248, 252, 253, 254, 263, 280, 283, 297, 303, 310, 312, 313, 318, 319, 320, 321, 322, 324, 325, 326, 330, 331, 336, 337, 339, 344, 345, 348, 349, 350, 353, 357, 358, 359, 360, 361, 363, 366, 368, 372, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 394, 397, 399, 400, 401, 402, 405, 409, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 454, 457, 460, 464, 470, 472, 473, 474, 475, 476, 479, 480, 482, 484, 488, 491, 493, 494, 495, 496, 497, 498, 505, 506, 507, 508, 510, 514, 515, 516, 517, 518, 523, 524, 532, 537, 538, 544, 548, 550, 551, 552, 575, 576, 580, 581, 582, 583, 585], "rustworkx_test_preserve_imag": 0, "environ": [0, 318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 390, 399, 401, 416, 417, 418, 448, 474, 475, 476, 484, 493, 494, 496, 499, 517, 544, 551, 579, 581, 585], "variabl": [0, 318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 390, 399, 401, 416, 417, 418, 448, 474, 475, 476, 484, 493, 494, 496, 517, 544, 551, 581], "valu": [0, 97, 98, 101, 102, 112, 113, 119, 120, 138, 162, 165, 179, 180, 183, 184, 194, 195, 201, 202, 220, 244, 247, 259, 262, 274, 275, 277, 278, 304, 306, 312, 317, 319, 320, 321, 322, 323, 329, 330, 331, 335, 336, 338, 340, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 388, 389, 390, 392, 394, 395, 396, 397, 398, 401, 403, 404, 405, 411, 413, 414, 416, 417, 418, 419, 421, 424, 426, 428, 433, 434, 439, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 496, 499, 513, 514, 517, 518, 519, 520, 521, 525, 529, 530, 531, 532, 534, 536, 537, 538, 539, 551, 574, 575, 581, 582, 585], "skip": [0, 102, 162, 184, 244, 304, 342, 343, 581], "cleanup": 0, "enabl": [0, 89, 102, 165, 171, 184, 247, 306, 383, 384, 385, 416, 417, 418, 474, 475, 476, 578, 580, 581], "look": [0, 115, 197, 276, 580, 581, 583, 585], "correct": [0, 581], "1": [0, 26, 30, 36, 45, 52, 68, 73, 81, 85, 89, 101, 104, 112, 151, 160, 170, 171, 183, 186, 194, 233, 242, 252, 253, 262, 266, 274, 297, 310, 312, 317, 319, 320, 321, 322, 323, 327, 329, 330, 331, 333, 336, 338, 340, 341, 348, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 379, 381, 383, 384, 385, 389, 395, 396, 397, 398, 401, 403, 404, 405, 407, 408, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 482, 483, 485, 489, 490, 491, 492, 496, 499, 500, 509, 514, 515, 518, 520, 521, 522, 531, 534, 535, 536, 537, 538, 539, 543, 545, 546, 547, 550, 551, 575, 578, 580, 582, 583, 585], "preserv": [0, 102, 184, 263, 367, 375, 376, 458, 467, 468, 581], "finish": [0, 312, 327, 333, 355, 364, 367, 375, 376, 403, 455, 458, 467, 468, 563], "As": [0, 157, 158, 239, 240, 287, 296, 583], "crate": [0, 578, 581], "own": 0, "combin": [0, 101, 102, 166, 183, 184, 248, 262, 263, 581], "embed": 0, "book": 0, "how": [0, 317, 331, 335, 356, 366, 379, 380, 383, 384, 385, 401, 411, 413, 416, 417, 418, 447, 457, 471, 472, 474, 475, 476, 496, 520, 521, 551, 574, 580, 581, 583], "lang": [0, 529], "org": [0, 339, 381, 414, 429, 430, 435, 438, 440, 441, 473, 493, 533, 535, 538, 581], "ch11": 0, "01": [0, 339, 581], "primari": 0, "languag": [0, 533, 578, 581], "written": [0, 348, 574, 578, 579, 580, 581, 583], "rustfmt": 0, "enforc": [0, 583], "consist": [0, 68, 138, 162, 220, 244, 304, 533, 577, 581, 583], "job": [0, 581, 583], "configur": 0, "check": [0, 89, 102, 126, 127, 137, 158, 165, 171, 184, 208, 209, 219, 240, 247, 306, 312, 349, 350, 351, 352, 381, 386, 387, 389, 402, 414, 459, 473, 479, 480, 482, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 518, 522, 529, 552, 581, 583], "luckili": 0, "adapt": [0, 348, 397, 491, 537, 580], "simpl": [0, 317, 318, 324, 339, 356, 357, 363, 383, 384, 385, 386, 387, 390, 402, 416, 417, 418, 422, 447, 448, 454, 459, 474, 475, 476, 479, 480, 484, 497, 505, 506, 510, 517, 520, 521, 535, 539, 552, 579, 581, 583], "fmt": 0, "automat": [0, 581], "restyl": 0, "match": [0, 7, 20, 112, 113, 114, 115, 116, 117, 118, 194, 195, 196, 197, 198, 199, 200, 274, 275, 276, 342, 343, 386, 387, 402, 479, 480, 497, 505, 506, 507, 508, 510, 518, 529, 552, 581], "what": [0, 580, 581], "step": [0, 312], "clippi": 0, "some": [0, 112, 113, 194, 195, 274, 275, 312, 317, 331, 356, 366, 383, 384, 385, 409, 416, 417, 418, 447, 457, 474, 475, 476, 520, 521, 548, 561, 578, 581, 582], "small": [0, 581], "piec": 0, "namespac": 0, "actual": [0, 327, 364, 455, 580, 583], "black": [0, 165, 247, 306, 333, 355, 367, 375, 429, 430, 440, 441, 458, 467, 554, 575, 581, 585], "flake8": 0, "repositori": 0, "mode": [0, 165, 247, 306, 429, 430, 440, 441, 574, 581, 582, 583, 585], "conform": 0, "rule": 0, "return": [0, 20, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 158, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 240, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585], "format": [0, 151, 233, 297, 332, 334, 392, 419, 486, 525, 529, 530, 533, 574, 580, 581, 585], "error": [0, 131, 132, 139, 165, 213, 214, 221, 247, 288, 289, 306, 312, 349, 350, 351, 352, 381, 389, 397, 414, 473, 482, 491, 499, 514, 529, 533, 537, 579, 581, 583], "updat": [0, 89, 161, 167, 168, 171, 243, 249, 250, 253, 254, 255, 256, 272, 273, 303, 307, 308, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 581, 585], "handl": [0, 356, 412, 447, 501, 580, 581, 585], "venv": 0, "render": [0, 585], "web": [0, 435, 529], "browser": 0, "built": [0, 579, 581], "locat": [0, 581], "rustworkx_cor": [0, 578, 581], "off": [0, 579, 581, 585], "dir": [0, 485], "signatur": 0, "requir": [0, 68, 112, 113, 194, 195, 274, 275, 312, 351, 352, 367, 375, 376, 390, 431, 442, 458, 467, 468, 484, 517, 574, 579, 580, 581], "stub": 0, "tool": [0, 577, 580, 581, 585], "pyi": 0, "thei": [0, 101, 158, 165, 183, 240, 247, 262, 306, 386, 387, 400, 479, 480, 495, 505, 506, 510, 516, 541, 550, 575, 579, 580, 581, 585], "strip": 0, "more": [0, 89, 115, 151, 171, 197, 233, 253, 276, 297, 312, 314, 315, 335, 339, 341, 347, 371, 373, 390, 396, 438, 463, 465, 484, 490, 517, 518, 533, 535, 536, 574, 575, 577, 578, 579, 580, 581, 585], "mypi": [0, 581], "latest": [0, 581], "veri": [0, 580, 585], "help": 0, "end": [0, 106, 188, 268, 323, 329, 333, 354, 355, 362, 365, 367, 374, 375, 376, 377, 403, 404, 453, 456, 458, 466, 467, 468, 469, 581, 583], "user": [0, 89, 485, 523, 578, 581, 585], "let": [0, 354, 374, 466, 581, 582, 583], "bug": 0, "One": [0, 561, 585], "thing": [0, 580, 585], "necessari": [0, 581, 583], "line": [0, 151, 233, 297, 478, 483, 575, 581], "__init__": [0, 333, 355, 367, 375, 458, 467, 580, 581, 585], "form": [0, 26, 30, 34, 35, 36, 52, 57, 68, 73, 77, 81, 85, 92, 93, 104, 107, 110, 111, 130, 148, 169, 174, 175, 186, 189, 192, 193, 212, 230, 251, 255, 256, 266, 269, 272, 273, 287, 296, 309, 316, 338, 341, 348, 354, 369, 371, 374, 382, 398, 400, 431, 442, 461, 463, 466, 492, 495, 550, 559, 565, 581], "foo": 0, "abl": [0, 579, 581], "access": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 131, 132, 171, 213, 214, 253, 311, 316, 332, 334, 580, 581], "pattern": [0, 577, 581], "face": 0, "must": [0, 119, 120, 165, 201, 202, 247, 277, 278, 306, 327, 342, 349, 350, 351, 352, 364, 377, 389, 404, 429, 430, 440, 441, 455, 469, 482, 514, 529, 539, 574, 575, 580, 581, 583], "explain": 0, "wa": [0, 89, 376, 379, 383, 384, 385, 401, 403, 411, 416, 417, 418, 468, 474, 475, 476, 531, 551, 574, 578, 579, 580, 581, 583], "why": 0, "idea": 0, "behind": 0, "naiv": 0, "limit": [0, 165, 247, 306, 318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 386, 387, 390, 399, 402, 416, 417, 418, 448, 474, 475, 476, 479, 480, 484, 493, 494, 497, 505, 510, 517, 544, 552, 579, 580, 581], "intern": [0, 22, 23, 102, 184, 263, 438, 578, 581, 583], "knowledg": 0, "upgrad": [0, 579], "previou": [0, 313, 339, 395, 489, 534, 541, 581, 585], "program": [0, 578, 579, 581], "would": [0, 89, 102, 131, 132, 156, 171, 184, 213, 214, 238, 253, 318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 386, 387, 390, 399, 402, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 474, 475, 476, 479, 480, 484, 493, 494, 497, 505, 506, 508, 510, 516, 517, 544, 552, 579, 580, 581, 583, 585], "go": [0, 139, 221, 580], "ideal": 0, "too": [0, 119, 120, 201, 202, 277, 278, 579, 581, 582], "context": [0, 581], "sure": [0, 575, 581], "don": [0, 139, 221, 583, 585], "forget": 0, "over": [0, 68, 133, 134, 135, 136, 138, 160, 162, 215, 216, 217, 218, 220, 242, 244, 304, 312, 341, 371, 400, 402, 463, 493, 495, 497, 550, 552, 581, 583], "cycl": [0, 7, 20, 89, 91, 102, 171, 173, 184, 312, 319, 320, 329, 330, 339, 348, 349, 350, 351, 352, 358, 359, 365, 382, 415, 423, 426, 449, 450, 456, 504, 522, 535, 541, 542, 581, 583], "accomplish": [0, 580], "reno": 0, "git": 0, "base": [0, 22, 23, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 102, 171, 184, 253, 263, 311, 312, 316, 331, 332, 334, 356, 366, 380, 381, 386, 387, 389, 402, 408, 413, 414, 447, 457, 459, 472, 473, 479, 480, 482, 485, 493, 497, 505, 506, 509, 510, 514, 518, 523, 535, 547, 552, 553, 560, 566, 580, 581, 582, 583], "workflow": 0, "quit": [0, 585], "straightforward": [0, 580], "checkout": 0, "short": 0, "string": [0, 151, 165, 170, 233, 247, 252, 297, 306, 310, 356, 392, 419, 447, 486, 516, 525, 530, 574, 575, 581, 585], "brief": 0, "space": [0, 500, 531, 581], "describ": [0, 92, 93, 174, 175, 255, 256, 328, 382, 391, 406, 420, 443, 477, 478, 533, 580, 581], "becom": [0, 559, 565, 581], "prefix": [0, 580], "yaml": 0, "releasenot": 0, "text": [0, 399, 494, 500, 575], "editor": 0, "basic": [0, 580, 581], "restructur": 0, "list": [0, 34, 35, 44, 56, 57, 59, 67, 77, 89, 92, 93, 95, 102, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 121, 130, 131, 132, 134, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 159, 161, 163, 164, 169, 170, 171, 174, 175, 177, 184, 187, 188, 189, 190, 191, 192, 193, 195, 199, 200, 203, 212, 213, 214, 216, 218, 222, 223, 224, 225, 226, 230, 231, 232, 233, 241, 243, 245, 246, 251, 252, 253, 255, 256, 258, 263, 267, 268, 269, 270, 271, 272, 273, 275, 279, 287, 289, 290, 291, 292, 293, 296, 297, 302, 303, 309, 310, 311, 313, 314, 316, 318, 320, 322, 323, 324, 327, 330, 332, 333, 334, 339, 342, 343, 345, 346, 348, 354, 355, 357, 359, 361, 362, 363, 364, 367, 374, 375, 376, 378, 382, 395, 397, 403, 405, 410, 415, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 437, 439, 443, 444, 445, 446, 448, 450, 452, 453, 454, 455, 458, 466, 467, 468, 470, 489, 491, 493, 500, 512, 515, 516, 518, 531, 533, 534, 537, 538, 539, 540, 541, 542, 549, 574, 575, 576, 580, 581, 582, 585], "under": [0, 578, 581], "categori": 0, "item": [0, 582, 585], "group": [0, 341, 342, 371, 463], "A": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 92, 93, 95, 97, 98, 101, 102, 105, 106, 108, 109, 112, 114, 116, 117, 118, 119, 120, 121, 130, 131, 132, 140, 141, 142, 143, 144, 148, 149, 150, 156, 158, 161, 162, 163, 164, 165, 166, 171, 174, 175, 177, 179, 180, 183, 184, 187, 188, 190, 191, 194, 196, 198, 199, 200, 201, 202, 203, 212, 213, 214, 222, 223, 224, 225, 226, 230, 231, 232, 238, 240, 243, 244, 245, 246, 247, 248, 253, 255, 256, 258, 259, 262, 263, 267, 268, 270, 271, 274, 277, 278, 279, 287, 288, 289, 290, 291, 292, 293, 296, 303, 304, 305, 306, 311, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 491, 492, 493, 494, 495, 497, 500, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 533, 535, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 552, 553, 560, 566, 574, 575, 576, 577, 578, 579, 581, 583, 585], "mani": [0, 171, 253, 312, 331, 335, 366, 379, 380, 401, 411, 413, 457, 471, 472, 496, 551, 579, 580, 581], "entri": [0, 255, 273, 329, 365, 377, 384, 385, 404, 417, 418, 456, 469, 475, 476, 529, 581], "potenti": [0, 171, 253, 583], "newli": [0, 90, 92, 93, 94, 95, 96, 102, 133, 134, 135, 136, 162, 172, 174, 175, 176, 177, 178, 184, 215, 216, 217, 218, 244, 254, 255, 256, 257, 258, 263, 304, 580], "full": [0, 157, 158, 239, 240, 437, 581], "templat": 0, "delet": [0, 89, 171, 253, 581], "aren": [0, 583], "content": [0, 68, 151, 165, 170, 233, 247, 252, 297, 306, 310, 389, 482, 514, 578, 581], "result": [0, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 171, 253, 305, 311, 312, 316, 326, 335, 337, 339, 347, 348, 373, 396, 399, 407, 465, 490, 494, 529, 536, 543, 544, 546, 577, 581, 585], "someth": [0, 390, 484, 517, 575, 580, 581, 583], "featur": [0, 89, 171, 580], "func": [0, 575], "support": [0, 356, 430, 441, 447, 493, 533, 574, 578, 580, 581, 583, 585], "pydigraph": [0, 20, 89, 101, 102, 108, 113, 119, 120, 151, 160, 161, 162, 165, 170, 305, 312, 317, 318, 319, 320, 321, 322, 324, 325, 327, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 344, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 463, 498, 499, 501, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 522, 523, 525, 526, 528, 529, 530, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 550, 551, 574, 575, 576, 578, 580, 581, 583, 585], "object": [0, 22, 23, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 108, 109, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 139, 144, 151, 156, 157, 158, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 190, 191, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 221, 226, 233, 238, 239, 240, 243, 244, 247, 248, 250, 252, 253, 254, 255, 257, 258, 259, 262, 263, 270, 271, 277, 278, 279, 280, 281, 283, 293, 297, 303, 304, 305, 306, 308, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 333, 338, 341, 342, 343, 349, 350, 351, 352, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 389, 392, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 491, 492, 495, 497, 499, 500, 505, 506, 510, 512, 514, 518, 519, 520, 521, 522, 523, 525, 529, 530, 531, 537, 538, 539, 546, 547, 548, 549, 550, 552, 553, 560, 566, 574, 575, 580, 581, 583, 585], "meth": 0, "equival": [0, 52, 68, 81, 140, 141, 162, 222, 223, 244, 262, 304, 390, 420, 443, 484, 517, 543, 578, 581, 583], "conveni": [0, 523, 581], "nativ": [0, 580, 581, 583], "g": [0, 263, 333, 354, 355, 367, 374, 375, 376, 399, 403, 410, 438, 458, 466, 467, 468, 483, 543, 549, 575, 581, 583, 585], "deprec": 0, "bar": 0, "been": [0, 101, 166, 183, 248, 262, 305, 313, 315, 516, 554, 556, 563, 571, 578, 581], "remov": [0, 89, 102, 133, 134, 135, 136, 139, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 171, 184, 215, 216, 217, 218, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 253, 263, 298, 299, 300, 301, 302, 305, 306, 326, 335, 337, 554, 580, 581, 582], "futur": [0, 313, 581], "supersed": 0, "similar": [0, 356, 447, 580, 581, 585], "accur": 0, "better": [0, 91, 173, 386, 387, 479, 480, 505, 506, 581, 585], "perform": [0, 89, 91, 171, 173, 253, 312, 328, 386, 387, 390, 397, 406, 435, 479, 480, 484, 491, 493, 505, 506, 516, 517, 537, 553, 560, 566, 578, 579, 580, 581, 583], "instead": [0, 89, 151, 156, 158, 166, 167, 171, 233, 238, 240, 248, 249, 253, 297, 307, 339, 390, 392, 402, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 484, 486, 497, 517, 525, 552, 580, 581, 585], "sphinx": 0, "tabl": 0, "enumer": [0, 581], "bullet": 0, "etc": [0, 317, 356, 383, 384, 385, 416, 417, 418, 447, 474, 475, 476, 520, 521, 539, 585], "express": [0, 341, 371, 463, 581], "much": [0, 580, 581], "commit": [0, 581], "pr": 0, "artifact": [0, 367, 375, 376, 458, 467, 468], "part": [0, 333, 335, 355, 367, 375, 376, 403, 458, 467, 468, 539, 572, 578, 579, 581, 585], "inlin": 0, "number": [0, 36, 89, 145, 146, 156, 157, 158, 171, 227, 228, 238, 239, 240, 253, 294, 295, 315, 318, 319, 320, 321, 322, 326, 328, 331, 335, 336, 337, 341, 346, 347, 357, 358, 359, 360, 361, 366, 368, 371, 373, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 393, 394, 397, 399, 400, 401, 402, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 457, 459, 460, 463, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 487, 488, 491, 493, 494, 495, 496, 497, 499, 500, 501, 505, 510, 514, 517, 518, 520, 526, 527, 528, 529, 531, 532, 537, 538, 544, 546, 547, 548, 549, 550, 551, 552, 581, 582], "12345": 0, "fix": [0, 138, 220, 397, 491, 537], "race": 0, "condit": [0, 112, 113, 114, 116, 117, 118, 156, 194, 195, 196, 198, 199, 200, 238, 274, 275, 342, 343, 531, 581, 583], "__": [0, 349, 350, 351, 352, 581], "rst": 0, "restructuredtext": 0, "report": [0, 562, 563, 567, 577], "dure": [0, 312, 382, 581], "0": [0, 26, 30, 34, 35, 36, 45, 52, 59, 68, 73, 77, 81, 85, 89, 104, 112, 119, 120, 151, 160, 165, 170, 171, 186, 194, 201, 202, 233, 242, 247, 252, 253, 266, 274, 277, 278, 297, 306, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 324, 330, 331, 333, 338, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 369, 375, 376, 379, 381, 383, 384, 385, 389, 396, 397, 398, 403, 405, 407, 408, 411, 414, 416, 417, 418, 422, 425, 438, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 461, 467, 468, 471, 473, 474, 475, 476, 477, 478, 482, 483, 485, 490, 491, 492, 499, 500, 512, 514, 518, 520, 521, 529, 531, 536, 537, 539, 545, 546, 547, 574, 575, 578, 579, 580, 582, 583, 585], "8": [0, 45, 399, 438, 477, 499, 535, 575, 577, 578, 580, 585], "tag": 0, "standard": [0, 578, 581], "state": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "_build": 0, "particular": [0, 477, 478, 581], "release_not": 0, "submit": 0, "approv": 0, "team": 0, "get": [0, 97, 98, 104, 107, 117, 118, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 147, 148, 149, 150, 163, 164, 167, 169, 179, 180, 186, 189, 199, 200, 205, 206, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 229, 230, 231, 232, 245, 246, 249, 251, 259, 265, 266, 269, 280, 281, 282, 287, 288, 289, 290, 291, 296, 307, 309, 325, 327, 332, 334, 347, 353, 354, 364, 373, 374, 379, 393, 411, 455, 465, 466, 471, 487, 515, 516, 526, 541, 542, 578, 581, 585], "trigger": [0, 493], "subsequ": [0, 581, 585], "mai": [0, 158, 166, 240, 248, 305, 312, 326, 335, 337, 339, 347, 348, 373, 399, 465, 477, 494, 529, 544, 579, 581, 583], "take": [0, 101, 112, 113, 114, 116, 117, 118, 138, 162, 165, 166, 183, 194, 195, 196, 198, 199, 200, 220, 244, 247, 248, 262, 274, 275, 304, 306, 327, 329, 339, 342, 343, 364, 365, 377, 386, 387, 402, 404, 415, 455, 456, 469, 477, 478, 479, 480, 497, 505, 506, 510, 518, 522, 552, 579, 580, 581, 582, 585], "week": 0, "month": 0, "dai": [0, 580, 581, 585], "avail": [0, 45, 401, 496, 551, 574, 577, 579, 580, 581, 585], "propos": [0, 579, 581], "valuabl": 0, "everyth": [0, 580], "highest": 0, "prioriti": [0, 581], "process": [0, 312, 313, 314, 339, 459, 493, 579, 581, 582], "quickli": [0, 581, 585], "activ": 0, "member": [0, 559, 565], "permiss": 0, "final": [0, 101, 183, 262, 581], "mark": [0, 313, 314, 315, 438, 561, 581], "readi": [0, 312, 314, 315, 581], "everyon": 0, "welcom": 0, "extrem": 0, "reduc": [0, 408, 538, 547, 569, 581], "burden": 0, "bit": [0, 579, 583], "back": [0, 333, 355, 367, 375, 376, 403, 458, 467, 468, 558, 561, 580], "forth": [0, 580], "receiv": [0, 162, 244, 304, 388, 481, 513, 579, 581], "feedback": 0, "multipl": [0, 68, 89, 102, 152, 154, 158, 162, 166, 171, 184, 234, 236, 240, 244, 248, 253, 255, 273, 280, 298, 300, 304, 317, 356, 390, 447, 484, 517, 580, 581, 585], "round": [0, 575], "pleas": [0, 580, 581], "discourag": 0, "normal": [0, 331, 366, 380, 413, 457, 472, 499, 575, 579, 580, 581, 582], "qualiti": 0, "appear": [0, 157, 158, 239, 240, 312, 342, 343, 535, 583], "might": [0, 68, 312, 521], "larger": [0, 346, 581, 585], "implic": 0, "obviou": 0, "feel": 0, "free": [0, 435, 581], "adjust": [0, 89, 171, 253, 331, 366, 379, 380, 401, 411, 413, 457, 471, 472, 496, 551, 581], "comment": [0, 151, 233, 297], "anoth": [0, 101, 183, 262, 577, 581, 583, 585], "constrain": 0, "resourc": [0, 579], "infinit": [0, 581], "wait": 0, "period": [0, 431, 442, 581], "fine": 0, "regress": [0, 581], "codebas": 0, "often": [0, 583, 585], "needlessli": 0, "wast": 0, "starvat": 0, "slow": 0, "down": 0, "total": 0, "throughput": 0, "possibl": [0, 312, 323, 362, 399, 402, 407, 408, 409, 453, 497, 541, 545, 546, 547, 548, 552, 579, 581, 585], "try": [0, 402, 497, 552, 579, 581], "bundl": 0, "head": [0, 575, 583, 585], "automerg": 0, "signal": 0, "mergifi": 0, "bot": 0, "enqueu": 0, "onto": [0, 101, 183, 262], "At": [0, 529], "point": [0, 326, 328, 333, 335, 355, 367, 375, 376, 403, 406, 458, 467, 468, 516, 529, 553, 560, 561, 566, 581, 583, 585], "fulli": [0, 579, 581], "autom": [0, 581], "effort": [0, 579], "conserv": 0, "maxim": [0, 335, 347, 373, 465, 508, 518, 581], "idl": 0, "deep": 0, "backlog": 0, "unless": [0, 138, 220, 397, 491, 523, 537, 580, 581], "delai": [0, 581], "intend": [0, 575], "safe": 0, "high": [0, 328, 406, 578, 579, 581], "impact": [0, 581], "secur": 0, "balanc": 0, "risk": 0, "given": [0, 114, 115, 116, 123, 124, 125, 158, 196, 197, 198, 205, 206, 207, 240, 276, 281, 282, 283, 288, 312, 313, 333, 339, 342, 343, 348, 355, 356, 367, 375, 376, 382, 385, 400, 403, 409, 410, 418, 429, 430, 440, 441, 447, 458, 467, 468, 476, 478, 495, 500, 502, 516, 529, 548, 549, 550, 581, 582, 585], "patch": [0, 575, 581], "appropri": [0, 333, 355, 367, 375, 376, 403, 458, 467, 468, 580, 581], "inclus": 0, "riski": 0, "major": [0, 581], "trivial": 0, "fairli": [0, 585], "obscur": 0, "factor": [0, 336, 340, 368, 370, 389, 395, 396, 397, 437, 460, 462, 482, 489, 490, 491, 514, 534, 536, 537, 538, 581], "weigh": 0, "consid": [0, 156, 238, 339, 386, 387, 390, 406, 479, 480, 484, 505, 506, 517], "tiniest": 0, "carri": 0, "realli": 0, "visibl": 0, "benefit": 0, "notic": [0, 581, 583], "self": [0, 304, 326, 333, 335, 337, 339, 344, 347, 355, 367, 372, 373, 375, 399, 407, 458, 464, 465, 467, 494, 544, 546, 580, 581, 585], "signific": 0, "refactor": 0, "lot": [0, 580], "worth": [0, 161, 243, 303, 338, 349, 350, 351, 352, 369, 400, 461, 495, 550, 574, 581], "think": 0, "less": [0, 315, 331, 366, 380, 413, 421, 424, 428, 437, 439, 457, 472, 493, 539], "whether": [0, 89, 112, 113, 117, 118, 156, 171, 194, 195, 199, 200, 238, 253, 274, 275, 331, 342, 343, 366, 380, 410, 413, 457, 459, 472, 503, 507, 508, 509, 511, 523, 549, 580, 581], "simpli": [0, 581, 585], "non": [0, 327, 333, 339, 342, 364, 367, 377, 387, 404, 438, 455, 458, 469, 480, 510, 529, 535, 554, 557, 580, 583], "allow": [0, 89, 91, 166, 171, 173, 248, 253, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 580, 581, 583, 585], "accept": [0, 319, 320, 321, 322, 323, 330, 358, 359, 360, 361, 362, 376, 378, 397, 403, 405, 449, 450, 451, 452, 453, 468, 470, 491, 537, 580, 581], "least": [0, 117, 118, 199, 200, 529, 581, 582], "until": [0, 312, 333, 339, 354, 355, 367, 374, 375, 376, 397, 403, 458, 466, 467, 468, 491, 537, 581], "maintain": [0, 581], "minor": 0, "approach": [0, 478, 581, 585], "reason": 0, "cherri": 0, "pick": [0, 312], "x": [0, 317, 356, 383, 384, 385, 386, 387, 390, 410, 416, 417, 431, 438, 442, 447, 474, 475, 476, 479, 480, 484, 505, 506, 510, 517, 518, 520, 521, 538, 549, 580, 581, 582, 583], "main_commit_id": 0, "squash": 0, "track": [0, 312, 333, 355, 367, 375, 458, 467], "strict": 0, "cleanli": 0, "resolv": [0, 516, 561, 581], "yourself": [0, 581], "messag": [0, 165, 247, 306, 581], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586], "branch": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "rustworkx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 171, 253, 311, 312, 316, 553, 560, 566, 581, 582, 583, 586], "chang": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "prior": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "releas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586], "central": [7, 20, 40, 48, 331, 341, 366, 371, 380, 381, 389, 413, 414, 457, 463, 472, 473, 482, 514, 578, 581, 584], "betweenness_centr": [7, 413, 581, 582], "edge_betweenness_centr": [7, 331, 581], "eigenvector_centr": [7, 381, 473, 581], "katz_centr": [7, 389, 482, 581], "closeness_centr": [7, 581], "color": [7, 20, 45, 165, 247, 306, 333, 342, 355, 367, 375, 429, 430, 438, 440, 441, 458, 459, 467, 477, 478, 485, 545, 554, 557, 574, 575, 581, 582, 585], "coloringstrategi": [7, 581], "graph_greedy_color": [7, 45, 581], "graph_bipartite_edge_color": [7, 581], "graph_greedy_edge_color": [7, 581], "graph_misra_gries_edge_color": [7, 581], "two_color": [7, 581], "connect": [7, 20, 106, 158, 166, 188, 240, 248, 268, 326, 337, 339, 341, 342, 345, 346, 354, 371, 399, 401, 409, 410, 420, 422, 425, 432, 443, 444, 463, 466, 494, 496, 500, 503, 511, 520, 521, 527, 528, 540, 548, 549, 551, 576, 581, 582, 583, 585], "number_connected_compon": [7, 581], "connected_compon": [7, 581, 585], "node_connected_compon": [7, 581], "is_connect": [7, 581], "strongly_connected_compon": [7, 581], "number_weakly_connected_compon": [7, 581], "weakly_connected_compon": [7, 581], "is_weakly_connect": [7, 581], "cycle_basi": [7, 581], "simple_cycl": [7, 581], "digraph_find_cycl": [7, 581], "articulation_point": [7, 581], "bridg": [7, 581], "biconnected_compon": [7, 581], "chain_decomposit": [7, 44, 581], "all_simple_path": [7, 581], "all_pairs_all_simple_path": [7, 390, 484, 517, 581], "stoer_wagner_min_cut": [7, 581], "longest_simple_path": [7, 581], "is_bipartit": [7, 581], "has_path": [7, 581], "connected_subgraph": [7, 581], "dag_longest_path": [7, 350, 351, 352, 581], "dag_longest_path_length": [7, 352, 581], "dag_weighted_longest_path": [7, 581], "dag_weighted_longest_path_length": [7, 581], "is_directed_acyclic_graph": 7, "transitive_reduct": [7, 581], "topological_gener": [7, 581], "domin": [7, 20, 312, 412, 501, 516, 581], "immediate_domin": [7, 581], "dominance_fronti": [7, 581], "oper": [7, 20, 400, 495, 550, 579, 580, 581, 583], "complement": [7, 372, 464, 581], "union": [7, 338, 400, 495, 533, 581], "cartesian_product": [7, 581, 585], "isomorph": [7, 20, 386, 387, 402, 479, 480, 497, 505, 506, 510, 552, 578, 581], "is_isomorph": [7, 386, 402, 479, 497, 552, 581], "is_subgraph_isomorph": [7, 387, 402, 480, 497, 552, 577, 581], "is_isomorphic_node_match": [7, 581], "vf2_map": [7, 581], "link": [7, 20, 389, 392, 419, 482, 486, 514, 525, 530, 538, 580, 581, 585], "analysi": [7, 20, 341, 581, 583], "pagerank": [7, 581], "hit": [7, 581], "max_weight_match": [7, 581], "is_match": [7, 581], "is_maximal_match": 7, "adjacency_matrix": [7, 580, 581], "transit": [7, 399, 494, 529, 543, 581, 585], "core_numb": [7, 581], "graph_line_graph": [7, 581], "metric_closur": [7, 581], "is_planar": [7, 581], "digraph_maximum_bisimul": [7, 59, 311, 581], "shortest": [7, 20, 319, 320, 321, 322, 323, 327, 329, 330, 331, 341, 358, 359, 360, 361, 362, 364, 365, 366, 371, 377, 378, 380, 383, 384, 385, 388, 393, 401, 404, 405, 413, 416, 417, 418, 449, 450, 451, 452, 453, 455, 456, 457, 463, 469, 470, 472, 474, 475, 476, 481, 487, 496, 513, 519, 526, 538, 551, 578, 579, 581, 582], "dijkstra_shortest_path": [7, 77, 579, 581], "dijkstra_shortest_path_length": [7, 73, 577, 581], "all_pairs_dijkstra_shortest_path": [7, 30, 581], "all_pairs_dijkstra_path_length": [7, 577, 581], "bellman_ford_shortest_path": [7, 581], "bellman_ford_shortest_path_length": [7, 581], "all_pairs_bellman_ford_shortest_path": [7, 581], "all_pairs_bellman_ford_path_length": [7, 581], "negative_edge_cycl": [7, 581], "find_negative_cycl": [7, 581], "distance_matrix": [7, 581], "floyd_warshal": [7, 581], "floyd_warshall_numpi": [7, 411, 580, 581], "floyd_warshall_successor_and_dist": [7, 581], "astar_shortest_path": [7, 581], "k_shortest_path_length": [7, 581], "num_shortest_paths_unweight": [7, 581], "unweighted_average_shortest_path_length": [7, 581], "all_shortest_path": [7, 581], "digraph_all_shortest_path": [7, 581], "travers": [7, 20, 333, 349, 350, 351, 352, 354, 355, 367, 374, 375, 376, 377, 403, 404, 458, 466, 467, 468, 469, 572, 573, 581], "dfs_edg": [7, 581], "dfs_search": [7, 375, 467, 560, 581], "bfs_successor": [7, 35, 581], "bfs_predecessor": [7, 34, 581], "bfs_search": [7, 367, 458, 553, 581], "dijkstra_search": [7, 566, 581], "topological_sort": [7, 516, 581, 583], "lexicographical_topological_sort": [7, 581], "descend": [7, 541, 581], "ancestor": [7, 541, 581], "collect_run": [7, 581, 583], "collect_bicolor_run": [7, 581], "dfsvisitor": [7, 355, 375, 467, 581], "bfsvisitor": [7, 333, 367, 458, 581], "dijkstravisitor": [7, 376, 403, 468, 581], "topologicalsort": [7, 581], "minimum_spanning_edg": [7, 581], "minimum_spanning_tre": [7, 581], "steiner_tre": [7, 581], "pydag": [20, 22, 183, 262, 504, 506, 581], "function": [20, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 112, 113, 117, 118, 138, 140, 141, 155, 156, 157, 158, 165, 166, 170, 194, 195, 199, 200, 220, 222, 223, 237, 238, 239, 240, 247, 248, 252, 274, 275, 301, 306, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 330, 331, 333, 335, 337, 339, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 373, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 392, 397, 399, 400, 401, 402, 403, 405, 406, 408, 411, 413, 414, 415, 416, 417, 418, 430, 441, 447, 448, 449, 450, 451, 452, 453, 457, 458, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 486, 491, 493, 494, 495, 496, 497, 499, 500, 505, 506, 510, 514, 516, 517, 518, 520, 521, 522, 523, 525, 529, 531, 535, 537, 539, 540, 544, 547, 550, 551, 552, 561, 563, 574, 575, 577, 578, 579, 581, 582, 583, 585], "gener": [20, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 81, 108, 112, 119, 120, 141, 158, 160, 161, 165, 166, 170, 190, 194, 201, 202, 223, 240, 242, 243, 247, 248, 252, 270, 274, 277, 278, 303, 305, 306, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 328, 330, 336, 340, 341, 356, 359, 361, 362, 368, 369, 370, 371, 378, 380, 392, 394, 395, 396, 397, 398, 402, 405, 406, 407, 408, 409, 410, 413, 419, 447, 449, 450, 451, 452, 453, 460, 461, 462, 463, 470, 472, 477, 478, 485, 486, 488, 489, 490, 491, 492, 497, 500, 525, 530, 531, 532, 534, 535, 536, 537, 541, 546, 547, 548, 549, 552, 574, 575, 578, 579, 580, 581, 583], "random": [20, 328, 394, 397, 406, 407, 408, 409, 410, 488, 491, 493, 500, 531, 532, 537, 546, 547, 548, 549, 578, 581, 585], "layout": [20, 81, 336, 340, 368, 370, 394, 395, 396, 397, 438, 460, 462, 477, 488, 489, 490, 491, 532, 534, 536, 537, 574, 575, 578, 580, 581, 585], "serial": [20, 578, 580, 581], "convert": [20, 141, 223, 523, 578, 581], "custom": [20, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 311, 316, 332, 334, 578, 580, 581, 582, 585], "type": [20, 22, 23, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 109, 112, 113, 115, 117, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 137, 140, 141, 142, 143, 144, 147, 148, 149, 150, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 186, 187, 188, 189, 190, 191, 194, 195, 197, 199, 200, 201, 202, 203, 206, 208, 209, 210, 211, 212, 213, 214, 219, 222, 223, 224, 225, 226, 229, 230, 231, 232, 243, 244, 245, 246, 247, 248, 251, 254, 255, 256, 257, 258, 259, 262, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 303, 304, 305, 306, 309, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 574, 575, 576, 578, 580, 581, 582, 585], "specif": [22, 23, 114, 115, 116, 119, 120, 167, 196, 197, 198, 201, 202, 249, 276, 277, 278, 307, 533, 575, 579, 580, 581, 583], "univers": [22, 23, 341, 581], "retworkx": [22, 578, 581], "explicitli": [22, 23, 477, 478, 580, 581], "data": [22, 23, 34, 35, 52, 89, 91, 92, 93, 97, 98, 101, 102, 103, 109, 112, 113, 117, 118, 119, 120, 121, 122, 123, 125, 130, 131, 132, 138, 144, 148, 150, 156, 161, 162, 164, 165, 166, 168, 170, 171, 173, 174, 175, 179, 180, 183, 184, 185, 191, 194, 195, 199, 200, 201, 202, 203, 204, 205, 207, 212, 213, 214, 220, 226, 230, 232, 238, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 262, 263, 264, 271, 274, 275, 277, 278, 279, 280, 281, 283, 287, 288, 289, 293, 296, 303, 304, 305, 306, 308, 310, 316, 327, 329, 332, 334, 338, 342, 343, 364, 365, 369, 377, 379, 386, 387, 392, 400, 402, 404, 411, 415, 419, 455, 456, 461, 469, 471, 479, 480, 486, 495, 497, 505, 506, 510, 515, 516, 519, 522, 523, 525, 530, 533, 538, 550, 552, 574, 575, 578, 581, 582, 583], "length": [26, 73, 319, 321, 329, 331, 350, 352, 358, 360, 365, 377, 383, 384, 385, 388, 390, 401, 404, 416, 417, 418, 421, 424, 428, 431, 437, 439, 442, 449, 451, 456, 469, 474, 475, 476, 481, 484, 496, 513, 517, 543, 551, 575, 581], "node": [26, 30, 34, 35, 40, 52, 57, 59, 67, 68, 73, 77, 81, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 505, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 530, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 567, 574, 575, 577, 579, 581, 582, 583], "map": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 89, 101, 104, 131, 162, 171, 183, 186, 213, 244, 253, 262, 266, 288, 304, 318, 331, 338, 341, 357, 369, 371, 393, 398, 402, 412, 448, 461, 463, 487, 492, 493, 497, 501, 526, 543, 552, 575, 580, 581, 582, 585], "integ": [26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 92, 93, 110, 111, 171, 174, 175, 192, 193, 253, 255, 256, 272, 273, 311, 316, 335, 342, 349, 350, 438, 477, 478, 515, 518, 545, 580, 581, 585], "indic": [26, 30, 40, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 92, 93, 95, 97, 98, 101, 104, 105, 106, 107, 110, 111, 112, 113, 115, 131, 132, 136, 138, 140, 141, 142, 143, 149, 151, 159, 161, 162, 163, 166, 169, 171, 174, 175, 177, 179, 180, 183, 186, 187, 188, 189, 192, 193, 194, 195, 197, 213, 214, 218, 220, 222, 223, 224, 225, 231, 233, 241, 243, 244, 245, 248, 251, 253, 255, 256, 258, 259, 262, 266, 267, 268, 269, 272, 273, 274, 275, 276, 287, 288, 289, 290, 291, 292, 296, 297, 302, 303, 304, 305, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 333, 336, 338, 339, 346, 349, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 375, 376, 378, 381, 383, 389, 390, 393, 395, 398, 402, 403, 405, 411, 412, 414, 416, 424, 428, 430, 431, 440, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 467, 468, 470, 472, 473, 474, 477, 478, 482, 483, 484, 485, 487, 489, 492, 497, 499, 501, 512, 514, 515, 516, 517, 521, 526, 529, 534, 538, 542, 545, 552, 554, 557, 575, 579, 580, 581, 582, 585], "pathlengthmap": [26, 329, 365, 377, 388, 456, 469, 481, 581], "234": 26, "2": [26, 30, 34, 35, 44, 45, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 101, 104, 108, 112, 113, 119, 120, 121, 122, 133, 134, 135, 136, 151, 152, 156, 160, 170, 171, 173, 183, 186, 190, 194, 195, 201, 202, 203, 204, 215, 216, 217, 218, 233, 234, 238, 242, 252, 253, 254, 262, 266, 270, 274, 275, 277, 278, 279, 280, 297, 298, 310, 311, 312, 316, 317, 319, 320, 321, 322, 324, 331, 333, 336, 339, 340, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 375, 380, 383, 386, 387, 394, 395, 396, 397, 398, 399, 402, 408, 410, 411, 413, 416, 420, 421, 422, 424, 428, 429, 431, 435, 438, 439, 440, 442, 443, 447, 448, 449, 450, 451, 452, 454, 457, 458, 460, 461, 462, 467, 472, 474, 477, 478, 479, 480, 483, 485, 488, 489, 490, 491, 492, 497, 500, 505, 506, 510, 531, 532, 534, 535, 536, 537, 538, 546, 547, 549, 550, 552, 574, 575, 578, 580, 582, 583, 585], "34": 26, "python": [26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 114, 116, 157, 158, 166, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 196, 198, 239, 240, 248, 253, 254, 255, 256, 257, 258, 262, 263, 311, 316, 327, 329, 332, 334, 349, 350, 351, 352, 364, 365, 377, 386, 387, 388, 390, 402, 404, 415, 419, 455, 456, 469, 479, 480, 481, 484, 497, 505, 506, 510, 513, 516, 517, 522, 530, 552, 577, 578, 579, 580, 581, 585], "protocol": [26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 171, 253, 311, 316, 332, 334, 580, 581, 585], "dict": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 97, 98, 101, 165, 171, 179, 180, 183, 247, 253, 259, 262, 306, 319, 320, 321, 322, 330, 331, 335, 341, 347, 358, 359, 360, 361, 366, 373, 378, 380, 381, 383, 388, 389, 397, 404, 405, 412, 413, 414, 416, 429, 430, 440, 441, 449, 450, 451, 452, 457, 459, 465, 470, 472, 473, 474, 477, 478, 481, 482, 483, 485, 491, 493, 499, 501, 513, 514, 529, 537, 543, 545, 574, 575, 580, 581, 585], "rx": [26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 151, 160, 165, 170, 171, 183, 233, 242, 247, 252, 253, 262, 297, 306, 310, 311, 312, 316, 333, 355, 367, 375, 458, 467, 477, 478, 483, 484, 485, 574, 575, 579, 580, 581, 582, 583, 585], "directed_path_graph": [26, 30, 34, 35, 56, 57, 59, 67, 73, 77, 170, 252, 311, 312, 316, 369, 398, 402, 575, 581, 583, 585], "5": [26, 30, 34, 35, 56, 57, 67, 73, 77, 81, 89, 113, 160, 170, 171, 195, 242, 252, 253, 275, 310, 312, 316, 381, 414, 422, 423, 425, 426, 427, 436, 437, 438, 473, 477, 478, 485, 499, 500, 578, 579, 582, 583, 585], "edg": [26, 30, 36, 44, 48, 52, 56, 57, 73, 77, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 145, 147, 148, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 227, 229, 230, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 294, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 335, 337, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 392, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 458, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 491, 494, 495, 496, 497, 499, 505, 507, 508, 509, 510, 513, 514, 516, 518, 519, 520, 521, 522, 525, 529, 530, 531, 533, 537, 538, 539, 543, 544, 546, 547, 548, 550, 551, 552, 554, 556, 557, 558, 559, 561, 563, 564, 565, 568, 569, 570, 571, 574, 575, 577, 579, 581, 582, 583], "all_pairs_dijkstra_shortest_path_length": 26, "third_node_shortest_path_length": 26, "pathmap": [30, 330, 581], "third_node_shortest_path": 30, "sequenc": [34, 35, 44, 56, 57, 59, 67, 311, 316, 332, 334, 390, 484, 517, 575, 580, 581, 582, 583, 585], "tupl": [34, 35, 52, 57, 85, 92, 93, 101, 104, 107, 108, 110, 111, 124, 130, 131, 148, 169, 174, 175, 183, 186, 189, 190, 192, 193, 206, 212, 213, 230, 251, 255, 256, 262, 263, 266, 269, 270, 272, 273, 282, 287, 288, 296, 309, 316, 336, 338, 340, 354, 368, 369, 370, 374, 385, 394, 395, 396, 398, 418, 460, 461, 462, 466, 476, 483, 488, 489, 490, 492, 493, 499, 507, 508, 518, 532, 534, 536, 539, 543, 575, 579, 580, 581], "predecessor_a": 34, "predecessor_b": 34, "payload": [34, 35, 52, 89, 93, 103, 112, 113, 117, 118, 132, 133, 134, 135, 136, 138, 156, 161, 162, 166, 167, 168, 169, 170, 171, 175, 185, 194, 195, 199, 200, 214, 215, 216, 217, 218, 220, 238, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 272, 273, 274, 275, 289, 303, 304, 305, 307, 308, 309, 310, 316, 338, 342, 343, 369, 379, 381, 388, 389, 392, 400, 411, 414, 419, 431, 461, 471, 473, 481, 482, 486, 495, 499, 513, 514, 519, 523, 525, 529, 530, 538, 550, 574, 575, 580, 581, 582, 583], "index": [34, 35, 44, 52, 56, 57, 59, 67, 89, 90, 91, 94, 96, 97, 98, 101, 102, 104, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 171, 172, 173, 176, 178, 179, 180, 183, 184, 186, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 253, 254, 257, 259, 262, 263, 265, 266, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 313, 316, 323, 324, 325, 327, 329, 330, 331, 332, 334, 337, 339, 341, 347, 348, 353, 354, 362, 363, 364, 365, 371, 373, 374, 377, 378, 382, 388, 389, 404, 405, 453, 454, 455, 456, 463, 465, 466, 469, 470, 477, 478, 481, 482, 498, 507, 508, 513, 514, 515, 524, 539, 543, 579, 580, 581, 582, 583, 585], "iter": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 92, 93, 95, 102, 110, 111, 133, 134, 135, 136, 138, 154, 159, 160, 162, 174, 175, 177, 184, 192, 193, 215, 216, 217, 218, 220, 236, 241, 242, 244, 255, 256, 258, 263, 272, 273, 300, 302, 304, 311, 312, 316, 354, 374, 381, 389, 391, 397, 402, 414, 435, 466, 473, 482, 491, 497, 499, 514, 516, 529, 537, 552, 580, 581, 583], "wrap": [34, 35, 44, 56, 57, 59, 67, 73, 77, 311, 316, 581], "yield": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 311, 316, 581], "order": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 102, 115, 162, 184, 197, 244, 255, 263, 273, 276, 304, 311, 312, 313, 316, 332, 334, 349, 350, 351, 352, 354, 367, 374, 375, 376, 386, 387, 390, 402, 421, 424, 458, 466, 467, 468, 479, 480, 484, 497, 505, 506, 510, 516, 517, 529, 552, 553, 560, 566, 581, 583, 585], "bfs_succ": [34, 35], "third_el": [34, 35, 56, 57, 67, 73, 77, 316], "bfs_iter": [34, 35], "first_el": [34, 35, 56, 57, 59, 67, 316], "second_el": [34, 35, 56, 57, 67, 316], "successor_a": 35, "successor_b": 35, "repres": [36, 52, 57, 68, 77, 81, 85, 89, 161, 162, 171, 243, 244, 303, 304, 316, 319, 320, 321, 322, 323, 327, 329, 330, 337, 339, 346, 358, 359, 360, 361, 362, 364, 365, 376, 377, 378, 379, 390, 392, 395, 397, 402, 403, 404, 405, 415, 419, 449, 450, 451, 452, 453, 455, 456, 468, 469, 470, 471, 477, 478, 483, 484, 486, 489, 491, 493, 497, 517, 522, 525, 529, 530, 534, 537, 543, 552, 577, 581, 583], "endpoint": [36, 57, 124, 132, 206, 214, 263, 282, 287, 288, 289, 296, 316, 331, 335, 366, 457, 507, 581, 585], "biconnect": [36, 326, 335, 581], "compon": [36, 326, 333, 335, 337, 339, 341, 345, 354, 355, 367, 371, 374, 375, 376, 403, 458, 463, 466, 467, 468, 520, 524, 527, 528, 540, 576, 581], "belong": [36, 335, 541, 581], "float": [40, 48, 73, 119, 120, 201, 202, 277, 278, 317, 319, 320, 321, 322, 323, 327, 329, 330, 336, 340, 351, 352, 356, 358, 359, 360, 361, 362, 364, 365, 368, 370, 376, 377, 378, 379, 381, 383, 384, 385, 388, 389, 394, 395, 396, 397, 399, 401, 403, 404, 405, 408, 409, 411, 414, 415, 416, 417, 418, 447, 449, 450, 451, 452, 453, 455, 456, 460, 462, 468, 469, 470, 471, 473, 474, 475, 476, 481, 482, 488, 489, 490, 491, 494, 496, 499, 500, 513, 514, 519, 520, 521, 522, 529, 531, 532, 534, 536, 537, 538, 539, 544, 547, 548, 551, 575, 579, 580, 581, 582], "between": [40, 48, 89, 91, 97, 98, 106, 108, 121, 122, 133, 134, 135, 136, 138, 152, 154, 156, 157, 158, 162, 166, 167, 171, 173, 179, 180, 188, 190, 203, 204, 215, 216, 217, 218, 220, 234, 236, 238, 239, 240, 244, 248, 249, 253, 254, 255, 256, 259, 263, 268, 270, 272, 273, 279, 280, 284, 298, 300, 304, 307, 312, 317, 318, 323, 324, 327, 331, 341, 356, 357, 362, 363, 364, 366, 371, 380, 381, 384, 385, 389, 397, 400, 401, 402, 408, 409, 410, 411, 413, 414, 417, 418, 424, 426, 428, 430, 431, 433, 434, 440, 447, 448, 453, 454, 455, 457, 463, 472, 473, 475, 476, 482, 483, 491, 495, 496, 497, 498, 499, 500, 514, 516, 519, 529, 531, 537, 538, 547, 548, 549, 550, 551, 552, 561, 577, 578, 579, 580, 581, 583, 584, 585], "score": [40, 48, 331, 366, 380, 381, 389, 413, 414, 457, 472, 473, 482, 499, 514, 529, 567, 581], "edgelist": [44, 107, 189, 269, 339, 354, 374, 382, 466, 493, 580, 581], "instanc": [44, 59, 102, 160, 171, 184, 242, 253, 263, 311, 312, 581, 583], "hexagonal_lattice_graph": [44, 581, 582], "third_chain": 44, "chains_it": 44, "first_chain": 44, "second_chain": 44, "greedi": [45, 477, 478, 515, 581], "degre": [45, 129, 147, 211, 229, 312, 328, 347, 373, 406, 465, 477, 478, 485, 512, 516, 580, 581, 585], "largest": [45, 166, 248, 477, 478, 581], "satur": [45, 477, 478, 581], "dsatur": [45, 477, 478], "independentset": [45, 477, 478, 581], "gi": 45, "9": [45, 348, 438, 477, 578, 585], "adrian": [45, 477, 478], "kosowski": [45, 477, 478], "krzysztof": [45, 477, 478], "manuszewski": [45, 477, 478], "classic": [45, 477, 478, 583], "19": [45, 477, 478, 579, 581], "2004": [45, 477, 478], "isbn": [45, 477, 478], "8218": [45, 477, 478], "3458": [45, 477, 478], "4": [45, 89, 101, 113, 170, 171, 183, 195, 252, 253, 262, 275, 310, 312, 318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 390, 399, 408, 416, 417, 418, 420, 421, 424, 432, 438, 443, 444, 448, 474, 475, 476, 477, 478, 484, 485, 493, 494, 517, 535, 539, 544, 547, 578, 580, 582, 585], "attribut": [45, 89, 91, 161, 165, 171, 173, 243, 247, 253, 303, 306, 372, 392, 419, 464, 486, 523, 525, 530, 531, 533, 574, 575, 578, 581, 583], "weight": [52, 89, 101, 102, 103, 104, 107, 110, 111, 115, 117, 118, 119, 120, 139, 151, 156, 157, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 183, 184, 185, 186, 189, 192, 193, 197, 199, 200, 201, 202, 221, 233, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 264, 266, 269, 272, 273, 276, 277, 278, 297, 303, 304, 305, 307, 308, 309, 310, 316, 317, 319, 320, 321, 322, 323, 328, 329, 330, 338, 342, 343, 349, 350, 351, 352, 356, 358, 359, 360, 361, 362, 364, 365, 369, 376, 377, 378, 379, 381, 383, 384, 385, 388, 389, 397, 400, 403, 404, 405, 406, 411, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 437, 439, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 461, 468, 469, 470, 471, 473, 474, 475, 476, 481, 482, 491, 495, 499, 514, 518, 519, 520, 521, 529, 537, 538, 539, 550, 574, 575, 577, 579, 580, 581, 583, 585], "effici": [52, 81, 390, 408, 484, 517, 518, 547, 581], "behav": [52, 81, 89, 102, 184, 263, 318, 324, 357, 363, 448, 454, 585], "drop": [52, 81, 578, 581], "replac": [52, 81, 102, 161, 162, 184, 243, 244, 263, 303, 304, 578, 581, 583, 585], "readonli": [52, 81], "edge_indic": [56, 581, 585], "edges_it": [56, 57, 73, 77, 316], "node_index_a": [57, 316], "node_index_b": [57, 316], "edge_list": [57, 108, 110, 111, 170, 190, 192, 193, 252, 263, 270, 272, 273, 310, 483, 575, 580, 581], "block": [59, 312, 410, 549, 581], "partit": [59, 311, 391, 539, 581], "a_partition_block": [59, 311], "block_it": 59, "another_el": 59, "the_second_el": 59, "node_indic": [67, 89, 142, 171, 224, 253, 291, 477, 483, 581, 582, 585], "nodes_it": 67, "though": [68, 312], "unord": [68, 162, 244, 304, 494, 585], "when": [68, 89, 91, 93, 101, 102, 121, 122, 123, 124, 125, 138, 162, 166, 167, 168, 171, 173, 175, 183, 184, 203, 204, 205, 206, 207, 220, 244, 248, 249, 250, 253, 256, 262, 263, 279, 280, 281, 282, 283, 304, 307, 308, 312, 319, 320, 323, 329, 330, 358, 359, 360, 361, 362, 364, 365, 377, 378, 381, 388, 389, 404, 407, 408, 414, 415, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 455, 456, 469, 470, 473, 477, 478, 481, 482, 499, 500, 514, 515, 516, 519, 523, 524, 529, 533, 538, 546, 547, 555, 562, 567, 574, 578, 580, 581, 585], "sort": [68, 141, 223, 312, 516, 541, 542, 581, 583], "24": [73, 577, 581], "first_target": [73, 77], "first_path": [73, 77], "second_target": [73, 77], "second_path": [73, 77], "node_c": [77, 101, 183, 262, 483, 581], "node_a": [77, 101, 106, 121, 122, 126, 183, 188, 203, 204, 208, 254, 255, 256, 262, 268, 272, 273, 279, 280, 284, 298, 483, 580, 581], "node_b": [77, 101, 106, 121, 122, 126, 183, 188, 203, 204, 208, 254, 255, 256, 262, 268, 272, 273, 279, 280, 284, 298, 483, 580, 581], "2d": 81, "posit": [81, 138, 162, 220, 244, 304, 319, 320, 321, 322, 336, 340, 349, 350, 351, 352, 358, 359, 360, 361, 368, 370, 386, 387, 394, 395, 396, 397, 402, 449, 450, 451, 452, 460, 462, 479, 480, 488, 489, 490, 491, 497, 505, 506, 510, 531, 532, 534, 536, 537, 552, 575, 581], "check_cycl": [89, 102, 171, 184, 312, 581, 583], "fals": [89, 98, 102, 112, 126, 127, 128, 131, 132, 141, 151, 156, 158, 161, 166, 171, 180, 184, 194, 208, 209, 210, 213, 214, 223, 233, 238, 240, 243, 248, 253, 254, 255, 256, 272, 273, 274, 284, 285, 286, 297, 303, 312, 315, 323, 330, 331, 336, 342, 343, 362, 366, 368, 379, 383, 384, 385, 386, 387, 396, 397, 400, 401, 402, 405, 411, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 460, 479, 480, 490, 491, 495, 496, 497, 498, 502, 504, 505, 506, 510, 515, 516, 518, 522, 523, 536, 537, 550, 551, 552, 575, 580, 581, 583, 585], "multigraph": [89, 91, 97, 98, 102, 108, 166, 171, 173, 179, 180, 184, 190, 248, 253, 254, 255, 256, 259, 263, 270, 272, 273, 344, 372, 381, 389, 407, 414, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 459, 464, 473, 482, 499, 514, 518, 529, 546, 578, 580, 581], "true": [89, 91, 98, 101, 102, 117, 118, 126, 127, 128, 131, 132, 137, 151, 156, 158, 161, 162, 166, 171, 173, 180, 183, 184, 199, 200, 208, 209, 210, 213, 214, 219, 233, 238, 240, 243, 244, 248, 253, 262, 284, 285, 286, 297, 303, 304, 312, 315, 327, 330, 331, 336, 341, 342, 344, 364, 366, 368, 371, 372, 378, 379, 380, 383, 384, 385, 386, 387, 396, 397, 400, 401, 402, 405, 411, 413, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 455, 457, 460, 463, 464, 470, 472, 479, 480, 490, 491, 495, 496, 497, 498, 499, 502, 504, 505, 506, 510, 515, 516, 518, 522, 523, 536, 537, 550, 551, 552, 575, 580, 581, 582, 583, 585], "attr": [89, 161, 171, 243, 253, 303, 392, 419, 486, 525, 530, 533, 580, 581, 585], "none": [89, 93, 101, 102, 110, 111, 115, 138, 151, 156, 158, 161, 162, 165, 166, 170, 171, 175, 183, 184, 192, 193, 197, 220, 233, 238, 240, 243, 244, 247, 248, 252, 253, 256, 262, 263, 272, 273, 276, 297, 303, 304, 306, 310, 312, 317, 318, 323, 324, 328, 329, 330, 333, 336, 339, 340, 342, 348, 349, 350, 354, 355, 356, 357, 362, 363, 365, 367, 368, 370, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 395, 396, 397, 402, 404, 405, 406, 407, 408, 409, 410, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 437, 439, 443, 444, 445, 446, 447, 448, 453, 454, 456, 458, 459, 460, 462, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 489, 490, 491, 493, 497, 499, 500, 505, 510, 513, 514, 516, 517, 518, 520, 521, 525, 529, 530, 531, 532, 533, 534, 536, 537, 539, 545, 546, 547, 548, 549, 552, 574, 575, 580, 581, 583, 585], "node_count_hint": [89, 171, 253, 581], "edge_count_hint": [89, 171, 253, 581], "direct": [89, 98, 106, 141, 160, 166, 171, 180, 188, 223, 242, 248, 312, 313, 325, 333, 353, 355, 356, 367, 372, 373, 375, 376, 379, 383, 384, 385, 386, 387, 397, 399, 400, 401, 407, 408, 409, 410, 411, 412, 418, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 440, 491, 501, 512, 516, 518, 523, 528, 533, 537, 540, 543, 545, 551, 558, 575, 576, 578, 580, 581, 584], "acycl": [89, 171, 543, 578, 581, 584], "alia": [89, 581], "ident": [89, 138, 142, 156, 157, 220, 224, 238, 239, 291, 420, 580, 581, 585], "interchang": 89, "sole": [89, 581], "backward": [89, 142, 224, 291, 367, 375, 376, 458, 467, 468, 581], "although": [89, 162, 171, 244, 253, 304, 581], "rare": [89, 171, 253], "stabl": [89, 171, 253, 390, 484, 517, 535, 581, 585], "lifetim": [89, 171, 253, 585], "hole": [89, 171, 253, 581, 585], "reus": [89, 171, 253, 585], "add_nodes_from": [89, 112, 113, 171, 194, 195, 253, 262, 274, 275, 580, 581, 583, 585], "rang": [89, 112, 113, 171, 194, 195, 253, 274, 275, 574, 581, 582, 583, 585], "remove_nod": [89, 171, 253, 585], "print": [89, 170, 171, 252, 253, 310, 312, 333, 355, 367, 375, 458, 467, 581, 582, 583, 585], "res_manu": [89, 171, 253], "add_par": [89, 91, 171, 173, 583], "6": [89, 171, 253, 381, 389, 397, 414, 430, 438, 441, 459, 473, 477, 478, 482, 485, 491, 514, 529, 537, 578, 583, 585], "ad": [89, 91, 92, 93, 101, 110, 111, 138, 139, 157, 158, 160, 166, 171, 173, 174, 175, 183, 192, 193, 220, 221, 239, 240, 242, 248, 253, 255, 256, 262, 272, 273, 328, 406, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 508, 580, 581, 583, 585], "new": [89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 108, 119, 120, 138, 139, 151, 157, 158, 160, 161, 166, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 190, 201, 202, 220, 221, 233, 239, 240, 242, 243, 248, 253, 255, 256, 257, 258, 262, 263, 270, 277, 278, 297, 303, 305, 314, 328, 338, 369, 389, 398, 400, 406, 461, 482, 483, 492, 495, 514, 521, 550, 579, 580, 583, 585], "nodeindic": [89, 95, 113, 140, 141, 142, 143, 149, 163, 171, 177, 195, 222, 223, 224, 225, 231, 245, 253, 258, 275, 290, 291, 292, 311, 327, 349, 351, 364, 390, 391, 415, 455, 484, 512, 517, 539, 542, 581, 585], "arbitrari": [89, 171, 253, 382, 415, 581], "data_payload": [89, 171, 253], "node_index": [89, 130, 148, 171, 212, 230, 253, 287, 296, 581], "add_nod": [89, 101, 102, 171, 183, 184, 253, 263, 483, 579, 580, 581, 583, 585], "real": [89, 171, 580, 583], "introduc": [89, 102, 171, 184, 263, 581, 583, 585], "By": [89, 119, 120, 131, 132, 156, 161, 171, 201, 202, 213, 214, 238, 243, 253, 277, 278, 303, 312, 317, 318, 324, 356, 357, 363, 379, 387, 401, 411, 447, 448, 454, 471, 480, 496, 510, 529, 551, 553, 560, 566, 574, 575, 581, 585], "disabl": [89, 171, 253, 312, 581], "creation": [89, 171, 253, 578, 585], "With": [89, 171, 580, 581, 583], "add_edg": [89, 130, 148, 171, 212, 230, 262, 287, 296, 483, 580, 581, 583, 585], "truli": [89, 171], "note": [89, 97, 98, 138, 152, 154, 161, 166, 171, 179, 180, 220, 234, 236, 243, 248, 259, 280, 298, 300, 303, 335, 338, 349, 350, 351, 352, 369, 387, 400, 441, 461, 477, 478, 480, 495, 510, 518, 550, 574, 575, 578, 579, 580, 585], "add_edges_from": [89, 93, 111, 112, 171, 175, 193, 194, 256, 262, 273, 274, 579, 580, 581, 585], "add_edges_from_no_data": [89, 110, 171, 192, 272, 580, 581], "extend_from_edge_list": [89, 171, 333, 355, 367, 375, 458, 467, 580, 581, 585], "extend_from_weighted_edge_list": [89, 160, 171, 242, 580, 581], "come": [89, 171, 516, 577, 583], "penalti": [89, 171], "grow": [89, 171, 253], "leverag": [89, 165, 171, 247, 306, 578, 581, 582, 585], "add_child": [89, 91, 101, 171, 173, 183, 583], "overhead": [89, 171, 583], "parallel": [89, 102, 108, 128, 138, 166, 167, 171, 184, 190, 210, 220, 248, 249, 253, 255, 263, 270, 273, 286, 307, 326, 331, 335, 337, 339, 344, 347, 348, 356, 366, 372, 373, 379, 380, 381, 383, 384, 385, 389, 390, 399, 401, 411, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 464, 465, 471, 472, 473, 474, 475, 476, 482, 484, 493, 494, 496, 499, 514, 517, 518, 529, 544, 551, 581, 585], "kwarg": [89, 131, 132, 156, 171, 213, 214, 238, 253, 574, 575, 580, 581], "constructor": [89, 171, 253, 575, 581, 583, 585], "initi": [89, 171, 253, 312, 313, 314, 328, 339, 355, 375, 397, 406, 467, 491, 516, 537, 580, 581], "maximum": [89, 171, 253, 318, 324, 346, 356, 357, 363, 381, 389, 390, 391, 397, 407, 414, 421, 424, 447, 448, 454, 473, 482, 484, 485, 491, 499, 508, 514, 517, 518, 529, 537, 546, 575, 581], "32": [89, 171, 253, 574, 579, 581], "294": [89, 171, 253], "967": [89, 171, 253], "attempt": [89, 171, 253, 581, 583, 585], "than": [89, 115, 151, 171, 197, 233, 253, 276, 297, 315, 331, 335, 341, 346, 366, 371, 380, 381, 387, 389, 390, 392, 407, 413, 414, 421, 424, 428, 437, 439, 457, 463, 472, 473, 480, 482, 484, 486, 493, 499, 500, 510, 514, 517, 518, 525, 529, 535, 539, 543, 546, 580, 581, 582], "paramet": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 265, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 574, 575, 576, 580, 581], "bool": [89, 98, 102, 126, 127, 128, 131, 132, 137, 151, 156, 158, 166, 171, 180, 184, 208, 209, 210, 213, 214, 219, 233, 238, 240, 248, 253, 284, 285, 286, 297, 312, 330, 331, 336, 341, 366, 368, 371, 378, 379, 380, 386, 387, 396, 397, 400, 401, 402, 405, 410, 411, 413, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 460, 463, 470, 472, 479, 480, 490, 491, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 515, 516, 518, 522, 523, 536, 537, 549, 550, 551, 552, 575], "runtim": [89, 171, 390, 484, 517, 581, 583], "detect": [89, 128, 171, 210, 286, 312, 581], "multgraph": 89, "place": [89, 160, 171, 242, 253, 307, 308, 328, 406, 531, 581, 585], "digraph": [89, 171, 356, 580], "dagwouldcycl": [89, 102, 171, 184], "parent": [90, 91, 92, 93, 96, 98, 117, 130, 150, 152, 172, 173, 174, 175, 178, 180, 199, 212, 232, 234, 254, 256, 287, 298, 332, 334, 581], "obj": [90, 92, 94, 96, 102, 115, 172, 174, 176, 178, 184, 197, 255, 257, 263, 276], "child": [90, 91, 92, 93, 96, 118, 148, 152, 164, 172, 173, 174, 175, 178, 200, 230, 234, 246, 254, 256, 296, 298], "int": [90, 91, 92, 93, 94, 95, 96, 97, 98, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 162, 163, 164, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 265, 276, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 298, 299, 301, 304, 307, 308, 312, 313, 318, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 339, 346, 348, 350, 351, 352, 353, 354, 355, 357, 362, 363, 364, 365, 366, 367, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 453, 454, 455, 456, 457, 458, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 487, 488, 491, 493, 496, 497, 498, 499, 500, 501, 505, 510, 513, 514, 516, 518, 524, 526, 527, 528, 529, 531, 532, 537, 546, 547, 548, 549, 551, 552, 575, 581], "attach": [90, 92, 93, 94, 95, 96, 172, 174, 175, 176, 177, 178, 255, 256, 257, 258, 328, 406, 580, 581], "duplic": [91, 173, 581], "obj_list": [92, 93, 95, 174, 175, 177, 255, 256, 258, 273], "neighbor": [97, 98, 117, 118, 141, 149, 150, 163, 164, 179, 180, 199, 200, 223, 231, 232, 245, 246, 259, 288, 354, 374, 466, 477, 478, 512, 580, 581], "dictionari": [97, 98, 101, 165, 179, 180, 183, 247, 259, 262, 306, 319, 320, 321, 322, 329, 330, 331, 335, 338, 341, 347, 358, 359, 360, 361, 365, 369, 371, 373, 377, 378, 383, 388, 389, 392, 397, 398, 402, 404, 405, 416, 419, 449, 450, 451, 452, 456, 459, 461, 463, 465, 469, 470, 474, 477, 478, 481, 482, 483, 485, 486, 491, 492, 497, 513, 514, 523, 525, 529, 530, 537, 545, 552, 574, 575, 580, 581], "adjac": [97, 98, 114, 119, 120, 179, 180, 196, 201, 202, 259, 277, 278, 317, 356, 447, 483, 580, 581], "inbound": [97, 98, 129, 179, 180, 211, 259, 265], "outbound": [97, 98, 147, 179, 180, 229, 259, 581], "dat": [97, 179], "two": [97, 98, 139, 151, 156, 166, 179, 180, 221, 233, 238, 248, 263, 297, 323, 336, 338, 340, 342, 362, 368, 369, 370, 381, 384, 385, 389, 394, 395, 396, 398, 400, 402, 408, 409, 414, 417, 418, 420, 426, 433, 434, 435, 453, 460, 461, 462, 473, 475, 476, 482, 483, 488, 489, 490, 492, 495, 497, 499, 507, 514, 529, 531, 532, 534, 536, 539, 545, 547, 548, 550, 552, 577, 581, 585], "share": [97, 98, 103, 179, 180, 185, 259, 263, 264, 400, 495, 507, 550, 581], "specifi": [97, 98, 102, 106, 108, 129, 133, 134, 135, 136, 138, 147, 152, 154, 162, 165, 166, 170, 171, 179, 180, 184, 188, 190, 211, 215, 216, 217, 218, 220, 229, 234, 236, 244, 247, 248, 252, 253, 259, 263, 265, 268, 270, 298, 300, 304, 306, 310, 317, 323, 328, 329, 330, 333, 336, 339, 354, 355, 356, 362, 365, 367, 368, 374, 375, 376, 377, 378, 381, 382, 386, 387, 388, 389, 392, 397, 401, 402, 403, 404, 405, 406, 414, 416, 417, 419, 420, 422, 423, 425, 426, 428, 431, 432, 433, 434, 439, 442, 443, 444, 445, 446, 447, 453, 456, 458, 460, 466, 467, 468, 469, 470, 473, 477, 478, 479, 480, 481, 482, 486, 491, 496, 497, 499, 505, 506, 510, 513, 514, 518, 520, 521, 525, 529, 530, 531, 537, 539, 551, 552, 574, 575, 581, 585], "children": [98, 148, 180, 230, 332, 334, 437], "clear": [100, 182, 261, 581], "leav": [100, 102, 182, 184, 261, 263, 585], "intact": [100, 182, 261], "node_map": [101, 183, 262, 581], "node_map_func": [101, 183, 262], "edge_map_func": [101, 183, 262], "weight2": [101, 183, 262], "callabl": [101, 102, 114, 116, 138, 156, 158, 162, 165, 166, 170, 183, 184, 196, 198, 220, 238, 240, 244, 247, 248, 252, 262, 263, 304, 306, 310, 317, 319, 320, 321, 322, 327, 329, 349, 350, 351, 352, 356, 358, 359, 360, 361, 364, 365, 377, 381, 383, 384, 385, 386, 387, 388, 389, 392, 402, 404, 414, 415, 416, 417, 418, 419, 447, 449, 450, 451, 452, 455, 456, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 486, 497, 499, 505, 506, 510, 513, 514, 516, 518, 519, 520, 521, 522, 525, 529, 530, 538, 539, 552, 574, 581], "singl": [101, 102, 114, 116, 138, 166, 183, 184, 196, 198, 220, 248, 259, 262, 263, 319, 320, 321, 322, 323, 329, 330, 331, 342, 343, 354, 358, 359, 360, 361, 362, 365, 366, 376, 377, 378, 380, 397, 403, 404, 405, 413, 429, 430, 440, 441, 449, 450, 451, 452, 453, 456, 457, 466, 468, 469, 470, 472, 491, 493, 494, 516, 518, 537, 538, 575, 578, 581, 582, 583, 585], "new_node_id": [101, 183, 262], "correspond": [101, 183, 384, 385, 417, 418, 475, 476, 483, 581, 585], "build": [101, 183, 262, 578, 579, 580, 581, 585], "visual": [101, 151, 165, 183, 233, 247, 262, 297, 306, 369, 398, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 461, 477, 492, 578, 581, 583, 585], "mpl_draw": [101, 151, 183, 233, 262, 297, 369, 398, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 461, 477, 492, 580, 581, 582, 583, 585], "b": [101, 112, 183, 194, 262, 274, 410, 430, 441, 483, 549, 579, 581, 583, 585], "c": [101, 112, 183, 194, 262, 274, 341, 371, 399, 463, 483, 485, 494, 499, 520, 577, 579, 580, 581, 583, 585], "with_label": [101, 183, 262, 575, 581, 585], "label": [101, 151, 183, 233, 262, 297, 335, 354, 374, 466, 575, 580, 581, 582, 583, 585], "str": [101, 151, 165, 170, 183, 233, 247, 252, 262, 297, 306, 310, 392, 419, 486, 525, 530, 533, 574, 575, 581, 583, 585], "edge_label": [101, 183, 262, 575, 580, 581, 585], "figur": [101, 151, 183, 233, 262, 297, 369, 398, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 461, 477, 492, 575, 581, 582, 583, 585], "size": [101, 151, 165, 171, 183, 233, 247, 253, 262, 297, 306, 369, 398, 410, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 461, 477, 492, 538, 549, 574, 575, 581, 582, 583, 585], "640x480": [101, 151, 183, 233, 262, 297, 369, 398, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 461, 477, 492, 575, 581, 582, 583, 585], "ax": [101, 151, 183, 233, 262, 297, 369, 398, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 461, 477, 492, 575, 581, 582, 583, 585], "second": [101, 121, 122, 167, 183, 203, 204, 249, 262, 279, 280, 284, 287, 288, 307, 338, 369, 385, 386, 387, 398, 400, 402, 418, 461, 476, 479, 480, 492, 495, 497, 499, 505, 506, 510, 550, 552, 577, 581, 585], "other_graph": [101, 183, 262, 581], "node_d": [101, 183, 262, 483, 581], "weight_combo_fn": [102, 166, 184, 248, 263, 581], "substitut": [102, 162, 184, 244, 263, 304], "ignor": [102, 108, 155, 156, 157, 158, 159, 161, 184, 190, 237, 238, 239, 240, 241, 243, 263, 270, 301, 302, 303, 342, 420, 422, 423, 425, 426, 428, 432, 433, 434, 439, 443, 444, 445, 446, 539, 581, 583], "empti": [102, 131, 132, 184, 213, 214, 263, 288, 289, 314, 382, 390, 402, 407, 408, 412, 427, 436, 484, 497, 501, 503, 511, 517, 546, 547, 552, 581, 583, 585], "slower": [102, 184, 263], "associ": [102, 165, 184, 247, 263, 306, 574, 580, 581], "valid": [102, 184, 312, 313, 438, 477, 478, 507, 508, 575, 581], "contract": [102, 184, 263, 581], "inherit": [102, 184], "merg": [102, 139, 184, 221, 263, 400, 495, 550, 581], "occur": [102, 184, 255, 263, 273, 349, 350, 351, 352, 518, 581], "incom": [102, 131, 132, 156, 157, 158, 184, 213, 214, 238, 239, 240, 312, 349, 350, 351, 352, 581], "outgo": [102, 131, 132, 156, 157, 158, 184, 213, 214, 238, 239, 240, 581], "unspecifi": [102, 184, 263], "choos": [102, 184, 263, 477, 478, 575, 580, 581], "arbitrarili": [102, 184, 263, 333, 339, 354, 355, 367, 374, 375, 376, 403, 458, 466, 467, 468], "subject": [102, 184, 263], "shallow": [103, 185, 264, 581], "origin": [103, 133, 134, 135, 136, 166, 185, 215, 216, 217, 218, 248, 264, 363, 376, 403, 454, 468, 543, 578, 580, 581, 583], "edgeindexmap": [104, 131, 186, 213, 266, 288, 581, 585], "edgeindic": [105, 106, 112, 132, 187, 188, 194, 214, 267, 268, 274, 289, 581, 585], "induc": [108, 190, 270, 387, 402, 480, 497, 510, 538, 552, 581], "subgraph": [108, 190, 270, 335, 346, 347, 373, 387, 402, 465, 480, 497, 505, 510, 515, 538, 552, 578, 581], "incid": [108, 131, 132, 190, 213, 214, 270, 288, 289, 326, 335, 581, 585], "silent": [108, 161, 190, 243, 270, 303], "extend": [110, 111, 192, 193, 272, 273, 328, 406, 581], "present": [110, 111, 123, 124, 131, 132, 138, 155, 156, 157, 158, 159, 161, 168, 192, 193, 205, 206, 213, 214, 220, 237, 238, 239, 240, 241, 243, 250, 272, 273, 281, 282, 288, 289, 301, 302, 303, 308, 390, 484, 517], "filter_funct": [112, 113, 194, 195, 274, 275], "filter": [112, 113, 117, 118, 194, 195, 199, 200, 274, 275, 342, 343, 581], "criteria": [112, 113, 194, 195, 274, 275, 581], "boolean": [112, 113, 114, 116, 117, 118, 194, 195, 196, 198, 199, 200, 274, 275, 327, 342, 343, 364, 402, 455, 497, 499, 518, 552, 581], "fit": [112, 113, 194, 195, 274, 275, 581], "complete_graph": [112, 194, 274, 443, 581], "def": [112, 113, 194, 195, 274, 275, 333, 355, 367, 375, 385, 418, 458, 467, 476, 574, 580, 581, 582, 583, 585], "my_filter_funct": [112, 113, 194, 195, 274, 275, 581], "assert": [112, 113, 141, 160, 194, 195, 223, 242, 274, 275, 478, 483, 485, 580, 581], "predic": [114, 116, 196, 198], "within": [115, 197, 276, 538, 581], "worst": [115, 197, 276], "o": [115, 156, 157, 158, 165, 170, 197, 238, 239, 240, 247, 252, 262, 276, 306, 310, 388, 400, 407, 408, 410, 459, 481, 495, 500, 513, 518, 546, 547, 549, 550, 575, 581], "equal": [115, 139, 156, 158, 197, 221, 238, 240, 276, 318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 386, 387, 390, 399, 400, 416, 417, 418, 448, 474, 475, 476, 479, 480, 484, 493, 494, 495, 505, 506, 510, 517, 544, 550, 581], "found": [115, 197, 276, 349, 350, 351, 352, 354, 374, 382, 390, 402, 466, 484, 497, 516, 517, 518, 535, 552, 579, 581, 582, 583], "predecessor": [116, 117, 133, 134, 141, 149, 156, 157, 158, 198, 199, 215, 216, 223, 231, 238, 239, 240, 314, 325, 332, 561, 581], "filter_fn": [117, 118, 199, 200, 342, 343, 583], "whose": [117, 118, 199, 200, 326, 337, 366, 380, 381, 389, 409, 413, 414, 457, 472, 473, 482, 499, 514, 515, 529, 538, 548, 554, 557, 581], "successor": [118, 135, 136, 140, 141, 156, 157, 158, 163, 200, 217, 218, 222, 223, 238, 239, 240, 245, 313, 334, 343, 353, 385, 418, 476, 581], "static": [119, 120, 151, 201, 202, 233, 277, 278, 297, 580, 581], "matrix": [119, 120, 201, 202, 277, 278, 317, 356, 379, 384, 385, 401, 411, 417, 418, 447, 471, 475, 476, 496, 529, 551, 581, 583], "null_valu": [119, 120, 201, 202, 277, 278, 317, 356, 379, 411, 447, 471, 581], "element": [119, 120, 151, 201, 202, 233, 277, 278, 288, 297, 338, 369, 379, 398, 423, 426, 433, 434, 445, 446, 461, 471, 492, 581], "construct": [119, 120, 171, 201, 202, 253, 277, 278, 483, 485, 515, 581, 585], "input": [119, 120, 156, 201, 202, 238, 277, 278, 313, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 337, 338, 339, 341, 347, 348, 349, 350, 351, 352, 354, 356, 358, 359, 360, 361, 364, 365, 366, 369, 371, 373, 377, 379, 380, 381, 382, 389, 398, 399, 400, 401, 404, 405, 406, 411, 413, 414, 415, 421, 424, 447, 449, 450, 451, 452, 455, 456, 457, 459, 461, 463, 465, 466, 469, 472, 473, 477, 478, 482, 483, 485, 492, 493, 494, 495, 498, 499, 504, 512, 514, 519, 522, 523, 529, 533, 539, 540, 544, 545, 550, 551, 580, 581, 583, 585], "from_complex_adjacency_matrix": [119, 201, 277, 581], "numpi": [119, 120, 201, 202, 277, 278, 317, 356, 379, 384, 385, 411, 417, 418, 447, 471, 475, 476, 579, 580, 581], "float64": [119, 120, 201, 202, 277, 278, 580, 581], "complex": [119, 120, 156, 157, 158, 201, 202, 238, 239, 240, 277, 278, 399, 407, 410, 500, 501, 546, 549, 578, 581], "complex128": [119, 120, 201, 202, 277, 278], "ndarrai": [119, 120, 201, 202, 277, 278, 317, 356, 379, 384, 385, 410, 411, 417, 418, 447, 471, 475, 476, 549], "arrai": [119, 120, 201, 202, 277, 278, 317, 356, 410, 447, 549, 575, 580, 581], "dimension": [119, 120, 201, 202, 277, 278, 580, 581], "np": [119, 120, 201, 202, 277, 278, 384, 385, 408, 410, 417, 418, 475, 476, 477, 547, 549, 580, 581], "null": [119, 120, 201, 202, 277, 278, 317, 356, 379, 411, 447, 471, 581], "0j": [120, 202, 278, 581], "from_adjacency_matrix": [120, 202, 278, 580, 581, 585], "noedgebetweennod": [121, 122, 152, 154, 167, 203, 204, 234, 236, 249, 279, 280, 298, 300, 307], "edge_index": [123, 124, 168, 205, 206, 250, 281, 282, 308, 581, 585], "indexerror": [123, 124, 125, 168, 205, 206, 207, 250, 281, 282, 283, 308, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 437, 438, 439, 440, 441, 443, 444, 445, 446, 581], "invalid": [125, 207, 283, 312, 347, 477, 478, 524, 544, 581], "destin": [126, 208, 330, 378, 388, 405, 450, 452, 470, 481, 513, 581], "recreat": [130, 148, 212, 230, 287, 296, 581], "param": [130, 212, 331, 366, 380, 413, 457, 472], "parent_index": [130, 212, 287], "edge_data": [130, 148, 212, 230, 287, 296], "weightededgelist": [130, 148, 169, 212, 230, 251, 287, 296, 309, 520, 581], "all_edg": [131, 132, 213, 214], "later": [132, 214, 289], "retriev": [132, 214, 289, 402, 497, 552, 581], "get_edge_data_by_index": [132, 214, 289, 581, 585], "get_edge_endpoints_by_index": [132, 214, 289, 581, 585], "ref_nod": [133, 134, 135, 136, 215, 216, 217, 218], "essenti": [133, 134, 135, 136, 215, 216, 217, 218], "copi": [133, 134, 135, 136, 138, 161, 162, 215, 216, 217, 218, 220, 243, 244, 303, 304, 305, 580, 581], "symmetr": [137, 138, 219, 220, 549, 581], "edge_payload_fn": [138, 220], "make": [138, 220, 320, 322, 330, 359, 361, 378, 405, 450, 452, 470, 575, 579, 581, 583, 585], "revers": [138, 220, 312, 516, 580, 581], "guarante": [138, 158, 220, 240, 381, 389, 390, 414, 473, 482, 484, 499, 514, 517, 529, 541, 580, 581, 582, 585], "execut": [138, 220, 383, 384, 385, 390, 416, 417, 418, 474, 475, 476, 484, 517, 581, 583], "edge_payload": [138, 220], "typic": [138, 220, 580, 585], "lower": [138, 220, 396, 408, 490, 536, 547, 581], "v": [139, 221, 331, 333, 341, 354, 355, 366, 367, 371, 374, 375, 376, 380, 388, 401, 403, 410, 413, 435, 457, 458, 463, 466, 467, 468, 472, 481, 496, 500, 513, 516, 543, 549, 551, 555, 556, 561, 562, 563, 567, 571, 575, 581, 582, 583], "successor_indic": [140, 222, 581], "agnost": [141, 223], "undirect": [141, 166, 223, 248, 253, 287, 296, 326, 330, 333, 335, 337, 339, 345, 354, 355, 369, 378, 379, 383, 384, 385, 398, 401, 405, 411, 418, 420, 421, 422, 423, 436, 439, 440, 441, 442, 443, 444, 445, 446, 458, 461, 464, 466, 467, 468, 470, 471, 479, 480, 492, 494, 495, 498, 500, 509, 518, 520, 521, 527, 546, 547, 548, 549, 551, 558, 561, 564, 581, 583, 585], "thereon": [141, 223], "directed_cycle_graph": [141, 223, 581, 583], "num_nod": [141, 223, 407, 408, 422, 423, 425, 426, 432, 433, 434, 437, 444, 445, 446, 531, 546, 547, 581], "10": [141, 223, 339, 341, 381, 389, 414, 430, 433, 434, 438, 441, 445, 446, 473, 482, 509, 514, 535, 538, 575, 578, 579, 582], "bidirect": [141, 166, 223, 248, 305, 379, 383, 384, 385, 401, 411, 418, 424, 426, 428, 429, 430, 431, 433, 434, 440, 551, 581], "same_neighbor": [141, 223], "to_undirect": [141, 223, 581], "prefer": [142, 224, 291], "earlier": [142, 224, 291, 367, 375, 376, 458, 467, 468, 581, 583], "child_index": [148, 230, 296], "delimin": [151, 170, 233, 252, 297, 310], "file": [151, 165, 170, 233, 247, 252, 297, 306, 310, 392, 419, 486, 525, 533, 574, 580, 581, 585], "separ": [151, 233, 297, 574, 580, 581], "delimit": [151, 233, 297], "3rd": [151, 233, 297], "charact": [151, 170, 233, 252, 297, 310, 581], "whitespac": [151, 233, 297, 581], "field": [151, 233, 297, 392, 486, 525, 533], "uniqu": [151, 233, 297, 422, 425, 580, 581, 585], "identifi": [151, 153, 233, 235, 288, 297, 299, 581, 585], "tempfil": [151, 165, 170, 233, 247, 252, 262, 297, 306, 310, 581, 585], "namedtemporaryfil": [151, 233, 297, 581, 585], "wt": [151, 233, 297, 581, 585], "fd": [151, 233, 297, 581, 585], "flush": [151, 233, 297, 581, 585], "index_list": [154, 159, 236, 241, 300, 302], "pair": [154, 157, 158, 236, 239, 240, 300, 305, 318, 331, 337, 357, 366, 380, 383, 384, 385, 390, 397, 401, 413, 416, 417, 418, 422, 425, 431, 442, 448, 457, 472, 474, 475, 476, 484, 491, 494, 496, 500, 517, 537, 538, 551, 578, 581, 582, 585], "effect": [155, 156, 157, 158, 237, 238, 239, 240, 301, 407, 546], "use_outgo": [156, 158, 238, 240], "retain": [156, 238, 581], "minimum": [156, 157, 158, 238, 239, 240, 318, 324, 356, 357, 363, 447, 448, 454, 520, 521, 538, 539, 575, 581], "mathcal": [156, 157, 158, 238, 239, 240, 400, 495, 550, 581], "e_i": [156, 157, 158, 238, 239, 240], "e_o": [156, 157, 158, 238, 239, 240], "respect": [156, 238, 339, 400, 407, 408, 495, 546, 547, 550, 577, 580, 581, 583], "cast": [156, 238, 317, 356, 383, 384, 385, 416, 417, 418, 447, 474, 475, 476, 519, 520, 521, 538, 575, 581], "hashabl": [156, 158, 238, 240, 580, 581, 585], "quantiti": [156, 238], "remove_node_retain_edges_by_kei": [156, 238, 581], "referenti": [156, 238, 581], "remove_node_retain_edges_by_id": [156, 238, 581], "lambda": [156, 165, 238, 247, 306, 317, 349, 350, 351, 352, 356, 383, 384, 385, 386, 387, 390, 416, 417, 418, 429, 430, 440, 441, 447, 474, 475, 476, 479, 480, 484, 505, 506, 510, 517, 518, 520, 521, 539, 575, 580, 581, 583], "in_edg": [156, 238, 581], "out_edg": [156, 238, 581, 583], "had": [156, 238, 312, 313, 581], "consequ": [157, 158, 239, 240], "exact": [158, 240, 581], "determinist": [158, 162, 240, 244, 304, 581], "drawn": [158, 240, 509, 575], "exactli": [158, 240, 342, 346, 581], "position": [158, 240], "relev": [158, 240, 581, 582], "opposit": [160, 242, 516], "weighted_edge_list": [160, 242, 316, 580, 581], "preserve_attr": [161, 243, 303], "edge_map_fn": [162, 244, 304, 581], "node_filt": [162, 244, 304], "edge_weight_map": [162, 244, 304], "nodemap": [162, 244, 304, 402, 497, 552, 581], "node_attr": [165, 247, 306, 392, 419, 486, 525, 530, 574, 581], "edge_attr": [165, 247, 306, 392, 419, 486, 525, 530, 581], "graph_attr": [165, 247, 306, 392, 419, 486, 525, 530, 574], "filenam": [165, 247, 306, 574], "dot": [165, 247, 306, 574, 581], "typeerror": [165, 170, 247, 252, 306, 310, 347, 367, 375, 376, 431, 438, 442, 458, 467, 468, 544, 581], "unfortun": [165, 247, 306], "graphviz": [165, 247, 306, 574, 580, 581, 582, 585], "pydot": [165, 247, 262, 306, 574, 580, 581], "pil": [165, 247, 262, 306, 429, 430, 440, 441, 574, 581, 582, 583, 585], "directed_gnp_random_graph": [165, 247, 410, 581], "15": [165, 247, 306, 437, 438, 538, 578, 582], "25": [165, 247, 306, 331, 366, 457, 575, 581], "dot_str": [165, 247, 306, 581], "fillcolor": [165, 247, 306, 429, 430, 440, 441, 574, 581, 582], "lightblu": [165, 247, 306, 429, 430, 440, 441, 581], "style": [165, 247, 306, 429, 430, 440, 441, 574, 575, 581, 582, 585], "fill": [165, 247, 306, 428, 429, 430, 439, 440, 441, 574, 581, 582, 585], "graph_from_dot_data": [165, 247, 306, 581], "temporarydirectori": [165, 247, 306, 581], "tmpdirnam": [165, 247, 306, 581], "tmp_path": [165, 247, 306, 581], "join": [165, 170, 247, 252, 306, 310, 420, 431, 442, 531, 581], "png": [165, 247, 306, 574, 581], "write_png": [165, 247, 306, 581], "pngimageplugin": [165, 247, 306, 429, 430, 440, 441, 574, 581, 582, 583, 585], "pngimagefil": [165, 247, 306, 429, 430, 440, 441, 574, 581, 582, 583, 585], "rgba": [165, 247, 306, 429, 430, 440, 441, 575, 581, 582, 583, 585], "1195x1307": 165, "condens": [166, 248, 581], "kept": [166, 248], "inplac": [167, 249, 581], "update_edge_by_index": [167, 249, 307, 581, 585], "weight_fn": [170, 252, 310, 317, 323, 330, 349, 350, 351, 352, 356, 362, 376, 378, 381, 383, 384, 385, 389, 397, 403, 405, 414, 416, 417, 418, 447, 453, 468, 470, 473, 474, 475, 476, 482, 491, 499, 514, 518, 519, 520, 521, 529, 537, 538, 539, 579, 580, 581], "callback": [170, 252, 310, 333, 355, 367, 375, 376, 403, 458, 467, 468, 477, 478, 575, 580, 581], "gettempdir": [170, 252, 310], "rt": [170, 252, 310], "edge_fil": [170, 252, 310], "metadata": [171, 253, 585], "keyword": [171, 253, 531, 581], "source_path": [171, 253], "tmp": [171, 253], "csv": [171, 253], "new_path": [171, 253], "old_path": [171, 253], "assign": [171, 253, 335, 356, 431, 442, 447, 477, 478, 529, 580, 581, 582, 585], "hint": [171, 253, 581], "alloc": [171, 253, 581], "enough": [171, 253], "capac": [171, 253], "store": [171, 253, 531, 533, 583, 585], "prepopul": [171, 253], "optim": [171, 253, 397, 477, 491, 493, 508, 537, 538, 567, 581, 583], "complet": [171, 253, 407, 408, 420, 422, 425, 432, 443, 444, 519, 538, 546, 547, 581, 583], "known": [171, 253, 391, 407, 408, 546, 547, 581, 583], "advanc": [171, 253], "1093x1307": 247, "last": [255, 273, 354, 374, 466, 577, 581, 583], "callabbl": 262, "node_": 262, "represent": [263, 397, 491, 537, 581, 583], "rest": [263, 581], "get_all_edge_data": 280, "alwai": [287, 288, 296, 407, 408, 546, 547, 580, 581], "easili": [288, 581, 585], "undirected_gnp_random_graph": [306, 549, 581], "760x347": 306, "path_graph": [310, 461, 492, 497, 552, 581, 583, 585], "partition_it": 311, "another_block": 311, "parititon_it": 311, "the_second_block": 311, "check_arg": [312, 581], "topolog": [312, 313, 349, 350, 351, 352, 516, 541, 542, 581, 583], "is_act": 312, "get_readi": [312, 313, 315], "sorter": [312, 581], "underli": 312, "mutat": [312, 333, 355, 367, 375, 376, 403, 458, 467, 468, 581, 585], "recommend": 312, "daghascycl": [312, 349, 350, 351, 352, 541, 542], "progress": [312, 314, 315], "regular": [312, 431, 438, 442, 516], "flip": 312, "ones": 312, "certainli": [312, 516], "notabl": [312, 516], "natur": [312, 516], "zero": [312, 408, 516, 529, 539, 547, 581], "valueerror": [312, 313, 323, 346, 357, 360, 361, 362, 364, 377, 378, 388, 415, 448, 451, 452, 453, 455, 469, 470, 481, 516, 519, 538, 581], "partial": [312, 313, 493, 516, 581], "themselv": [312, 313, 516], "were": [312, 516, 581, 583, 585], "circuit": [312, 535, 583], "meaning": [312, 581], "memori": [312, 581], "improv": [312, 341, 371, 390, 463, 484, 505, 517, 578, 581], "undefin": [312, 581], "unblock": 313, "yet": [313, 315, 581], "happen": 313, "amongst": 313, "further": [314, 581], "haven": 315, "default_weight": [317, 323, 330, 356, 362, 378, 381, 383, 384, 385, 389, 397, 405, 414, 416, 417, 418, 447, 453, 470, 473, 474, 475, 476, 482, 491, 514, 518, 520, 521, 529, 537], "sum": [317, 329, 331, 348, 356, 365, 366, 377, 380, 381, 389, 404, 413, 414, 447, 456, 457, 469, 472, 473, 482, 499, 514, 518, 529, 538, 581], "tell": [317, 356, 383, 384, 385, 416, 417, 418, 447, 474, 475, 476, 520, 521], "rust": [317, 356, 383, 384, 385, 416, 417, 418, 447, 474, 475, 476, 520, 521, 578, 579, 580, 581], "extract": [317, 356, 376, 383, 384, 385, 403, 416, 417, 418, 447, 468, 474, 475, 476, 520, 521], "numer": [317, 356, 383, 384, 385, 416, 417, 418, 447, 474, 475, 476, 520, 521, 575, 578, 580, 585], "absenc": [317, 356, 379, 411, 447, 471, 581], "rtype": [317, 331, 356, 366, 380, 413, 457, 472], "min_depth": [318, 324, 357, 363, 448, 454, 581], "cutoff": [318, 324, 357, 363, 448, 454, 581], "multithread": [318, 319, 320, 321, 322, 331, 357, 358, 359, 360, 361, 366, 379, 380, 383, 384, 385, 390, 399, 401, 411, 413, 416, 417, 418, 448, 457, 471, 472, 474, 475, 476, 484, 493, 494, 496, 517, 544, 551, 581], "thread": [318, 319, 320, 321, 322, 331, 357, 358, 359, 360, 361, 366, 379, 380, 383, 384, 385, 390, 399, 401, 411, 413, 416, 417, 418, 448, 457, 471, 472, 474, 475, 476, 484, 493, 494, 496, 517, 544, 551, 577, 581], "pool": [318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 390, 399, 416, 417, 418, 448, 474, 475, 476, 484, 493, 494, 517, 544], "cpu": [318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 383, 384, 385, 390, 399, 401, 416, 417, 418, 448, 474, 475, 476, 484, 493, 494, 496, 517, 544, 551, 577, 579, 581], "tune": [318, 319, 320, 321, 322, 357, 358, 359, 360, 361, 379, 383, 384, 385, 390, 399, 401, 411, 416, 417, 418, 448, 471, 474, 475, 476, 484, 493, 494, 496, 517, 544, 551], "rayon_num_thread": [318, 319, 320, 321, 322, 331, 357, 358, 359, 360, 361, 366, 379, 380, 383, 384, 385, 390, 399, 401, 411, 413, 416, 417, 418, 448, 457, 471, 472, 474, 475, 476, 484, 493, 494, 496, 517, 544, 551, 581], "depth": [318, 324, 339, 354, 355, 357, 363, 374, 375, 448, 454, 466, 467, 515, 581], "regardless": [318, 324, 357, 363, 448, 454], "allpairsmultiplepathmap": [318, 357, 448], "edge_cost_fn": [319, 320, 321, 322, 327, 329, 358, 359, 360, 361, 364, 365, 377, 404, 415, 449, 450, 451, 452, 455, 456, 469, 522], "calcul": [319, 321, 331, 341, 358, 360, 366, 371, 373, 379, 380, 391, 401, 411, 413, 449, 451, 457, 463, 471, 472, 496, 551, 577, 579, 581], "bellman": [319, 320, 329, 330, 358, 359, 365, 415, 449, 450, 456, 522, 581], "ford": [319, 320, 329, 330, 358, 359, 365, 415, 449, 450, 456, 522, 581], "act": [319, 320, 321, 322, 358, 359, 360, 361, 449, 450, 451, 452, 580], "cost": [319, 320, 321, 322, 323, 327, 329, 330, 358, 359, 360, 361, 362, 364, 365, 376, 377, 378, 388, 397, 403, 404, 405, 415, 449, 450, 451, 452, 453, 455, 456, 468, 469, 470, 481, 491, 513, 520, 521, 522, 537, 581], "allpairspathlengthmap": [319, 321, 358, 360, 383, 416, 449, 451, 474, 581], "negativecycl": [319, 320, 329, 330, 358, 359, 365, 449, 450, 456], "neg": [319, 320, 323, 327, 329, 330, 342, 358, 359, 360, 361, 362, 364, 365, 377, 378, 383, 384, 385, 388, 404, 415, 416, 417, 418, 438, 449, 450, 451, 452, 453, 455, 456, 469, 470, 474, 475, 476, 481, 519, 522, 538, 581], "run": [320, 322, 331, 342, 343, 359, 361, 366, 379, 380, 381, 383, 384, 385, 389, 390, 399, 401, 402, 408, 411, 413, 416, 417, 418, 421, 424, 457, 459, 471, 472, 473, 474, 475, 476, 482, 484, 493, 494, 496, 497, 499, 517, 518, 529, 544, 547, 551, 552, 575, 578, 579, 581, 583, 585], "allpairspathmap": [320, 322, 359, 361, 450, 452], "dijkstra": [321, 322, 323, 360, 361, 362, 376, 377, 378, 383, 384, 385, 403, 404, 405, 416, 417, 418, 451, 452, 453, 468, 469, 470, 474, 475, 476, 581], "as_undirect": [323, 330, 362, 378, 379, 383, 384, 385, 401, 405, 411, 418, 470, 498, 551, 581], "isn": [323, 330, 362, 378, 397, 405, 406, 453, 470, 491, 520, 521, 537, 580], "nan": [323, 360, 361, 362, 364, 377, 378, 388, 401, 451, 452, 453, 455, 469, 470, 481, 496, 519, 538, 539, 551, 581], "from_": 324, "repeat": [324, 333, 339, 354, 355, 363, 367, 374, 375, 376, 403, 454, 458, 466, 467, 468], "inner": [324, 339, 363, 454, 581], "articul": [326, 335, 581], "cut": [326, 335, 539, 581], "vertex": [326, 333, 339, 355, 367, 375, 376, 401, 403, 458, 467, 468, 477, 478, 483, 494, 496, 551, 554, 555, 556, 557, 562, 563, 567, 570, 571, 581], "along": [326, 581], "increas": [326, 337, 397, 491, 500, 537, 581], "implicitli": [326, 335, 337, 339, 347, 348, 373, 399, 465, 494, 544], "assum": [326, 335, 337, 339, 347, 348, 373, 399, 465, 494, 544, 581], "loop": [326, 335, 337, 339, 344, 347, 348, 372, 373, 382, 399, 407, 410, 464, 465, 494, 544, 546, 549, 581], "produc": [326, 335, 337, 339, 347, 348, 373, 399, 465, 485, 493, 494, 538, 544, 581], "incorrect": [326, 335, 337, 339, 347, 348, 373, 399, 465, 494, 544, 581], "unexpect": [326, 335, 337, 339, 347, 348, 349, 350, 351, 352, 373, 399, 465, 494, 544, 581], "goal_fn": [327, 364, 455], "estimate_cost_fn": [327, 364, 455], "comput": [327, 329, 331, 335, 341, 344, 364, 365, 366, 371, 372, 377, 380, 381, 388, 389, 390, 399, 401, 404, 412, 413, 414, 455, 456, 457, 463, 464, 469, 472, 473, 481, 482, 484, 494, 496, 499, 501, 513, 514, 517, 518, 529, 538, 539, 540, 544, 545, 551, 575, 581, 583], "estim": [327, 364, 455], "admiss": [327, 364, 455], "never": [327, 344, 364, 372, 455, 464, 564, 581], "overestim": [327, 364, 455], "nearest": [327, 364, 455], "goal": [327, 329, 364, 365, 377, 388, 404, 455, 456, 469, 481, 513, 580, 581], "seed": [328, 394, 397, 406, 407, 408, 409, 410, 488, 491, 493, 500, 531, 532, 537, 546, 547, 548, 549, 581], "initial_graph": [328, 406, 581], "barab\u00e1si": [328, 406, 581], "albert": [328, 406, 581], "preferenti": [328, 406, 581], "grown": [328, 406, 578, 585], "l": [328, 406, 483, 529, 531, 581], "r": [328, 406, 437, 500, 529, 577, 578, 581], "emerg": [328, 406], "scale": [328, 336, 340, 341, 368, 370, 371, 395, 396, 397, 406, 435, 460, 462, 463, 489, 490, 491, 534, 536, 537, 575, 581], "network": [328, 341, 380, 397, 399, 406, 408, 413, 472, 491, 537, 547, 577, 578, 581, 585], "scienc": [328, 341, 406], "286": [328, 406], "pp": [328, 406], "509": [328, 406], "512": [328, 406], "1999": [328, 406, 499, 529], "star_graph": [328, 406, 581], "star": [328, 406, 434, 438, 446, 581], "spfa": [329, 330, 365, 415, 456, 522, 581], "heurist": [329, 330, 365, 386, 387, 402, 415, 456, 477, 479, 480, 497, 505, 506, 510, 522, 552, 581], "wit": 330, "parallel_threshold": [331, 366, 379, 380, 383, 384, 385, 401, 411, 413, 416, 417, 418, 457, 471, 472, 474, 475, 476, 493, 496, 551, 581], "50": [331, 366, 380, 397, 413, 457, 472, 491, 493, 537, 581], "fraction": [331, 341, 366, 371, 380, 413, 457, 463, 472, 581], "through": [331, 366, 380, 413, 457, 472, 581, 582, 583], "math": [331, 366, 380, 413, 457, 472, 581], "c_b": [331, 366, 380, 413, 457, 472, 581, 582], "sum_": [331, 341, 366, 371, 380, 401, 413, 457, 463, 472, 496, 500, 551, 581, 582], "frac": [331, 341, 366, 371, 380, 397, 399, 401, 413, 457, 463, 472, 491, 494, 496, 500, 537, 551, 581, 582], "sigma": [331, 366, 380, 413, 457, 472, 581, 582], "ulrik": [331, 366, 380, 408, 413, 457, 472, 509, 547, 581], "brand": [331, 366, 380, 408, 413, 457, 472, 509, 547, 581], "journal": [331, 366, 381, 414, 438, 457, 473, 499, 539, 581], "mathemat": [331, 366, 457, 581], "sociologi": [331, 366, 381, 414, 457, 473, 581], "163": [331, 366, 457, 581], "177": [331, 366, 457, 581], "2001": [331, 366, 457, 581], "abov": [331, 366, 379, 380, 383, 384, 385, 390, 401, 408, 411, 413, 416, 417, 418, 421, 424, 457, 471, 472, 474, 475, 476, 484, 496, 517, 547, 551, 580, 581, 583, 585], "env": [331, 366, 379, 380, 401, 411, 413, 457, 471, 472, 496, 551], "var": [331, 366, 379, 380, 401, 411, 413, 457, 471, 472, 496, 551], "distinct": [331, 366, 380, 413, 422, 425, 457, 472, 507, 583], "breadth": [332, 333, 334, 367, 458, 581], "bf": [332, 333, 334, 367, 458], "bfspredecessor": 332, "visitor": [333, 355, 367, 375, 376, 403, 458, 467, 468, 553, 560, 566, 581], "pseudo": [333, 354, 355, 367, 374, 375, 376, 403, 458, 466, 467, 468], "code": [333, 354, 355, 367, 374, 375, 376, 403, 429, 430, 440, 441, 458, 466, 467, 468, 578, 581, 583, 585], "annot": [333, 355, 367, 375, 376, 403, 458, 467, 468, 581], "event": [333, 355, 367, 375, 376, 403, 458, 467, 468, 553, 560, 561, 566, 568, 569, 581], "white": [333, 355, 367, 375, 458, 467, 585], "grai": [333, 355, 367, 375, 458, 467, 557], "equeu": [333, 367, 458], "q": [333, 367, 376, 403, 458, 468], "\u00f8": [333, 354, 367, 374, 376, 403, 458, 466, 468], "dequeu": [333, 367, 458], "adj": [333, 355, 367, 375, 376, 403, 458, 467, 468, 580, 581], "els": [333, 354, 355, 367, 374, 375, 376, 403, 458, 466, 467, 468, 574, 580, 581, 583, 585], "insid": [333, 355, 367, 375, 376, 403, 458, 467, 468, 553, 560, 566], "stop": [333, 342, 355, 367, 375, 376, 377, 381, 386, 387, 389, 397, 402, 403, 404, 414, 458, 467, 468, 469, 473, 479, 480, 482, 491, 497, 499, 505, 510, 514, 529, 537, 552, 573, 581], "immedi": [333, 355, 367, 375, 376, 389, 403, 458, 467, 468, 482, 501, 514, 581], "exploit": [333, 355, 367, 375, 376, 403, 458, 467, 468], "exit": [333, 355, 367, 375, 376, 403, 458, 467, 468, 581], "earli": [333, 355, 367, 375, 376, 403, 458, 467, 468], "stopsearch": [333, 355, 367, 375, 376, 403, 458, 467, 468], "prune": [333, 355, 367, 375, 376, 403, 458, 467, 468, 572], "prunesearch": [333, 355, 367, 375, 376, 403, 458, 467, 468], "visit": [333, 355, 367, 375, 386, 387, 402, 458, 467, 479, 480, 497, 505, 510, 552, 581], "treeedgesrecord": [333, 355, 367, 375, 458, 467, 581], "tree_edg": [333, 355, 367, 375, 458, 467, 561, 581], "append": [333, 355, 367, 375, 385, 418, 421, 424, 428, 437, 439, 458, 467, 476, 581, 582], "vi": [333, 355, 367, 375, 458, 467, 581], "chosen": [333, 339, 354, 355, 367, 374, 375, 376, 403, 458, 466, 467, 468], "invok": [333, 355, 367, 375, 376, 403, 458, 467, 468, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571], "subclass": [333, 355, 367, 375, 376, 403, 458, 467, 468, 581], "bfssuccessor": [334, 581], "disconnect": [335, 401, 496, 539, 551, 581], "vertic": [335, 421, 422, 424, 425, 459, 483, 501, 516, 563, 581, 585], "first_nod": [336, 368, 460], "horizont": [336, 368, 460], "center": [336, 340, 368, 370, 394, 395, 396, 397, 423, 426, 433, 434, 445, 446, 460, 462, 488, 489, 490, 491, 532, 534, 536, 537], "aspect_ratio": [336, 368, 460], "3333333333333333": 336, "bipartit": [336, 368, 409, 459, 460, 502, 545, 548, 581], "left": [336, 368, 409, 430, 441, 460, 500, 509, 548], "orient": [336, 339, 368, 399, 460], "ratio": [336, 341, 368, 371, 460, 463, 581], "width": [336, 368, 460, 575], "height": [336, 368, 460], "pos2dmap": [336, 340, 368, 370, 394, 395, 396, 460, 462, 488, 489, 490, 532, 534, 536, 575, 580, 581], "cartesian": [338, 369, 461, 581], "product": [338, 369, 398, 461, 492, 581], "productnodemap": [338, 369, 398, 461, 492], "chain": [339, 342, 581], "decomposit": [339, 581], "deriv": [339, 389, 482, 514, 581], "fundament": [339, 348, 581], "manner": [339, 581, 585], "begin": [339, 583], "nontre": 339, "awai": 339, "overlap": [339, 581], "segment": 339, "inform": [339, 409, 533, 548, 577, 581, 585], "schmidt": 339, "jen": 339, "2013": [339, 581], "test": [339, 509, 518, 579, 581], "letter": [339, 577], "113": 339, "241": 339, "244": 339, "elsevi": 339, "doi": [339, 341, 381, 414, 438, 473, 509, 535, 538, 581], "1016": [339, 438, 538, 581], "j": [339, 422, 425, 435, 499, 500, 581], "ipl": [339, 581], "016": [339, 581], "circular": [340, 370, 462], "wf_improv": [341, 371, 463], "close": [341, 371, 397, 463, 491, 535, 537, 581], "reciproc": [341, 371, 463, 581], "averag": [341, 356, 371, 388, 401, 447, 463, 481, 496, 513, 551, 581], "distanc": [341, 371, 379, 384, 385, 397, 401, 411, 417, 418, 429, 430, 440, 441, 463, 471, 475, 476, 491, 496, 500, 519, 531, 537, 538, 551, 567, 569, 577, 581], "reachabl": [341, 354, 371, 374, 388, 463, 466, 481, 513, 581], "reach": [341, 371, 377, 381, 389, 404, 414, 463, 469, 473, 482, 499, 514, 529, 581], "altern": [341, 371, 463, 580, 582, 585], "formula": [341, 371, 463], "actor": [341, 371, 463], "who": [341, 371, 463, 581, 585], "wf": [341, 371, 463], "c_": [341, 371, 463], "wasserman": 341, "faust": 341, "k": [341, 346, 347, 348, 373, 388, 397, 437, 438, 465, 481, 491, 513, 537, 575, 581], "1994": 341, "social": [341, 380, 413, 472, 581], "cambridg": 341, "press": 341, "1017": 341, "cbo9780511815478": 341, "color_fn": 342, "collect": [342, 343, 348, 541, 583], "bicolor": 342, "continu": [342, 397, 491, 537, 580, 581], "core": [347, 373, 465, 533, 577, 581], "basi": [348, 581], "minim": [348, 493, 538, 582], "summat": 348, "exclus": 348, "cacm": 348, "491": 348, "paton": 348, "comm": 348, "acm": [348, 499, 518, 539], "12": [348, 438, 575, 578, 579], "sept": 348, "1969": [348, 438], "514": 348, "518": 348, "longest": [349, 350, 351, 352, 390, 484, 517, 581], "unsign": [349, 350, 581], "_": [349, 350, 351, 352, 369, 398, 418, 461, 492, 581], "could": [349, 350, 351, 352, 575, 580, 581, 583, 585], "df": [354, 355, 374, 375, 382, 466, 467, 563], "procedur": [354, 374, 435, 466, 581], "stack": [354, 374, 466], "push": [354, 374, 466], "hasnext": [354, 374, 466], "w": [354, 374, 466, 543], "pop": [354, 374, 466, 567], "span": [354, 466, 520, 521, 538, 581], "examin": [355, 375, 376, 403, 467, 468, 554, 556, 557, 563, 568, 569, 571, 581, 583], "cross": [355, 375, 467, 558, 564, 579], "forward": [355, 375, 467, 564], "parallel_edg": [356, 447, 581], "dag_adjacency_matrix": 356, "determin": [356, 386, 387, 390, 410, 447, 479, 480, 484, 501, 502, 505, 506, 510, 516, 517, 539, 549, 581], "min": [356, 376, 403, 447, 468, 539, 581, 582], "caus": [356, 447, 508, 581], "behavior": [356, 447, 581], "max": [356, 390, 421, 424, 447, 484, 517, 518, 581, 582], "avg": [356, 447, 581], "digraph_edge_betweenness_centr": 366, "pathlength": [366, 457], "centralitymap": [366, 371, 381, 389, 414, 457, 463, 473, 482, 499, 514, 529, 582], "version": [367, 375, 376, 458, 467, 468, 579, 580, 581], "33333333333333": [368, 460], "graph_1": [369, 398, 461, 492, 581], "graph_2": [369, 398, 461, 492, 581], "graph_product": [369, 398, 461, 492, 581], "in_degre": [373, 581], "out_degre": [373, 581], "infin": [376, 401, 403, 468, 496, 531, 551], "p": [376, 403, 408, 409, 410, 468, 500, 531, 547, 548, 549, 574, 575, 577, 581], "relax": [376, 403, 468, 568], "decreas": [376, 403, 468, 500], "300": [379, 383, 384, 385, 401, 411, 416, 417, 418, 471, 474, 475, 476, 496, 551, 575], "digraph_floyd_warshall_numpi": [379, 471, 580, 581], "definit": [380, 413, 472], "On": [380, 413, 472, 581], "variant": [380, 413, 430, 441, 472, 580, 581], "30": [380, 413, 472, 581], "136": [380, 413, 472, 581], "145": [380, 413, 472, 538, 581], "2008": [380, 413, 472, 581], "digraph_betweenness_centr": [380, 581], "edgecentralitymap": [380, 413, 472], "max_it": [381, 389, 414, 473, 482, 499, 514, 529], "100": [381, 414, 473, 499, 514, 529, 581], "tol": [381, 389, 397, 414, 473, 482, 491, 499, 514, 529, 537], "1e": [381, 389, 397, 414, 473, 482, 491, 499, 514, 529, 537], "06": [381, 389, 397, 414, 473, 482, 491, 514, 529, 537], "eigenvector": [381, 389, 414, 473, 482, 514, 581], "phillip": [381, 414, 473], "bonacich": [381, 414, 473], "famili": [381, 414, 473, 575], "measur": [381, 414, 473, 538, 581, 582, 583], "american": [381, 414, 473], "92": [381, 414, 473], "1170": [381, 414, 473], "1182": [381, 414, 473], "1986": [381, 414, 473, 518], "1086": [381, 414, 473], "228631": [381, 414, 473], "converg": [381, 389, 414, 473, 482, 499, 514, 529], "vector": [381, 389, 414, 473, 482, 499, 514, 529], "smaller": [381, 389, 414, 473, 482, 499, 500, 514, 529, 585], "toler": [381, 389, 414, 473, 482, 499, 514, 529], "multipli": [381, 389, 414, 473, 482, 499, 514, 529], "networkx": [381, 389, 408, 414, 473, 482, 514, 523, 529, 535, 547, 578, 581, 585], "encount": [382, 533, 541, 542, 555, 562, 567, 580, 581], "floyd": [383, 384, 385, 416, 417, 418, 474, 475, 476, 581], "dens": [383, 384, 385, 416, 417, 418, 474, 475, 476], "graph_floyd_warshall_numpi": [384, 385, 476, 581], "inf": [384, 385, 417, 418, 459, 475, 476, 581], "matric": [385, 418, 476, 580, 581], "reconstruct": [385, 418, 476], "among": [385, 418, 476, 518, 538, 577], "reconstruct_path": [385, 418, 476], "curr": [385, 418, 476], "node_match": [386, 387, 402, 479, 480, 497, 505, 510, 552, 581], "edge_match": [386, 387, 402, 479, 480, 497, 505, 510, 552, 581], "id_ord": [386, 387, 402, 479, 480, 497, 505, 506, 510, 552, 581], "call_limit": [386, 387, 402, 479, 480, 497, 505, 510, 552, 581], "compar": [386, 387, 479, 480, 505, 506, 510, 577, 581], "matcher": [386, 387, 479, 480, 505, 506, 510], "graph_a": [386, 387, 402, 479, 480, 497, 505, 506, 510, 552], "graph_b": [386, 387, 402, 479, 480, 497, 505, 506, 510, 552], "y": [386, 387, 390, 431, 442, 479, 480, 484, 505, 506, 510, 517, 581], "evalu": [386, 387, 390, 402, 479, 480, 484, 497, 505, 506, 510, 517, 552], "vied": [386, 387, 479, 480, 506], "vf2": [386, 387, 402, 479, 480, 497, 505, 506, 510, 552, 581], "paper": [386, 387, 402, 430, 441, 459, 479, 480, 485, 493, 497, 505, 506, 510, 552, 581], "bound": [386, 387, 402, 408, 479, 480, 497, 505, 510, 547, 552, 581], "solut": [386, 387, 402, 477, 479, 480, 497, 505, 510, 518, 552, 581], "exce": [386, 387, 402, 421, 424, 437, 479, 480, 497, 505, 510, 552, 581], "ambigu": [387, 480, 510, 561], "term": [387, 480, 510], "fewer": [387, 480, 510], "edge_cost": [388, 481, 513], "kth": [388, 481, 513], "log": [388, 459, 481, 513, 581], "eedg": [388, 481, 513], "alpha": [389, 482, 514, 529, 575, 581], "beta": [389, 482, 500, 514], "1000": [389, 482], "katz": [389, 482, 514, 581], "leo": [389, 482, 514], "statu": [389, 482, 514, 583], "sociometr": [389, 482, 514], "psychometrika": [389, 482, 514], "18": [389, 482, 514, 581], "39": [389, 482, 514, 581], "43": [389, 482, 514], "1953": [389, 482, 514], "springer": [389, 482, 514, 538, 581], "pdf": [389, 459, 482, 485, 499, 514, 529, 574], "1007": [389, 482, 514, 538, 581], "bf02289026": [389, 482, 514], "attenu": [389, 482, 514], "neighbourhood": [389, 482, 514], "roughli": [390, 484, 517], "len": [390, 484, 517, 581, 583], "There": [390, 484, 517, 580, 581, 585], "tradeoff": [390, 484, 517], "relat": [391, 581], "coarsest": [391, 581], "bisimul": [391, 581], "paig": [391, 581], "tarjan": [391, 581], "three": [391, 400, 495, 550, 581], "refin": [391, 581], "relationalcoarsestpartit": [391, 581], "json": [392, 419, 486, 525, 530, 581], "anyth": [392, 486, 525], "unweight": [393, 401, 487, 496, 526, 551, 581], "preset": [393, 477, 478, 487, 526, 581], "nodescountmap": [393, 526], "nlist": [395, 438, 477, 489, 534, 581, 585], "rotat": [395, 489, 534], "shell": [395, 489, 534], "angl": [395, 489, 534], "radian": [395, 489, 534], "resolut": [396, 490, 536], "35": [396, 490, 536], "equidist": [396, 490, 536], "spiral": [396, 490, 536], "compact": [396, 490, 536], "compress": [396, 490, 533, 536, 581], "plot": [396, 490, 536, 581], "po": [397, 438, 477, 491, 500, 531, 537, 575, 580, 581, 585], "repulsive_expon": [397, 491, 537], "adaptive_cool": [397, 491, 537, 581], "num_it": [397, 491, 537], "fruchterman": [397, 491, 537, 581], "reingold": [397, 491, 537, 581], "forc": [397, 491, 537, 581], "simul": [397, 491, 537], "spring": [397, 491, 537, 575], "hold": [397, 491, 537], "repel": [397, 491, 537], "anti": [397, 491, 537], "graviti": [397, 491, 537], "equilibrium": [397, 491, 537], "coordin": [397, 431, 442, 491, 500, 537, 585], "sqrt": [397, 491, 537], "farther": [397, 491, 537], "apart": [397, 491, 537], "repuls": [397, 491, 537], "expon": [397, 491, 537], "cool": [397, 491, 537], "scheme": [397, 491, 537], "linear": [397, 428, 439, 483, 491, 516, 537, 581, 583], "threshold": [397, 491, 500, 531, 537], "Not": [397, 491, 537], "around": [397, 491, 537, 581], "tensor": [398, 492, 581], "fag": 399, "eq": 399, "triangl": [399, 494], "tripl": [399, 494], "count": [399, 581, 583], "cluster": 399, "fagiolo": 399, "physic": [399, 435], "review": [399, 435, 583], "76": 399, "026107": 399, "2007": 399, "merge_nod": [400, 495, 550, 581], "merge_edg": [400, 495, 550, 581], "phase": [400, 495, 550], "n_2": [400, 495, 550], "n_1": [400, 495, 550], "togeth": [400, 420, 495, 533, 550, 562, 563, 567], "ne": [401, 496, 551], "taken": [401, 496, 551, 581], "direccted_path_graph": 402, "stopiter": [402, 497, 552, 581], "purpos": [406, 578, 579], "weak": 406, "direction": [406, 581, 583, 585], "num_edg": [407, 546, 581], "g_": [407, 408, 546, 547, 581], "nm": [407, 546], "erd\u0151": [407, 408, 546, 547], "r\u00e9nyi": [407, 408, 546, 547], "higher": [407, 477, 478, 546, 581], "reproduc": [407, 546, 577, 581], "binomi": [408, 421, 424, 547, 581], "mention": [408, 547], "upper": [408, 547, 581], "fast_gnp_random_graph": [408, 547], "vladimir": [408, 547], "batagelj": [408, 547], "phy": [408, 547], "rev": [408, 547], "71": [408, 547], "036113": [408, 547], "2005": [408, 547], "random_graph": [408, 547, 581], "l49": [408, 547], "l120": [408, 547], "num_l_nod": [409, 548], "num_r_nod": [409, 548], "divid": [409, 548], "disjoint": [409, 515, 548, 581], "right": [409, 424, 428, 430, 431, 441, 500, 509, 548], "stochast": [410, 549, 581], "model": [410, 500, 531, 549, 581, 583], "commun": [410, 549], "membership": [410, 549], "infer": [410, 500, 549], "start_nod": [412, 501], "frontier": [412, 581], "publish": [412, 501, 578, 579, 581], "2006": [412, 501], "cooper": [412, 501], "harvei": [412, 501], "kennedi": [412, 501], "hdl": [412, 501], "net": [412, 501], "1911": [412, 501], "96345": [412, 501], "nullgraph": [412, 501, 503, 511], "invalidnod": [412, 501, 515, 524], "pars": [419, 530, 533, 581], "load": 419, "num_mesh_nod": [420, 443], "num_path_nod": [420, 443], "mesh_weight": [420, 443], "path_weight": [420, 443], "barbel": [420, 581], "mesh": [420, 432, 443, 444, 581], "won": [420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], "recurs": [421, 424, 435, 535, 581], "platform": [421, 424, 578, 581, 585], "64bit": [421, 424, 578, 579], "60": [421, 424, 578], "32bit": [421, 424, 578, 579], "29": [421, 424, 581], "overflowerror": [421, 424, 581], "extra": [421, 424, 428, 437, 439, 581], "greater": [421, 424, 428, 437, 439, 543], "neither": [422, 423, 425, 426, 428, 432, 433, 434, 439, 443, 444, 445, 446, 583], "propag": [424, 428, 431], "toward": [424, 428, 431, 434], "bottom": [424, 428, 431], "row": [428, 431, 439, 442], "col": [428, 431, 439, 442, 581], "grid": [428, 431, 439, 442, 581], "wise": [428, 439], "trail": [428, 439, 583], "heavi": [429, 430, 440, 441, 581], "hex": [429, 440, 581], "fig": [429, 430, 440, 441, 574], "arxiv": [429, 430, 435, 440, 441, 493, 581], "ab": [429, 430, 435, 440, 441, 493, 581], "1907": [429, 430, 440, 441], "09528": [429, 430, 440, 441], "ascii": [429, 430, 440, 441], "diagram": [429, 430, 440, 441], "f": [429, 430, 435, 440, 441, 582, 583, 585], "odd": [429, 430, 440, 441, 581], "graphviz_draw": [429, 430, 440, 441, 580, 581, 582, 583, 585], "1043x155": [429, 440], "squar": [430, 441, 581], "four": [430, 441, 577, 581], "frequenc": [430, 441], "467x539": [430, 441], "with_posit": [431, 442, 581], "hexagon": [431, 442, 581, 582], "lattic": [431, 442, 581, 582], "boundari": [431, 442, 580, 581], "emb": [431, 442], "plane": [431, 442, 509], "side": [431, 442], "inward": 434, "dorogovtsev": [435, 581], "goltsev": [435, 581], "mend": [435, 581], "pseudofract": 435, "65": 435, "066122": 435, "2002": 435, "cond": 435, "mat": 435, "0112143": 435, "branching_factor": 437, "ari": [437, 581], "cannot": [437, 518, 581], "petersen": [438, 581], "2n": 438, "3n": 438, "watkin": 438, "denot": [438, 583], "extern": [438, 580], "polygon": 438, "shift": 438, "shell_layout": [438, 477, 581, 585], "7": [438, 477, 478, 485, 578, 585], "m\u00f6biu": 438, "kantor": 438, "13": [438, 578], "14": [438, 578], "theorem": [438, 485, 581], "tait": 438, "combinatori": 438, "theori": [438, 585], "152": 438, "164": 438, "s0021": 438, "9800": 438, "69": 438, "80116": 438, "column": [442, 581], "lollipop": [443, 581], "nor": 443, "graph_edge_betweenness_centr": 457, "noga": [459, 581], "alon": [459, 581], "lett": 459, "85": [459, 529], "2003": [459, 577, 581], "www": [459, 485, 499], "tau": 459, "ac": 459, "il": 459, "nogaa": 459, "lex2": 459, "graph_betweenness_centr": [472, 581], "strategi": [477, 478, 581], "aka": [477, 478], "slf": [477, 478], "dynam": [477, 478, 580, 581], "tie": [477, 478, 581], "uncolor": [477, 478, 581], "subset": [477, 478, 518, 529, 554, 557, 581], "problem": [477, 538, 577], "preset_color_fn": [477, 478, 581], "manual": [477, 478, 579, 581], "generalized_petersen_graph": [477, 581, 585], "draw": [477, 574, 575, 581], "node_color": [477, 575, 581, 582], "greedili": [478, 581], "cycle_graph": [478, 485, 581, 583], "edge_color": [478, 485, 575, 581], "edge_ab": [483, 581], "edge_ac": [483, 581], "edge_bc": [483, 581], "edge_ad": [483, 581], "out_graph": [483, 581], "out_edge_map": [483, 581], "simple_path_pair": 484, "longest_path": [484, 581], "z": 484, "misra": [485, 581], "gri": [485, 581], "proof": [485, 581], "vize": [485, 581], "1992": [485, 581], "utexa": 485, "edu": [485, 499, 509, 529], "psp": 485, "numpathsmap": 487, "trial": 493, "modul": [493, 581], "approxim": [493, 538, 581], "token": [493, 581], "swap": [493, 581], "permut": [493, 581], "miltzow": [493, 581], "et": [493, 577, 581], "al": [493, 577, 581], "2016": [493, 581], "1602": [493, 581], "05150": [493, 581], "rearrang": 493, "nstart": [499, 529], "08": 499, "hub": [499, 581], "author": [499, 581], "kleinberg": 499, "authorit": 499, "hyperlink": 499, "46": 499, "cornel": 499, "home": 499, "kleinber": 499, "auth": 499, "hyperbol": [500, 581], "geometr": [500, 531, 581], "usual": 500, "exp": 500, "sigmoid": 500, "arccosh": 500, "x_0": 500, "x_j": 500, "dimens": [500, 531], "x_d": 500, "th": 500, "hyperboloid": 500, "x_1": 500, "sharp": 500, "nonneg": [500, 539], "probabilist": 500, "quadrat": [501, 581], "alp\u00e1r": 505, "j\u00fcttner": 505, "p\u00e9ter": 505, "madarasi": 505, "longer": [508, 578, 581], "global": 508, "local": [508, 579, 581], "planar": [509, 581], "iff": 509, "intersect": 509, "2009": [509, 577], "citeseerx": 509, "ist": 509, "psu": 509, "viewdoc": 509, "summari": 509, "217": 509, "9208": 509, "weakli": [511, 528, 576, 581], "first_lay": [515, 581], "index_output": [515, 581], "lexicograph": 516, "ti": 516, "affect": 516, "comparison": [516, 580, 581, 585], "max_cardin": 518, "verify_optimum": 518, "cardin": 518, "blossom": 518, "augment": 518, "primal": 518, "dual": [518, 581], "invent": 518, "jack": 518, "edmond": 518, "untest": 518, "optimum": 518, "mostli": [518, 581, 585], "ofth": 518, "zvi": 518, "galil": 518, "survei": 518, "metric": [519, 531, 538, 581], "closur": [519, 538, 581], "forest": [520, 521], "kruskal": [520, 521], "keep_attribut": [523, 581], "__networkx_node__": [523, 581], "person": 529, "dangl": 529, "page": [529, 581], "brin": 529, "motwani": 529, "winograd": 529, "citat": 529, "rank": [529, 581], "bring": 529, "stanford": 529, "digit": 529, "technologi": 529, "1998": 529, "dbpub": 529, "8090": 529, "showdoc": 529, "fulltext": 529, "66": 529, "tri": [529, 581], "damp": 529, "uniform": 529, "distribut": [529, 579, 581], "outedg": 529, "accord": 529, "irreduc": 529, "radiu": [531, 575, 581], "dim": 531, "unit": 531, "cube": [531, 581], "uniformli": 531, "euclidean": 531, "minkowski": 531, "meet": 531, "graphml": [533, 581], "comprehens": 533, "easi": [533, 561], "properti": [533, 580, 583], "flexibl": [533, 585], "mechan": 533, "graphdraw": 533, "mix": 533, "unidirect": 533, "hyperedg": 533, "nest": 533, "port": 533, "domain": 533, "runtimeerror": [533, 581], "elementari": [535, 581], "johnson": [535, 577, 581], "1137": 535, "0204007": 535, "l98": 535, "l222": 535, "terminal_nod": 538, "steiner": [538, 581], "regard": 538, "termin": [538, 581], "due": [538, 579, 581], "rather": [538, 581], "kou": [538, 581], "markowski": [538, 581], "berman": [538, 581], "fast": [538, 581], "acta": 538, "informatica": 538, "141": 538, "1981": [538, 581], "articl": [538, 581], "bf00288961": [538, 581], "kurt": 538, "mehlhorn": 538, "0020": [538, 581], "0190": [538, 581], "88": [538, 581], "90066": [538, 581], "stoer": [539, 581], "wagner": [539, 581], "stoer_simple_1997": 539, "conid": 539, "usiz": [539, 581], "mechthild": 539, "frank": [539, 581], "44": 539, "585": [539, 581], "591": 539, "1997": 539, "strongli": [540, 581], "kosaraju": 540, "earliest": 541, "reduct": [543, 581], "prime": 543, "pyvalueerror": 543, "action": [553, 560, 566, 581], "queue": [554, 557, 567, 581], "record": 561, "disregard": 561, "leaf": 563, "upon": [568, 569, 581], "emit": [568, 569, 581], "node_attr_fn": [574, 581, 582, 583, 585], "edge_attr_fn": [574, 583], "image_typ": 574, "pillow": [574, 581], "instruct": [574, 583], "disk": 574, "canon": 574, "cmap": [574, 575], "cmapx": 574, "cmapx_np": 574, "dia": 574, "gd": 574, "gd2": 574, "gif": 574, "hpgl": 574, "imap": 574, "imap_np": 574, "ismap": 574, "jpe": 574, "jpeg": 574, "jpg": 574, "mif": 574, "mp": 574, "pcl": 574, "pic": 574, "plain": 574, "ext": 574, "ps2": 574, "svg": 574, "svgz": 574, "vml": 574, "vmlz": 574, "vrml": 574, "vtx": 574, "wbmp": 574, "xdot": 574, "xlib": 574, "twopi": 574, "neato": [574, 582, 585], "circo": 574, "fdp": [574, 581], "sfdp": [574, 581], "yellow": [574, 581, 585], "blue": [574, 581, 585], "red": [574, 581], "directed_star_graph": [574, 581], "rgb": [574, 575, 581], "766x747": [574, 581], "arrow": [575, 581, 583, 585], "kwd": 575, "matplotlib": [575, 581, 582, 585], "mpl": [575, 581], "layout_funct": 575, "arrowhead": 575, "arrowstyl": 575, "arrowshead": 575, "arrow_s": [575, 580], "fancyarrowpatch": 575, "mutation_scal": 575, "info": 575, "node_list": [575, 580], "node_s": [575, 581], "vmin": [575, 581, 582], "vmax": [575, 581, 582], "scatter": 575, "1f78b4": [575, 581], "node_shap": 575, "shape": [575, 581, 582, 585], "pyplot": [575, 581, 582, 585], "marker": 575, "h": [575, 583], "transpar": 575, "colormap": [575, 582], "intens": 575, "linewidth": 575, "symbol": 575, "border": 575, "edge_cmap": 575, "edge_vmin": 575, "edge_vmax": 575, "word": 575, "solid": 575, "dash": 575, "linestyl": 575, "Or": [575, 581, 585], "font_siz": 575, "fontsiz": 575, "font_color": 575, "font": 575, "ie": 575, "font_weight": 575, "font_famili": 575, "san": 575, "serif": 575, "legend": 575, "connectionstyl": [575, 581], "curv": 575, "arc": [575, 583, 585], "rad": 575, "arc3": 575, "backend": [575, 580], "jupyt": 575, "plt": [575, 581, 582, 585], "competit": 577, "against": [577, 581], "popular": 577, "igraph": 577, "networkit": 577, "task": 577, "machin": 577, "intel": 577, "i9": 577, "9900k": 577, "60ghz": 577, "eight": 577, "16": [577, 581], "32gb": 577, "ram": 577, "usa": 577, "road": 577, "9th": 577, "dimac": 577, "challeng": 577, "dataset": 577, "demetrescu": 577, "datta": 577, "third": 577, "citi": 577, "rome": 577, "lastli": 577, "fourth": 577, "answer": 577, "arg": 577, "databas": 577, "de": 577, "santo": 577, "goldberg": 577, "ninth": 577, "foggia": 577, "sanson": 577, "vento": 577, "recognit": 577, "1067": 577, "1079": 577, "studi": 578, "variou": [578, 580, 581], "licens": 578, "apach": 578, "host": 578, "inher": 578, "safeti": [578, 579], "significantli": [578, 581], "oppos": [578, 581], "pre": [578, 579, 581], "binari": [578, 581, 585], "linux": [578, 579, 581], "x86": 578, "x86_64": [578, 579, 581], "aarch64": [578, 579, 581], "s390x": [578, 579, 581], "ppc64le": [578, 579, 581], "maco": [578, 579, 581], "arm64": [578, 579, 581], "window": [578, 579], "wish": 578, "expos": [578, 580, 581], "renam": [578, 581], "legaci": [578, 581], "now": [578, 581, 582, 583, 585], "usag": [578, 585], "came": 578, "tutori": [578, 582, 583], "guid": [578, 580, 585], "introduct": [578, 579, 581, 584], "contribut": [578, 581], "gap": [578, 581], "benchmark": 578, "pypi": [579, 581], "i686": 579, "64": [579, 581], "rustup": 579, "simpler": 579, "reli": [579, 581, 585], "properli": [579, 581], "prebuilt": 579, "pep": 579, "517": [579, 581], "setuptool": 579, "again": [579, 581, 585], "strive": 579, "broken": 579, "level": [579, 580], "architectur": 579, "manylinux": 579, "2014": 579, "pp64le": 579, "musl": [579, 581], "newer": [579, 581], "ci": [579, 581], "upstream": [579, 581], "correctli": [579, 581], "best": [579, 583], "introductori": 580, "impli": [580, 583], "inspir": 580, "util": 580, "offer": 580, "decis": 580, "aspect": 580, "put": 580, "nx": [580, 581], "multidigraph": 580, "my_node_a": 580, "my_node_b": 580, "constraint": [580, 581, 585], "That": [580, 581], "migrat": 580, "similarli": [580, 585], "dist_matrix": 580, "extend_from": 580, "concis": 580, "graph_": 580, "digraph_": 580, "pretti": 580, "referenc": 580, "concept": [580, 581, 583], "dedic": [580, 585], "fridai": [580, 581, 585], "mondai": [580, 581, 585], "But": [580, 581, 583], "analog": [580, 581], "5pm": 580, "2pm": 580, "room": 580, "714": 580, "accessor": 580, "dtype": [580, 581], "astyp": 580, "to_numpy_matrix": 580, "to_numpy_arrai": 580, "to_numpy_recarrai": 580, "to_scipy_sparse_matrix": 580, "to_pandas_adjac": 580, "scipi": 580, "csr": 580, "spars": [580, 581], "per": [580, 581], "digraph_adjacency_matrix": [580, 581], "graph_adjacency_matrix": [580, 581], "networkx_draw": 580, "pygraphviz": 580, "varieti": 580, "strictli": [580, 581, 583], "retwork": [580, 581], "draw_networkx": 580, "fork": 580, "nodelist": 580, "arrows": 580, "mpl_drawer": [580, 581], "draw_networkx_edge_label": 580, "networkx_convert": [580, 581], "respons": 580, "accordingli": 580, "unwant": 580, "convert_rustworkx_to_networkx": 580, "isinst": 580, "matur": 580, "wide": [580, 585], "younger": 580, "enhanc": 580, "request": [580, 581], "issu": [580, 581], "priorit": 580, "mirror": 581, "karate_club_graph": 581, "zachari": 581, "karat": 581, "club": 581, "commonli": 581, "circular_layout": 581, "neighbors_undirect": 581, "obtain": 581, "irrespect": 581, "abil": 581, "gzip": 581, "read_graphml": 581, "graphmlz": 581, "gz": 581, "recognis": 581, "decompress": 581, "life": 581, "shuffl": 581, "restor": 581, "node_link_json": 581, "1243": 581, "typo": 581, "spell": 581, "checker": 581, "invoc": 581, "lint": 581, "session": 581, "bugfix": 581, "inadvert": 581, "to_dot": 581, "incorrectli": 581, "escap": 581, "quot": 581, "color_nod": [581, 582], "_node": 581, "422952": 581, "directed_hexagonal_lattice_graph": 581, "irregular": 581, "highlight": 581, "expans": 581, "previous": 581, "expand": 581, "abi": 581, "offici": 581, "importantli": 581, "70": 581, "promot": 581, "tier": 581, "has_nod": 581, "dag_algo": 581, "from_node_link_json_fil": 581, "parse_node_link_json": 581, "polynomi": 581, "brute": 581, "magnitud": 581, "address": 581, "experiment": 581, "christian": 581, "komusiewicz": 581, "sommer": 581, "gain": 581, "discuss": [581, 585], "lemma": 581, "thu": 581, "intermedi": 581, "speedup": 581, "40": 581, "nameabl": 581, "dorogovtsev_goltsev_mendes_graph": 581, "stablegraph": 581, "graphmap": 581, "contractnod": 581, "trait": 581, "graph_ext": 581, "contract_nod": [581, 583], "hasparalleledgesdirect": 581, "hasparalleledgesundirect": 581, "has_parallel_edg": 581, "noderemov": 581, "matrixgraph": 581, "hyperbolic_random_graph": 581, "sampl": 581, "sinh": 581, "14159": 581, "55": 581, "particularli": 581, "is_semi_connect": 581, "semi": 581, "indexpartitionblock": 581, "hexagonal_lattice_graph_weight": 581, "remove_node_retain_edg": 581, "suppli": 581, "greedy_node_color_with_coloring_strategi": 581, "greedy_edge_color_with_coloring_strategi": 581, "preset_color": 581, "directed_sbm_random_graph": 581, "undirected_sbm_random_graph": 581, "sbm_random_graph": 581, "wheel": 581, "storag": 581, "onlin": 581, "meaningless": 581, "sizeabl": 581, "condition": 581, "temporari": 581, "find_cycl": 581, "bondari": 581, "didn": [581, 583], "smartli": 581, "special": 581, "scenario": 581, "nlabel": 581, "tooltip": 581, "ntooltip": 581, "107x202": 581, "750": 581, "draw_edg": 581, "offset": 581, "draw_edge_label": 581, "align": 581, "774": 581, "panicexcept": 581, "1117": 581, "1130": 581, "long": [581, 585], "1140": 581, "blog": 581, "changelog": 581, "2024": 581, "m1": 581, "switch": 581, "tox": 581, "downgrad": 581, "directed_barabasi_albert_graph": 581, "barabasi_albert_graph": 581, "starting_graph": 581, "20": 581, "graph_all_shortest_path": 581, "shortest_path": 581, "heavy_square_graph": 581, "bridges_set": 581, "clear_edg": 581, "edge_indices_from_endpoint": 581, "filter_nod": 581, "abstract": 581, "filter_edg": 581, "substitute_node_with_subgraph": [581, 583], "sub_graph": 581, "___": 581, "stratifi": 581, "graphnotbipartit": 581, "directed_random_bipartite_graph": 581, "undirected_random_bipartite_graph": 581, "bipartite_layout": 581, "66666667": 581, "entir": 581, "invalidmap": 581, "graph_token_swapp": 581, "feasibl": 581, "path_exist": 581, "greedy_node_color_with_preset_color": 581, "greedy_node_color": 581, "tr": 581, "ref": 581, "wikipedia": 581, "wiki": 581, "msrv": 581, "56": 581, "adopt": [581, 585], "difficult": 581, "catch": 581, "unhandl": 581, "token_swapp": 581, "vec": 581, "nodeindex": 581, "mapnotposs": 581, "ungraph": 581, "from_edg": 581, "hashmap": 581, "err": 581, "panick": 581, "pllatform": 581, "infrastructur": 581, "hopefulli": 581, "shouldn": 581, "likelihood": 581, "precompil": [581, 585], "polici": 581, "74": 581, "deprecationwarn": 581, "graph_all_simple_path": 581, "digraph_all_simple_path": 581, "955": 581, "gnp_random_graph": 581, "pin": 581, "seri": [581, 583], "unreleas": 581, "soon": 581, "prevent": [581, 585], "manag": 581, "older": 581, "incompat": 581, "forcibli": 581, "alongsid": 581, "make_symmetr": 581, "83x443": 581, "5x5": 581, "grid_graph": 581, "btw": [581, 582], "hub_scor": 581, "650": 581, "2f": [581, 582], "centrality_scor": 581, "binomial_tree_graph": 581, "31": 581, "28": 581, "path_set": 581, "longest_simple_path_multiple_target": 581, "hashset": 581, "pagerank_scor": 581, "gnm_random_graph": 581, "random_geometric_graph": 581, "bread": 581, "find_predecessor_node_by_edg": 581, "colorbar": [581, 582], "rcparam": [581, 582], "figsiz": [581, 582], "gca": [581, 582], "sm": [581, 582], "cm": [581, 582], "scalarmapp": [581, 582], "norm": [581, 582], "titl": [581, 582], "1500x1000": [581, 582], "empty_graph": 581, "directed_empty_graph": 581, "directed_complete_graph": 581, "mesh_graph": [581, 585], "directed_mesh_graph": 581, "gnp_directed_random_graph": 581, "gnp_undirected_random_graph": 581, "situat": 581, "48": 581, "well": 581, "facilit": 581, "deepcopi": 581, "836": 581, "flatten": 581, "744": 581, "node_remov": 581, "reflect": 581, "certain": 581, "696": 581, "formerli": 581, "notif": 581, "manylinux2014": 581, "parser": 581, "cut_val": 581, "orang": 581, "graph_tensor_product": 581, "digraph_tensor_product": 581, "all_simple_paths_multiple_target": 581, "algo": 581, "dictmap": 581, "preserve_attribut": 581, "k_5": 581, "bfs_undirect": 581, "xml": [581, 585], "manylinux2010": 581, "glibc": 581, "sdist": 581, "41": 581, "rustc": 581, "bfsssuccessor": 581, "slice": 581, "__getitem__": 581, "did": 581, "590": 581, "amd": 581, "digraph_cartesian_product": 581, "graph_cartesian_product": 581, "throughout": 581, "eventu": 581, "account": 581, "barbell_graph": 581, "graph_bfs_search": 581, "digraph_bfs_search": 581, "remain": [581, 585], "comp": 581, "150": 581, "color_edg": 581, "edges_in_chain": 581, "idx": 581, "adj_matrix": 581, "1j": 581, "2j": 581, "5j": 581, "multi": 581, "guard": 581, "abc": 581, "graph_dfs_search": 581, "digraph_dfs_search": 581, "graph_dijkstra_search": 581, "digraph_dijkstra_search": 581, "dijkstratreeedgesrecord": 581, "discover_vertex": 581, "edge_relax": 581, "incident_edg": [581, 585], "incident_edge_index_map": 581, "achiev": 581, "full_rary_tre": 581, "lollipop_graph": [581, 585], "freed": 581, "workspac": 581, "downstream": 581, "stabil": 581, "necessarili": 581, "turquois": 581, "fuchsia": 581, "rx_graph": 581, "arguabl": 581, "desir": 581, "undirected_gnm_random_graph": 581, "42": [581, 585], "d_mat": 581, "avg_shortest_path": 581, "directed_binomial_tree_graph": 581, "overflow": 581, "panic": 581, "exceed": 581, "457": 581, "increment": 581, "515": 581, "oversight": 581, "525": 581, "heavy_hex_graph": [581, 585], "directed_heavy_hex_graph": 581, "directed_heavy_square_graph": 581, "pyo3_runtim": 581, "452": 581, "graph_union": 581, "digraph_union": 581, "unifi": 581, "a_0": 581, "a_1": 581, "b_0": 581, "b_1": 581, "find_node_by_weight": 581, "432": 581, "429": 581, "hash": 581, "367": 581, "slew": 581, "1080": 581, "0022250x": 581, "9990249": 581, "secondli": 581, "edge_subgraph": 581, "ap": 581, "prx": 581, "1103": 581, "physrevx": 581, "011022": 581, "read_edge_list": [581, 585], "first_edg": 581, "second_edg": 581, "original_graph": 581, "_sourc": 581, "_target": 581, "_weight": 581, "17": 581, "21": 581, "22": 581, "23": 581, "26": 581, "27": 581, "to_direct": 581, "rework": 581, "graph_floyd_warshal": 581, "digraph_floyd_warshal": 581, "control": 581, "undirected_graph": 581, "digraph_num_shortest_paths_unweight": 581, "graph_num_shortest_paths_unweight": 581, "directed_grid_graph": 581, "33": 581, "path_length": 581, "lambda_": 581, "fashion": 581, "explicit": 581, "408": 581, "digraph_dijkstra_shortest_path": 581, "graph_dijkstra_shortest_path": 581, "digraph_all_pairs_dijkstra_shortest_path": 581, "graph_all_pairs_dijkstra_shortest_path": 581, "387": 581, "consecut": 581, "373": 581, "347": 581, "plethora": 581, "drawer": 581, "spring_layout": [581, 585], "preclud": 581, "95": 581, "random_layout": 581, "graph_random_layout": 581, "diraph_random_layout": 581, "circl": [581, 582, 585], "fixeds": 581, "515x509": 581, "immut": 581, "coeffici": 581, "digraph_all_pairs_dijkstra_path_length": 581, "graph_all_pairs_dijkstra_path_length": 581, "edge_index_map": [581, 585], "source_node_index": 581, "target_node_index": 581, "find_successors_by_edg": 581, "find_predecessors_by_edg": 581, "mst": 581, "tweak": 581, "00ffff": 581, "spiral_layout": 581, "795x1031": 581, "332x333": 581, "write_edge_list": 581, "digraph_k_shortest_path_length": 581, "graph_k_shortest_path_length": 581, "digraph_dijkstra_shortest_path_length": 581, "graph_dijkstra_shortest_path_length": 581, "predecessor_indic": 581, "dispatch": 581, "mistakenli": 581, "appl": 581, "arm": 581, "outward": 581, "371x155": 581, "is_maxmimal_match": 581, "disallow": 581, "145x291": 581, "143x291": 581, "queri": 581, "__str__": [581, 585], "human": 581, "readabl": [581, 585], "__hash__": 581, "unhash": 581, "update_edg": [581, 585], "garbag": 581, "collector": 581, "know": 581, "integr": [581, 585], "250": 581, "pickl": 581, "multiprocess": 581, "lookup": 581, "graph_astar_shortest_path": 581, "digraph_astar_shortest_path": 581, "digraph_dfs_edg": 581, "graph_dfs_edg": 581, "lock": 581, "meant": 581, "focu": 581, "is_symmetr": 581, "directed_gnm_random_graph": 581, "remove_edges_from": [581, 585], "removed_edges_from": 581, "graph_distance_matrix": 581, "digraph_distance_matrix": 581, "insert_node_on_in_edg": 581, "insert_node_on_out_edg": 581, "insert_node_on_in_edges_multipl": 581, "insert_node_on_out_edges_multipl": 581, "contigu": [581, 582, 585], "fortran": 581, "easier": 581, "defer": 581, "convers": 581, "bottleneck": 581, "especi": [581, 585], "across": 581, "172": 581, "eas": 581, "graphivz": 581, "compos": 581, "warshal": 581, "segfault": 581, "backtrac": 581, "problemat": 581, "thank": 581, "contributor": 581, "find_adjacent_node_by_edg": 581, "remove_nodes_from": [581, 585], "No": 581, "export": 581, "pprint": 582, "007277212457600987": 582, "02047046385621779": 582, "07491079688119466": 582, "04242324126690451": 582, "09205321351482312": 582, "magma": 582, "to_hex": 582, "keep_alpha": 582, "1076x910": 582, "explor": 583, "primer": 583, "broader": 583, "restrict": 583, "simultan": 583, "walk": 583, "imposs": 583, "dependency_dag": 583, "job_a": 583, "job_b": 583, "job_c": 583, "job_d": 583, "job_": 583, "job_f": 583, "330x347": 583, "relationship": 583, "topo_sort": 583, "job_index": 583, "sdk": 583, "quantum": 583, "acceler": 583, "routin": 583, "coher": 583, "gate": 583, "reset": 583, "graphic": 583, "q_0": 583, "q_1": 583, "mea": 583, "beyond": 583, "fact": 583, "qubit": 583, "c_0": 583, "c_1": 583, "in_nod": 583, "out_nod": 583, "h_gate": 583, "cx": 583, "cx_gate": 583, "meas_q0": 583, "meas_q1": 583, "q0": 583, "q1": 583, "401x523": 583, "flow": 583, "transform": 583, "hardwar": 583, "translat": 583, "devic": 583, "qpu": 583, "translation_matrix": 583, "rz": 583, "pi": 583, "sx": 583, "insruct": 583, "hardware_instruct": 583, "subcircuit": 583, "gate_index": 583, "edge_v": 583, "equivalent_subcircuit": 583, "map_fn": 583, "401x755": 583, "analyz": 583, "shorter": 583, "bit_nod": 583, "unitari": 583, "simplif": 583, "newest": 583, "nod": 583, "_node_id": 583, "wouldn": 583, "serv": 585, "past": 585, "shorten": 585, "convent": 585, "compris": 585, "green": 585, "first_index_data": 585, "first_index_edgepoint": 585, "helper": 585, "remove_edg": 585, "remove_edge_from_index": 585, "absent": 585, "last_index": 585, "simplic": 585, "graphnod": 585, "graphedg": 585, "edgenod": 585, "popul": 585, "notion": 585, "show": 585, "lolipop_graph": 585, "combined_graph": 585, "new_nod": 585, "spam": 585, "375": 585, "subax1": 585, "subplot": 585, "121": 585, "subax2": 585, "122": 585, "attr_dict": 585, "fill_color": 585, "syndrom": 585, "elif": 585, "fontcolor": 585, "2132x2297": 585, "decid": 585, "few": 585, "consider": 585, "choic": 585}, "objects": {"rustworkx": [[26, 0, 1, "", "AllPairsPathLengthMapping"], [30, 0, 1, "", "AllPairsPathMapping"], [34, 0, 1, "", "BFSPredecessors"], [35, 0, 1, "", "BFSSuccessors"], [36, 0, 1, "", "BiconnectedComponents"], [40, 0, 1, "", "CentralityMapping"], [44, 0, 1, "", "Chains"], [45, 0, 1, "", "ColoringStrategy"], [46, 3, 1, "", "DAGHasCycle"], [47, 3, 1, "", "DAGWouldCycle"], [48, 0, 1, "", "EdgeCentralityMapping"], [52, 0, 1, "", "EdgeIndexMap"], [56, 0, 1, "", "EdgeIndices"], [57, 0, 1, "", "EdgeList"], [58, 3, 1, "", "GraphNotBipartite"], [59, 0, 1, "", "IndexPartitionBlock"], [60, 3, 1, "", "InvalidMapping"], [61, 3, 1, "", "InvalidNode"], [62, 3, 1, "", "JSONSerializationError"], [63, 3, 1, "", "NegativeCycle"], [64, 3, 1, "", "NoEdgeBetweenNodes"], [65, 3, 1, "", "NoPathFound"], [66, 3, 1, "", "NoSuitableNeighbors"], [67, 0, 1, "", "NodeIndices"], [68, 0, 1, "", "NodeMap"], [72, 3, 1, "", "NullGraph"], [73, 0, 1, "", "PathLengthMapping"], [77, 0, 1, "", "PathMapping"], [81, 0, 1, "", "Pos2DMapping"], [85, 0, 1, "", "ProductNodeMap"], [89, 0, 1, "", "PyDAG"], [171, 0, 1, "", "PyDiGraph"], [253, 0, 1, "", "PyGraph"], [311, 0, 1, "", "RelationalCoarsestPartition"], [312, 0, 1, "", "TopologicalSorter"], [316, 0, 1, "", "WeightedEdgeList"], [317, 4, 1, "", "adjacency_matrix"], [318, 4, 1, "", "all_pairs_all_simple_paths"], [319, 4, 1, "", "all_pairs_bellman_ford_path_lengths"], [320, 4, 1, "", "all_pairs_bellman_ford_shortest_paths"], [321, 4, 1, "", "all_pairs_dijkstra_path_lengths"], [322, 4, 1, "", "all_pairs_dijkstra_shortest_paths"], [323, 4, 1, "", "all_shortest_paths"], [324, 4, 1, "", "all_simple_paths"], [325, 4, 1, "", "ancestors"], [326, 4, 1, "", "articulation_points"], [327, 4, 1, "", "astar_shortest_path"], [328, 4, 1, "", "barabasi_albert_graph"], [329, 4, 1, "", "bellman_ford_shortest_path_lengths"], [330, 4, 1, "", "bellman_ford_shortest_paths"], [331, 4, 1, "", "betweenness_centrality"], [332, 4, 1, "", "bfs_predecessors"], [333, 4, 1, "", "bfs_search"], [334, 4, 1, "", "bfs_successors"], [335, 4, 1, "", "biconnected_components"], [336, 4, 1, "", "bipartite_layout"], [337, 4, 1, "", "bridges"], [338, 4, 1, "", "cartesian_product"], [339, 4, 1, "", "chain_decomposition"], [340, 4, 1, "", "circular_layout"], [341, 4, 1, "", "closeness_centrality"], [342, 4, 1, "", "collect_bicolor_runs"], [343, 4, 1, "", "collect_runs"], [344, 4, 1, "", "complement"], [345, 4, 1, "", "connected_components"], [346, 4, 1, "", "connected_subgraphs"], [347, 4, 1, "", "core_number"], [348, 4, 1, "", "cycle_basis"], [349, 4, 1, "", "dag_longest_path"], [350, 4, 1, "", "dag_longest_path_length"], [351, 4, 1, "", "dag_weighted_longest_path"], [352, 4, 1, "", "dag_weighted_longest_path_length"], [353, 4, 1, "", "descendants"], [354, 4, 1, "", "dfs_edges"], [355, 4, 1, "", "dfs_search"], [356, 4, 1, "", "digraph_adjacency_matrix"], [357, 4, 1, "", "digraph_all_pairs_all_simple_paths"], [358, 4, 1, "", "digraph_all_pairs_bellman_ford_path_lengths"], [359, 4, 1, "", "digraph_all_pairs_bellman_ford_shortest_paths"], [360, 4, 1, "", "digraph_all_pairs_dijkstra_path_lengths"], [361, 4, 1, "", "digraph_all_pairs_dijkstra_shortest_paths"], [362, 4, 1, "", "digraph_all_shortest_paths"], [363, 4, 1, "", "digraph_all_simple_paths"], [364, 4, 1, "", "digraph_astar_shortest_path"], [365, 4, 1, "", "digraph_bellman_ford_shortest_path_lengths"], [366, 4, 1, "", "digraph_betweenness_centrality"], [367, 4, 1, "", "digraph_bfs_search"], [368, 4, 1, "", "digraph_bipartite_layout"], [369, 4, 1, "", "digraph_cartesian_product"], [370, 4, 1, "", "digraph_circular_layout"], [371, 4, 1, "", "digraph_closeness_centrality"], [372, 4, 1, "", "digraph_complement"], [373, 4, 1, "", "digraph_core_number"], [374, 4, 1, "", "digraph_dfs_edges"], [375, 4, 1, "", "digraph_dfs_search"], [376, 4, 1, "", "digraph_dijkstra_search"], [377, 4, 1, "", "digraph_dijkstra_shortest_path_lengths"], [378, 4, 1, "", "digraph_dijkstra_shortest_paths"], [379, 4, 1, "", "digraph_distance_matrix"], [380, 4, 1, "", "digraph_edge_betweenness_centrality"], [381, 4, 1, "", "digraph_eigenvector_centrality"], [382, 4, 1, "", "digraph_find_cycle"], [383, 4, 1, "", "digraph_floyd_warshall"], [384, 4, 1, "", "digraph_floyd_warshall_numpy"], [385, 4, 1, "", "digraph_floyd_warshall_successor_and_distance"], [386, 4, 1, "", "digraph_is_isomorphic"], [387, 4, 1, "", "digraph_is_subgraph_isomorphic"], [388, 4, 1, "", "digraph_k_shortest_path_lengths"], [389, 4, 1, "", "digraph_katz_centrality"], [390, 4, 1, "", "digraph_longest_simple_path"], [391, 4, 1, "", "digraph_maximum_bisimulation"], [392, 4, 1, "", "digraph_node_link_json"], [393, 4, 1, "", "digraph_num_shortest_paths_unweighted"], [394, 4, 1, "", "digraph_random_layout"], [395, 4, 1, "", "digraph_shell_layout"], [396, 4, 1, "", "digraph_spiral_layout"], [397, 4, 1, "", "digraph_spring_layout"], [398, 4, 1, "", "digraph_tensor_product"], [399, 4, 1, "", "digraph_transitivity"], [400, 4, 1, "", "digraph_union"], [401, 4, 1, "", "digraph_unweighted_average_shortest_path_length"], [402, 4, 1, "", "digraph_vf2_mapping"], [403, 4, 1, "", "dijkstra_search"], [404, 4, 1, "", "dijkstra_shortest_path_lengths"], [405, 4, 1, "", "dijkstra_shortest_paths"], [406, 4, 1, "", "directed_barabasi_albert_graph"], [407, 4, 1, "", "directed_gnm_random_graph"], [408, 4, 1, "", "directed_gnp_random_graph"], [409, 4, 1, "", "directed_random_bipartite_graph"], [410, 4, 1, "", "directed_sbm_random_graph"], [411, 4, 1, "", "distance_matrix"], [412, 4, 1, "", "dominance_frontiers"], [413, 4, 1, "", "edge_betweenness_centrality"], [414, 4, 1, "", "eigenvector_centrality"], [415, 4, 1, "", "find_negative_cycle"], [416, 4, 1, "", "floyd_warshall"], [417, 4, 1, "", "floyd_warshall_numpy"], [418, 4, 1, "", "floyd_warshall_successor_and_distance"], [419, 4, 1, "", "from_node_link_json_file"], [447, 4, 1, "", "graph_adjacency_matrix"], [448, 4, 1, "", "graph_all_pairs_all_simple_paths"], [449, 4, 1, "", "graph_all_pairs_bellman_ford_path_lengths"], [450, 4, 1, "", "graph_all_pairs_bellman_ford_shortest_paths"], [451, 4, 1, "", "graph_all_pairs_dijkstra_path_lengths"], [452, 4, 1, "", "graph_all_pairs_dijkstra_shortest_paths"], [453, 4, 1, "", "graph_all_shortest_paths"], [454, 4, 1, "", "graph_all_simple_paths"], [455, 4, 1, "", "graph_astar_shortest_path"], [456, 4, 1, "", "graph_bellman_ford_shortest_path_lengths"], [457, 4, 1, "", "graph_betweenness_centrality"], [458, 4, 1, "", "graph_bfs_search"], [459, 4, 1, "", "graph_bipartite_edge_color"], [460, 4, 1, "", "graph_bipartite_layout"], [461, 4, 1, "", "graph_cartesian_product"], [462, 4, 1, "", "graph_circular_layout"], [463, 4, 1, "", "graph_closeness_centrality"], [464, 4, 1, "", "graph_complement"], [465, 4, 1, "", "graph_core_number"], [466, 4, 1, "", "graph_dfs_edges"], [467, 4, 1, "", "graph_dfs_search"], [468, 4, 1, "", "graph_dijkstra_search"], [469, 4, 1, "", "graph_dijkstra_shortest_path_lengths"], [470, 4, 1, "", "graph_dijkstra_shortest_paths"], [471, 4, 1, "", "graph_distance_matrix"], [472, 4, 1, "", "graph_edge_betweenness_centrality"], [473, 4, 1, "", "graph_eigenvector_centrality"], [474, 4, 1, "", "graph_floyd_warshall"], [475, 4, 1, "", "graph_floyd_warshall_numpy"], [476, 4, 1, "", "graph_floyd_warshall_successor_and_distance"], [477, 4, 1, "", "graph_greedy_color"], [478, 4, 1, "", "graph_greedy_edge_color"], [479, 4, 1, "", "graph_is_isomorphic"], [480, 4, 1, "", "graph_is_subgraph_isomorphic"], [481, 4, 1, "", "graph_k_shortest_path_lengths"], [482, 4, 1, "", "graph_katz_centrality"], [483, 4, 1, "", "graph_line_graph"], [484, 4, 1, "", "graph_longest_simple_path"], [485, 4, 1, "", "graph_misra_gries_edge_color"], [486, 4, 1, "", "graph_node_link_json"], [487, 4, 1, "", "graph_num_shortest_paths_unweighted"], [488, 4, 1, "", "graph_random_layout"], [489, 4, 1, "", "graph_shell_layout"], [490, 4, 1, "", "graph_spiral_layout"], [491, 4, 1, "", "graph_spring_layout"], [492, 4, 1, "", "graph_tensor_product"], [493, 4, 1, "", "graph_token_swapper"], [494, 4, 1, "", "graph_transitivity"], [495, 4, 1, "", "graph_union"], [496, 4, 1, "", "graph_unweighted_average_shortest_path_length"], [497, 4, 1, "", "graph_vf2_mapping"], [498, 4, 1, "", "has_path"], [499, 4, 1, "", "hits"], [500, 4, 1, "", "hyperbolic_random_graph"], [501, 4, 1, "", "immediate_dominators"], [502, 4, 1, "", "is_bipartite"], [503, 4, 1, "", "is_connected"], [504, 4, 1, "", "is_directed_acyclic_graph"], [505, 4, 1, "", "is_isomorphic"], [506, 4, 1, "", "is_isomorphic_node_match"], [507, 4, 1, "", "is_matching"], [508, 4, 1, "", "is_maximal_matching"], [509, 4, 1, "", "is_planar"], [510, 4, 1, "", "is_subgraph_isomorphic"], [511, 4, 1, "", "is_weakly_connected"], [512, 4, 1, "", "isolates"], [513, 4, 1, "", "k_shortest_path_lengths"], [514, 4, 1, "", "katz_centrality"], [515, 4, 1, "", "layers"], [516, 4, 1, "", "lexicographical_topological_sort"], [517, 4, 1, "", "longest_simple_path"], [518, 4, 1, "", "max_weight_matching"], [519, 4, 1, "", "metric_closure"], [520, 4, 1, "", "minimum_spanning_edges"], [521, 4, 1, "", "minimum_spanning_tree"], [522, 4, 1, "", "negative_edge_cycle"], [523, 4, 1, "", "networkx_converter"], [524, 4, 1, "", "node_connected_component"], [525, 4, 1, "", "node_link_json"], [526, 4, 1, "", "num_shortest_paths_unweighted"], [527, 4, 1, "", "number_connected_components"], [528, 4, 1, "", "number_weakly_connected_components"], [529, 4, 1, "", "pagerank"], [530, 4, 1, "", "parse_node_link_json"], [531, 4, 1, "", "random_geometric_graph"], [532, 4, 1, "", "random_layout"], [533, 4, 1, "", "read_graphml"], [534, 4, 1, "", "shell_layout"], [535, 4, 1, "", "simple_cycles"], [536, 4, 1, "", "spiral_layout"], [537, 4, 1, "", "spring_layout"], [538, 4, 1, "", "steiner_tree"], [539, 4, 1, "", "stoer_wagner_min_cut"], [540, 4, 1, "", "strongly_connected_components"], [541, 4, 1, "", "topological_generations"], [542, 4, 1, "", "topological_sort"], [543, 4, 1, "", "transitive_reduction"], [544, 4, 1, "", "transitivity"], [545, 4, 1, "", "two_color"], [546, 4, 1, "", "undirected_gnm_random_graph"], [547, 4, 1, "", "undirected_gnp_random_graph"], [548, 4, 1, "", "undirected_random_bipartite_graph"], [549, 4, 1, "", "undirected_sbm_random_graph"], [550, 4, 1, "", "union"], [551, 4, 1, "", "unweighted_average_shortest_path_length"], [552, 4, 1, "", "vf2_mapping"], [576, 4, 1, "", "weakly_connected_components"]], "rustworkx.AllPairsPathLengthMapping": [[27, 1, 1, "", "items"], [28, 1, 1, "", "keys"], [29, 1, 1, "", "values"]], "rustworkx.AllPairsPathMapping": [[31, 1, 1, "", "items"], [32, 1, 1, "", "keys"], [33, 1, 1, "", "values"]], "rustworkx.BiconnectedComponents": [[37, 1, 1, "", "items"], [38, 1, 1, "", "keys"], [39, 1, 1, "", "values"]], "rustworkx.CentralityMapping": [[41, 1, 1, "", "items"], [42, 1, 1, "", "keys"], [43, 1, 1, "", "values"]], "rustworkx.ColoringStrategy": [[45, 2, 1, "", "Degree"], [45, 2, 1, "", "IndependentSet"], [45, 2, 1, "", "Saturation"]], "rustworkx.EdgeCentralityMapping": [[49, 1, 1, "", "items"], [50, 1, 1, "", "keys"], [51, 1, 1, "", "values"]], "rustworkx.EdgeIndexMap": [[53, 1, 1, "", "items"], [54, 1, 1, "", "keys"], [55, 1, 1, "", "values"]], "rustworkx.NodeMap": [[69, 1, 1, "", "items"], [70, 1, 1, "", "keys"], [71, 1, 1, "", "values"]], "rustworkx.PathLengthMapping": [[74, 1, 1, "", "items"], [75, 1, 1, "", "keys"], [76, 1, 1, "", "values"]], "rustworkx.PathMapping": [[78, 1, 1, "", "items"], [79, 1, 1, "", "keys"], [80, 1, 1, "", "values"]], "rustworkx.Pos2DMapping": [[82, 1, 1, "", "items"], [83, 1, 1, "", "keys"], [84, 1, 1, "", "values"]], "rustworkx.ProductNodeMap": [[86, 1, 1, "", "items"], [87, 1, 1, "", "keys"], [88, 1, 1, "", "values"]], "rustworkx.PyDAG": [[90, 1, 1, "", "add_child"], [91, 1, 1, "", "add_edge"], [92, 1, 1, "", "add_edges_from"], [93, 1, 1, "", "add_edges_from_no_data"], [94, 1, 1, "", "add_node"], [95, 1, 1, "", "add_nodes_from"], [96, 1, 1, "", "add_parent"], [97, 1, 1, "", "adj"], [98, 1, 1, "", "adj_direction"], [89, 2, 1, "", "attrs"], [89, 2, 1, "", "check_cycle"], [99, 1, 1, "", "clear"], [100, 1, 1, "", "clear_edges"], [101, 1, 1, "", "compose"], [102, 1, 1, "", "contract_nodes"], [103, 1, 1, "", "copy"], [104, 1, 1, "", "edge_index_map"], [105, 1, 1, "", "edge_indices"], [106, 1, 1, "", "edge_indices_from_endpoints"], [107, 1, 1, "", "edge_list"], [108, 1, 1, "", "edge_subgraph"], [109, 1, 1, "", "edges"], [110, 1, 1, "", "extend_from_edge_list"], [111, 1, 1, "", "extend_from_weighted_edge_list"], [112, 1, 1, "", "filter_edges"], [113, 1, 1, "", "filter_nodes"], [114, 1, 1, "", "find_adjacent_node_by_edge"], [115, 1, 1, "", "find_node_by_weight"], [116, 1, 1, "", "find_predecessor_node_by_edge"], [117, 1, 1, "", "find_predecessors_by_edge"], [118, 1, 1, "", "find_successors_by_edge"], [119, 1, 1, "", "from_adjacency_matrix"], [120, 1, 1, "", "from_complex_adjacency_matrix"], [121, 1, 1, "", "get_all_edge_data"], [122, 1, 1, "", "get_edge_data"], [123, 1, 1, "", "get_edge_data_by_index"], [124, 1, 1, "", "get_edge_endpoints_by_index"], [125, 1, 1, "", "get_node_data"], [126, 1, 1, "", "has_edge"], [127, 1, 1, "", "has_node"], [128, 1, 1, "", "has_parallel_edges"], [129, 1, 1, "", "in_degree"], [130, 1, 1, "", "in_edges"], [131, 1, 1, "", "incident_edge_index_map"], [132, 1, 1, "", "incident_edges"], [133, 1, 1, "", "insert_node_on_in_edges"], [134, 1, 1, "", "insert_node_on_in_edges_multiple"], [135, 1, 1, "", "insert_node_on_out_edges"], [136, 1, 1, "", "insert_node_on_out_edges_multiple"], [137, 1, 1, "", "is_symmetric"], [138, 1, 1, "", "make_symmetric"], [139, 1, 1, "", "merge_nodes"], [89, 2, 1, "", "multigraph"], [140, 1, 1, "", "neighbors"], [141, 1, 1, "", "neighbors_undirected"], [142, 1, 1, "", "node_indexes"], [143, 1, 1, "", "node_indices"], [144, 1, 1, "", "nodes"], [145, 1, 1, "", "num_edges"], [146, 1, 1, "", "num_nodes"], [147, 1, 1, "", "out_degree"], [148, 1, 1, "", "out_edges"], [149, 1, 1, "", "predecessor_indices"], [150, 1, 1, "", "predecessors"], [151, 1, 1, "", "read_edge_list"], [152, 1, 1, "", "remove_edge"], [153, 1, 1, "", "remove_edge_from_index"], [154, 1, 1, "", "remove_edges_from"], [155, 1, 1, "", "remove_node"], [156, 1, 1, "", "remove_node_retain_edges"], [157, 1, 1, "", "remove_node_retain_edges_by_id"], [158, 1, 1, "", "remove_node_retain_edges_by_key"], [159, 1, 1, "", "remove_nodes_from"], [160, 1, 1, "", "reverse"], [161, 1, 1, "", "subgraph"], [162, 1, 1, "", "substitute_node_with_subgraph"], [163, 1, 1, "", "successor_indices"], [164, 1, 1, "", "successors"], [165, 1, 1, "", "to_dot"], [166, 1, 1, "", "to_undirected"], [167, 1, 1, "", "update_edge"], [168, 1, 1, "", "update_edge_by_index"], [169, 1, 1, "", "weighted_edge_list"], [170, 1, 1, "", "write_edge_list"]], "rustworkx.PyDiGraph": [[172, 1, 1, "", "add_child"], [173, 1, 1, "", "add_edge"], [174, 1, 1, "", "add_edges_from"], [175, 1, 1, "", "add_edges_from_no_data"], [176, 1, 1, "", "add_node"], [177, 1, 1, "", "add_nodes_from"], [178, 1, 1, "", "add_parent"], [179, 1, 1, "", "adj"], [180, 1, 1, "", "adj_direction"], [171, 2, 1, "", "attrs"], [171, 2, 1, "", "check_cycle"], [181, 1, 1, "", "clear"], [182, 1, 1, "", "clear_edges"], [183, 1, 1, "", "compose"], [184, 1, 1, "", "contract_nodes"], [185, 1, 1, "", "copy"], [186, 1, 1, "", "edge_index_map"], [187, 1, 1, "", "edge_indices"], [188, 1, 1, "", "edge_indices_from_endpoints"], [189, 1, 1, "", "edge_list"], [190, 1, 1, "", "edge_subgraph"], [191, 1, 1, "", "edges"], [192, 1, 1, "", "extend_from_edge_list"], [193, 1, 1, "", "extend_from_weighted_edge_list"], [194, 1, 1, "", "filter_edges"], [195, 1, 1, "", "filter_nodes"], [196, 1, 1, "", "find_adjacent_node_by_edge"], [197, 1, 1, "", "find_node_by_weight"], [198, 1, 1, "", "find_predecessor_node_by_edge"], [199, 1, 1, "", "find_predecessors_by_edge"], [200, 1, 1, "", "find_successors_by_edge"], [201, 1, 1, "", "from_adjacency_matrix"], [202, 1, 1, "", "from_complex_adjacency_matrix"], [203, 1, 1, "", "get_all_edge_data"], [204, 1, 1, "", "get_edge_data"], [205, 1, 1, "", "get_edge_data_by_index"], [206, 1, 1, "", "get_edge_endpoints_by_index"], [207, 1, 1, "", "get_node_data"], [208, 1, 1, "", "has_edge"], [209, 1, 1, "", "has_node"], [210, 1, 1, "", "has_parallel_edges"], [211, 1, 1, "", "in_degree"], [212, 1, 1, "", "in_edges"], [213, 1, 1, "", "incident_edge_index_map"], [214, 1, 1, "", "incident_edges"], [215, 1, 1, "", "insert_node_on_in_edges"], [216, 1, 1, "", "insert_node_on_in_edges_multiple"], [217, 1, 1, "", "insert_node_on_out_edges"], [218, 1, 1, "", "insert_node_on_out_edges_multiple"], [219, 1, 1, "", "is_symmetric"], [220, 1, 1, "", "make_symmetric"], [221, 1, 1, "", "merge_nodes"], [171, 2, 1, "", "multigraph"], [222, 1, 1, "", "neighbors"], [223, 1, 1, "", "neighbors_undirected"], [224, 1, 1, "", "node_indexes"], [225, 1, 1, "", "node_indices"], [226, 1, 1, "", "nodes"], [227, 1, 1, "", "num_edges"], [228, 1, 1, "", "num_nodes"], [229, 1, 1, "", "out_degree"], [230, 1, 1, "", "out_edges"], [231, 1, 1, "", "predecessor_indices"], [232, 1, 1, "", "predecessors"], [233, 1, 1, "", "read_edge_list"], [234, 1, 1, "", "remove_edge"], [235, 1, 1, "", "remove_edge_from_index"], [236, 1, 1, "", "remove_edges_from"], [237, 1, 1, "", "remove_node"], [238, 1, 1, "", "remove_node_retain_edges"], [239, 1, 1, "", "remove_node_retain_edges_by_id"], [240, 1, 1, "", "remove_node_retain_edges_by_key"], [241, 1, 1, "", "remove_nodes_from"], [242, 1, 1, "", "reverse"], [243, 1, 1, "", "subgraph"], [244, 1, 1, "", "substitute_node_with_subgraph"], [245, 1, 1, "", "successor_indices"], [246, 1, 1, "", "successors"], [247, 1, 1, "", "to_dot"], [248, 1, 1, "", "to_undirected"], [249, 1, 1, "", "update_edge"], [250, 1, 1, "", "update_edge_by_index"], [251, 1, 1, "", "weighted_edge_list"], [252, 1, 1, "", "write_edge_list"]], "rustworkx.PyGraph": [[254, 1, 1, "", "add_edge"], [255, 1, 1, "", "add_edges_from"], [256, 1, 1, "", "add_edges_from_no_data"], [257, 1, 1, "", "add_node"], [258, 1, 1, "", "add_nodes_from"], [259, 1, 1, "", "adj"], [253, 2, 1, "", "attrs"], [260, 1, 1, "", "clear"], [261, 1, 1, "", "clear_edges"], [262, 1, 1, "", "compose"], [263, 1, 1, "", "contract_nodes"], [264, 1, 1, "", "copy"], [265, 1, 1, "", "degree"], [266, 1, 1, "", "edge_index_map"], [267, 1, 1, "", "edge_indices"], [268, 1, 1, "", "edge_indices_from_endpoints"], [269, 1, 1, "", "edge_list"], [270, 1, 1, "", "edge_subgraph"], [271, 1, 1, "", "edges"], [272, 1, 1, "", "extend_from_edge_list"], [273, 1, 1, "", "extend_from_weighted_edge_list"], [274, 1, 1, "", "filter_edges"], [275, 1, 1, "", "filter_nodes"], [276, 1, 1, "", "find_node_by_weight"], [277, 1, 1, "", "from_adjacency_matrix"], [278, 1, 1, "", "from_complex_adjacency_matrix"], [279, 1, 1, "", "get_all_edge_data"], [280, 1, 1, "", "get_edge_data"], [281, 1, 1, "", "get_edge_data_by_index"], [282, 1, 1, "", "get_edge_endpoints_by_index"], [283, 1, 1, "", "get_node_data"], [284, 1, 1, "", "has_edge"], [285, 1, 1, "", "has_node"], [286, 1, 1, "", "has_parallel_edges"], [287, 1, 1, "", "in_edges"], [288, 1, 1, "", "incident_edge_index_map"], [289, 1, 1, "", "incident_edges"], [253, 2, 1, "", "multigraph"], [290, 1, 1, "", "neighbors"], [291, 1, 1, "", "node_indexes"], [292, 1, 1, "", "node_indices"], [293, 1, 1, "", "nodes"], [294, 1, 1, "", "num_edges"], [295, 1, 1, "", "num_nodes"], [296, 1, 1, "", "out_edges"], [297, 1, 1, "", "read_edge_list"], [298, 1, 1, "", "remove_edge"], [299, 1, 1, "", "remove_edge_from_index"], [300, 1, 1, "", "remove_edges_from"], [301, 1, 1, "", "remove_node"], [302, 1, 1, "", "remove_nodes_from"], [303, 1, 1, "", "subgraph"], [304, 1, 1, "", "substitute_node_with_subgraph"], [305, 1, 1, "", "to_directed"], [306, 1, 1, "", "to_dot"], [307, 1, 1, "", "update_edge"], [308, 1, 1, "", "update_edge_by_index"], [309, 1, 1, "", "weighted_edge_list"], [310, 1, 1, "", "write_edge_list"]], "rustworkx.TopologicalSorter": [[313, 1, 1, "", "done"], [314, 1, 1, "", "get_ready"], [315, 1, 1, "", "is_active"]], "rustworkx.generators": [[420, 4, 1, "", "barbell_graph"], [421, 4, 1, "", "binomial_tree_graph"], [422, 4, 1, "", "complete_graph"], [423, 4, 1, "", "cycle_graph"], [424, 4, 1, "", "directed_binomial_tree_graph"], [425, 4, 1, "", "directed_complete_graph"], [426, 4, 1, "", "directed_cycle_graph"], [427, 4, 1, "", "directed_empty_graph"], [428, 4, 1, "", "directed_grid_graph"], [429, 4, 1, "", "directed_heavy_hex_graph"], [430, 4, 1, "", "directed_heavy_square_graph"], [431, 4, 1, "", "directed_hexagonal_lattice_graph"], [432, 4, 1, "", "directed_mesh_graph"], [433, 4, 1, "", "directed_path_graph"], [434, 4, 1, "", "directed_star_graph"], [435, 4, 1, "", "dorogovtsev_goltsev_mendes_graph"], [436, 4, 1, "", "empty_graph"], [437, 4, 1, "", "full_rary_tree"], [438, 4, 1, "", "generalized_petersen_graph"], [439, 4, 1, "", "grid_graph"], [440, 4, 1, "", "heavy_hex_graph"], [441, 4, 1, "", "heavy_square_graph"], [442, 4, 1, "", "hexagonal_lattice_graph"], [443, 4, 1, "", "lollipop_graph"], [444, 4, 1, "", "mesh_graph"], [445, 4, 1, "", "path_graph"], [446, 4, 1, "", "star_graph"]], "rustworkx.visit": [[553, 0, 1, "", "BFSVisitor"], [560, 0, 1, "", "DFSVisitor"], [566, 0, 1, "", "DijkstraVisitor"], [572, 3, 1, "", "PruneSearch"], [573, 3, 1, "", "StopSearch"]], "rustworkx.visit.BFSVisitor": [[554, 1, 1, "", "black_target_edge"], [555, 1, 1, "", "discover_vertex"], [556, 1, 1, "", "finish_vertex"], [557, 1, 1, "", "gray_target_edge"], [558, 1, 1, "", "non_tree_edge"], [559, 1, 1, "", "tree_edge"]], "rustworkx.visit.DFSVisitor": [[561, 1, 1, "", "back_edge"], [562, 1, 1, "", "discover_vertex"], [563, 1, 1, "", "finish_vertex"], [564, 1, 1, "", "forward_or_cross_edge"], [565, 1, 1, "", "tree_edge"]], "rustworkx.visit.DijkstraVisitor": [[567, 1, 1, "", "discover_vertex"], [568, 1, 1, "", "edge_not_relaxed"], [569, 1, 1, "", "edge_relaxed"], [570, 1, 1, "", "examine_edge"], [571, 1, 1, "", "finish_vertex"]], "rustworkx.visualization": [[574, 4, 1, "", "graphviz_draw"], [575, 4, 1, "", "mpl_draw"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:exception", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "rustworkx": [0, 20, 27, 28, 29, 31, 32, 33, 37, 38, 39, 41, 42, 43, 46, 47, 49, 50, 51, 53, 54, 55, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585], "make": 0, "chang": 0, "code": 0, "modul": 0, "export": 0, "lib": 0, "r": 0, "ad": 0, "function": [0, 7, 11, 21, 22, 23, 24, 580], "directori": 0, "when": 0, "singl": [0, 577], "file": 0, "i": 0, "enough": 0, "core": [0, 578], "test": 0, "run": 0, "specif": 0, "python": 0, "version": 0, "subset": 0, "visual": [0, 574, 575, 580, 582, 586], "style": 0, "rust": 0, "lint": 0, "build": 0, "document": [0, 578], "type": [0, 16], "annot": 0, "releas": [0, 581], "note": [0, 581], "new": [0, 581], "link": [0, 9], "issu": 0, "gener": [0, 18, 24, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 582, 585], "local": 0, "pull": 0, "request": 0, "review": 0, "ci": 0, "merg": 0, "queue": 0, "stabl": 0, "branch": 0, "polici": 0, "backport": 0, "procedur": 0, "manual": 0, "central": [1, 582], "color": 2, "connect": 3, "cycl": 3, "dag": [4, 583], "algorithm": [4, 7, 11], "domin": 5, "graph": [6, 19, 24, 577, 580, 582, 583, 585], "oper": [6, 585], "isomorph": [8, 577], "analysi": 9, "match": 10, "other": [11, 577, 581], "shortest": [12, 577], "path": [12, 577], "travers": 13, "tree": 14, "convert": [15, 580], "custom": 16, "return": 16, "except": 17, "class": [19, 580], "api": [20, 22, 23, 580, 586], "refer": 20, "layout": 21, "pydigraph": [22, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "pygraph": [23, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "random": 24, "serial": 25, "allpairspathlengthmap": [26, 27, 28, 29], "item": [27, 31, 37, 41, 49, 53, 69, 74, 78, 82, 86], "kei": [28, 32, 38, 42, 50, 54, 70, 75, 79, 83, 87, 580], "valu": [29, 33, 39, 43, 51, 55, 71, 76, 80, 84, 88], "allpairspathmap": [30, 31, 32, 33], "bfspredecessor": 34, "bfssuccessor": 35, "biconnectedcompon": [36, 37, 38, 39], "centralitymap": [40, 41, 42, 43], "chain": 44, "coloringstrategi": 45, "strategi": 45, "descript": 45, "daghascycl": 46, "dagwouldcycl": 47, "edgecentralitymap": [48, 49, 50, 51], "edgeindexmap": [52, 53, 54, 55], "edgeindic": 56, "edgelist": 57, "graphnotbipartit": 58, "indexpartitionblock": 59, "invalidmap": 60, "invalidnod": 61, "jsonserializationerror": 62, "negativecycl": 63, "noedgebetweennod": 64, "nopathfound": 65, "nosuitableneighbor": 66, "nodeindic": 67, "nodemap": [68, 69, 70, 71], "nullgraph": 72, "pathlengthmap": [73, 74, 75, 76], "pathmap": [77, 78, 79, 80], "pos2dmap": [81, 82, 83, 84], "productnodemap": [85, 86, 87, 88], "pydag": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "add_child": [90, 172], "add_edg": [91, 173, 254], "add_edges_from": [92, 174, 255], "add_edges_from_no_data": [93, 175, 256], "add_nod": [94, 176, 257], "add_nodes_from": [95, 177, 258], "add_par": [96, 178], "adj": [97, 179, 259], "adj_direct": [98, 180], "clear": [99, 181, 260], "clear_edg": [100, 182, 261], "compos": [101, 183, 262], "contract_nod": [102, 184, 263], "copi": [103, 185, 264], "edge_index_map": [104, 186, 266], "edge_indic": [105, 187, 267], "edge_indices_from_endpoint": [106, 188, 268], "edge_list": [107, 189, 269], "edge_subgraph": [108, 190, 270], "edg": [109, 191, 271, 580, 585], "extend_from_edge_list": [110, 192, 272], "extend_from_weighted_edge_list": [111, 193, 273], "filter_edg": [112, 194, 274], "filter_nod": [113, 195, 275], "find_adjacent_node_by_edg": [114, 196], "find_node_by_weight": [115, 197, 276], "find_predecessor_node_by_edg": [116, 198], "find_predecessors_by_edg": [117, 199], "find_successors_by_edg": [118, 200], "from_adjacency_matrix": [119, 201, 277], "from_complex_adjacency_matrix": [120, 202, 278], "get_all_edge_data": [121, 203, 279], "get_edge_data": [122, 204, 280], "get_edge_data_by_index": [123, 205, 281], "get_edge_endpoints_by_index": [124, 206, 282], "get_node_data": [125, 207, 283], "has_edg": [126, 208, 284], "has_nod": [127, 209, 285], "has_parallel_edg": [128, 210, 286], "in_degre": [129, 211], "in_edg": [130, 212, 287], "incident_edge_index_map": [131, 213, 288], "incident_edg": [132, 214, 289], "insert_node_on_in_edg": [133, 215], "insert_node_on_in_edges_multipl": [134, 216], "insert_node_on_out_edg": [135, 217], "insert_node_on_out_edges_multipl": [136, 218], "is_symmetr": [137, 219], "make_symmetr": [138, 220], "merge_nod": [139, 221], "neighbor": [140, 222, 290, 585], "neighbors_undirect": [141, 223], "node_index": [142, 224, 291], "node_indic": [143, 225, 292], "node": [144, 226, 293, 580, 585], "num_edg": [145, 227, 294], "num_nod": [146, 228, 295], "out_degre": [147, 229], "out_edg": [148, 230, 296], "predecessor_indic": [149, 231], "predecessor": [150, 232], "read_edge_list": [151, 233, 297], "remove_edg": [152, 234, 298], "remove_edge_from_index": [153, 235, 299], "remove_edges_from": [154, 236, 300], "remove_nod": [155, 237, 301], "remove_node_retain_edg": [156, 238], "remove_node_retain_edges_by_id": [157, 239], "remove_node_retain_edges_by_kei": [158, 240], "remove_nodes_from": [159, 241, 302], "revers": [160, 242], "subgraph": [161, 243, 303, 577], "substitute_node_with_subgraph": [162, 244, 304], "successor_indic": [163, 245], "successor": [164, 246], "to_dot": [165, 247, 306], "to_undirect": [166, 248], "update_edg": [167, 249, 307], "update_edge_by_index": [168, 250, 308], "weighted_edge_list": [169, 251, 309], "write_edge_list": [170, 252, 310], "degre": 265, "to_direct": 305, "relationalcoarsestpartit": 311, "topologicalsort": [312, 313, 314, 315], "done": 313, "get_readi": 314, "is_act": 315, "weightededgelist": 316, "adjacency_matrix": 317, "all_pairs_all_simple_path": 318, "all_pairs_bellman_ford_path_length": 319, "all_pairs_bellman_ford_shortest_path": 320, "all_pairs_dijkstra_path_length": 321, "all_pairs_dijkstra_shortest_path": 322, "all_shortest_path": 323, "all_simple_path": 324, "ancestor": 325, "articulation_point": 326, "astar_shortest_path": 327, "barabasi_albert_graph": 328, "bellman_ford_shortest_path_length": 329, "bellman_ford_shortest_path": 330, "betweenness_centr": 331, "see": [331, 366, 380, 413, 457, 472], "also": [331, 366, 380, 413, 457, 472], "bfs_predecessor": 332, "bfs_search": 333, "bfs_successor": 334, "biconnected_compon": 335, "bipartite_layout": 336, "bridg": 337, "cartesian_product": 338, "chain_decomposit": 339, "circular_layout": 340, "closeness_centr": 341, "collect_bicolor_run": 342, "collect_run": 343, "complement": 344, "connected_compon": 345, "connected_subgraph": 346, "core_numb": 347, "cycle_basi": 348, "dag_longest_path": 349, "dag_longest_path_length": 350, "dag_weighted_longest_path": 351, "dag_weighted_longest_path_length": 352, "descend": 353, "dfs_edg": 354, "dfs_search": 355, "digraph_adjacency_matrix": 356, "digraph_all_pairs_all_simple_path": 357, "digraph_all_pairs_bellman_ford_path_length": 358, "digraph_all_pairs_bellman_ford_shortest_path": 359, "digraph_all_pairs_dijkstra_path_length": 360, "digraph_all_pairs_dijkstra_shortest_path": 361, "digraph_all_shortest_path": 362, "digraph_all_simple_path": 363, "digraph_astar_shortest_path": 364, "digraph_bellman_ford_shortest_path_length": 365, "digraph_betweenness_centr": 366, "digraph_bfs_search": 367, "digraph_bipartite_layout": 368, "digraph_cartesian_product": 369, "digraph_circular_layout": 370, "digraph_closeness_centr": 371, "digraph_compl": 372, "digraph_core_numb": 373, "digraph_dfs_edg": 374, "digraph_dfs_search": 375, "digraph_dijkstra_search": 376, "digraph_dijkstra_shortest_path_length": 377, "digraph_dijkstra_shortest_path": 378, "digraph_distance_matrix": 379, "digraph_edge_betweenness_centr": 380, "digraph_eigenvector_centr": 381, "digraph_find_cycl": 382, "digraph_floyd_warshal": 383, "digraph_floyd_warshall_numpi": 384, "digraph_floyd_warshall_successor_and_dist": 385, "digraph_is_isomorph": 386, "digraph_is_subgraph_isomorph": 387, "digraph_k_shortest_path_length": 388, "digraph_katz_centr": 389, "digraph_longest_simple_path": 390, "digraph_maximum_bisimul": 391, "digraph_node_link_json": 392, "digraph_num_shortest_paths_unweight": 393, "digraph_random_layout": 394, "digraph_shell_layout": 395, "digraph_spiral_layout": 396, "digraph_spring_layout": 397, "digraph_tensor_product": 398, "digraph_transit": 399, "digraph_union": 400, "digraph_unweighted_average_shortest_path_length": 401, "digraph_vf2_map": 402, "dijkstra_search": 403, "dijkstra_shortest_path_length": 404, "dijkstra_shortest_path": 405, "directed_barabasi_albert_graph": 406, "directed_gnm_random_graph": 407, "directed_gnp_random_graph": 408, "directed_random_bipartite_graph": 409, "directed_sbm_random_graph": 410, "distance_matrix": 411, "dominance_fronti": 412, "edge_betweenness_centr": 413, "eigenvector_centr": 414, "find_negative_cycl": 415, "floyd_warshal": 416, "floyd_warshall_numpi": 417, "floyd_warshall_successor_and_dist": 418, "from_node_link_json_fil": 419, "barbell_graph": 420, "binomial_tree_graph": 421, "complete_graph": 422, "cycle_graph": 423, "directed_binomial_tree_graph": 424, "directed_complete_graph": 425, "directed_cycle_graph": 426, "directed_empty_graph": 427, "directed_grid_graph": 428, "directed_heavy_hex_graph": 429, "directed_heavy_square_graph": 430, "directed_hexagonal_lattice_graph": 431, "directed_mesh_graph": 432, "directed_path_graph": 433, "directed_star_graph": 434, "dorogovtsev_goltsev_mendes_graph": 435, "empty_graph": 436, "full_rary_tre": 437, "generalized_petersen_graph": 438, "grid_graph": 439, "heavy_hex_graph": 440, "heavy_square_graph": 441, "hexagonal_lattice_graph": 442, "lollipop_graph": 443, "mesh_graph": 444, "path_graph": 445, "star_graph": 446, "graph_adjacency_matrix": 447, "graph_all_pairs_all_simple_path": 448, "graph_all_pairs_bellman_ford_path_length": 449, "graph_all_pairs_bellman_ford_shortest_path": 450, "graph_all_pairs_dijkstra_path_length": 451, "graph_all_pairs_dijkstra_shortest_path": 452, "graph_all_shortest_path": 453, "graph_all_simple_path": 454, "graph_astar_shortest_path": 455, "graph_bellman_ford_shortest_path_length": 456, "graph_betweenness_centr": 457, "graph_bfs_search": 458, "graph_bipartite_edge_color": 459, "graph_bipartite_layout": 460, "graph_cartesian_product": 461, "graph_circular_layout": 462, "graph_closeness_centr": 463, "graph_compl": 464, "graph_core_numb": 465, "graph_dfs_edg": 466, "graph_dfs_search": 467, "graph_dijkstra_search": 468, "graph_dijkstra_shortest_path_length": 469, "graph_dijkstra_shortest_path": 470, "graph_distance_matrix": 471, "graph_edge_betweenness_centr": 472, "graph_eigenvector_centr": 473, "graph_floyd_warshal": 474, "graph_floyd_warshall_numpi": 475, "graph_floyd_warshall_successor_and_dist": 476, "graph_greedy_color": 477, "graph_greedy_edge_color": 478, "graph_is_isomorph": 479, "graph_is_subgraph_isomorph": 480, "graph_k_shortest_path_length": 481, "graph_katz_centr": 482, "graph_line_graph": 483, "graph_longest_simple_path": 484, "graph_misra_gries_edge_color": 485, "graph_node_link_json": 486, "graph_num_shortest_paths_unweight": 487, "graph_random_layout": 488, "graph_shell_layout": 489, "graph_spiral_layout": 490, "graph_spring_layout": 491, "graph_tensor_product": 492, "graph_token_swapp": 493, "graph_transit": 494, "graph_union": 495, "graph_unweighted_average_shortest_path_length": 496, "graph_vf2_map": 497, "has_path": 498, "hit": 499, "hyperbolic_random_graph": 500, "immediate_domin": 501, "is_bipartit": 502, "is_connect": 503, "is_directed_acyclic_graph": 504, "is_isomorph": 505, "is_isomorphic_node_match": 506, "is_match": 507, "is_maximal_match": 508, "is_planar": 509, "is_subgraph_isomorph": 510, "is_weakly_connect": 511, "isol": 512, "k_shortest_path_length": 513, "katz_centr": 514, "layer": 515, "lexicographical_topological_sort": 516, "longest_simple_path": 517, "max_weight_match": 518, "metric_closur": 519, "minimum_spanning_edg": 520, "minimum_spanning_tre": 521, "negative_edge_cycl": 522, "networkx_convert": 523, "node_connected_compon": 524, "node_link_json": 525, "num_shortest_paths_unweight": 526, "number_connected_compon": 527, "number_weakly_connected_compon": 528, "pagerank": 529, "parse_node_link_json": 530, "random_geometric_graph": 531, "random_layout": 532, "read_graphml": 533, "shell_layout": 534, "simple_cycl": 535, "spiral_layout": 536, "spring_layout": 537, "steiner_tre": 538, "stoer_wagner_min_cut": 539, "strongly_connected_compon": 540, "topological_gener": 541, "topological_sort": 542, "transitive_reduct": 543, "transit": 544, "two_color": 545, "undirected_gnm_random_graph": 546, "undirected_gnp_random_graph": 547, "undirected_random_bipartite_graph": 548, "undirected_sbm_random_graph": 549, "union": 550, "unweighted_average_shortest_path_length": 551, "vf2_map": 552, "bfsvisitor": [553, 554, 555, 556, 557, 558, 559], "visit": [554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573], "black_target_edg": 554, "discover_vertex": [555, 562, 567], "finish_vertex": [556, 563, 571], "gray_target_edg": 557, "non_tree_edg": 558, "tree_edg": [559, 565], "dfsvisitor": [560, 561, 562, 563, 564, 565], "back_edg": 561, "forward_or_cross_edg": 564, "dijkstravisitor": [566, 567, 568, 569, 570, 571], "edge_not_relax": 568, "edge_relax": 569, "examine_edg": 570, "prunesearch": 572, "stopsearch": 573, "graphviz_draw": 574, "mpl_draw": 575, "weakly_connected_compon": 576, "comparison": 577, "benchmark": 577, "With": 577, "librari": 577, "creation": 577, "sourc": 577, "all": 577, "pair": 577, "citat": 577, "project": 578, "histori": 578, "get": 579, "start": 579, "instal": [579, 585], "platform": 579, "without": 579, "precompil": 579, "binari": 579, "support": 579, "tier": 579, "1": [579, 581], "2": [579, 581], "3": 579, "4": [579, 581], "us": [579, 585], "networkx": 580, "user": 580, "some": 580, "differ": 580, "data": [580, 585], "attribut": [580, 585], "examin": [580, 585], "element": [580, 585], "equival": 580, "constructor": 580, "modifi": [580, 585], "matrix": 580, "matplotlib": 580, "drawer": 580, "from": [580, 585], "gap": 580, "0": 581, "15": 581, "60": 581, "featur": 581, "upgrad": 581, "bug": 581, "fix": 581, "prelud": 581, "14": 581, "deprec": 581, "13": 581, "12": 581, "11": 581, "10": 581, "9": 581, "8": 581, "7": 581, "6": 581, "5": 581, "work": 582, "between": 582, "calcul": 582, "direct": [583, 585], "acycl": 583, "applic": 583, "task": 583, "schedul": 583, "qiskit": 583, "": 583, "compil": 583, "tutori": 584, "guid": 584, "introduct": 585, "how": 585, "import": 585, "creat": 585, "remov": 585, "what": 585, "payload": 585, "access": 585, "multigraph": 585, "analyz": 585, "draw": 585}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Contributing": [[0, "contributing"]], "Contributing to rustworkx": [[0, "contributing-to-rustworkx"]], "Making changes to the code": [[0, "making-changes-to-the-code"]], "Module exports in lib.rs": [[0, "module-exports-in-lib-rs"]], "Adding and changing functions in modules": [[0, "adding-and-changing-functions-in-modules"]], "Module directories: when a single file is not enough": [[0, "module-directories-when-a-single-file-is-not-enough"]], "rustworkx-core": [[0, "rustworkx-core"], [578, "rustworkx-core"]], "Tests": [[0, "tests"]], "Running tests with a specific Python version": [[0, "running-tests-with-a-specific-python-version"]], "Running subsets of tests": [[0, "running-subsets-of-tests"]], "Visualization Tests": [[0, "visualization-tests"]], "rustworkx-core tests": [[0, "rustworkx-core-tests"]], "Style": [[0, "style"]], "Rust": [[0, "rust"]], "Lint": [[0, "lint"]], "Python": [[0, "python"]], "Building documentation": [[0, "building-documentation"]], "rustworkx-core documentation": [[0, "rustworkx-core-documentation"]], "Type Annotations": [[0, "type-annotations"]], "Release Notes": [[0, "release-notes"], [581, "release-notes"]], "Adding a new release note": [[0, "adding-a-new-release-note"]], "Linking to issues": [[0, "linking-to-issues"]], "Generating the release notes": [[0, "generating-the-release-notes"]], "Building release notes locally": [[0, "building-release-notes-locally"]], "Pull request review, CI, and merge queue": [[0, "pull-request-review-ci-and-merge-queue"]], "Stable Branch Policy and Backporting": [[0, "stable-branch-policy-and-backporting"]], "Backporting procedure": [[0, "backporting-procedure"]], "Manual backport procedure": [[0, "manual-backport-procedure"]], "Centrality": [[1, "centrality"]], "Coloring": [[2, "coloring"]], "Connectivity and Cycles": [[3, "connectivity-and-cycles"]], "DAG Algorithms": [[4, "dag-algorithms"]], "Dominance": [[5, "dominance"]], "Graph Operations": [[6, "graph-operations"]], "Algorithm Functions": [[7, "algorithm-functions"]], "Isomorphism": [[8, "isomorphism"]], "Link Analysis": [[9, "link-analysis"]], "Matching": [[10, "matching"]], "Other Algorithm Functions": [[11, "other-algorithm-functions"]], "Shortest Paths": [[12, "shortest-paths"]], "Traversal": [[13, "traversal"]], "Tree": [[14, "tree"]], "Converters": [[15, "converters"]], "Custom Return Types": [[16, "custom-return-types"]], "Exceptions": [[17, "exceptions"]], "Generators": [[18, "generators"]], "Graph Classes": [[19, "graph-classes"]], "Rustworkx API Reference": [[20, "rustworkx-api-reference"]], "Layout Functions": [[21, "layout-functions"]], "API functions for PyDigraph": [[22, "api-functions-for-pydigraph"]], "API functions for PyGraph": [[23, "api-functions-for-pygraph"]], "Random Graph Generator Functions": [[24, "random-graph-generator-functions"]], "Serialization": [[25, "serialization"]], "AllPairsPathLengthMapping": [[26, "allpairspathlengthmapping"]], "rustworkx.AllPairsPathLengthMapping.items": [[27, "rustworkx-allpairspathlengthmapping-items"]], "rustworkx.AllPairsPathLengthMapping.keys": [[28, "rustworkx-allpairspathlengthmapping-keys"]], "rustworkx.AllPairsPathLengthMapping.values": [[29, "rustworkx-allpairspathlengthmapping-values"]], "AllPairsPathMapping": [[30, "allpairspathmapping"]], "rustworkx.AllPairsPathMapping.items": [[31, "rustworkx-allpairspathmapping-items"]], "rustworkx.AllPairsPathMapping.keys": [[32, "rustworkx-allpairspathmapping-keys"]], "rustworkx.AllPairsPathMapping.values": [[33, "rustworkx-allpairspathmapping-values"]], "BFSPredecessors": [[34, "bfspredecessors"]], "BFSSuccessors": [[35, "bfssuccessors"]], "BiconnectedComponents": [[36, "biconnectedcomponents"]], "rustworkx.BiconnectedComponents.items": [[37, "rustworkx-biconnectedcomponents-items"]], "rustworkx.BiconnectedComponents.keys": [[38, "rustworkx-biconnectedcomponents-keys"]], "rustworkx.BiconnectedComponents.values": [[39, "rustworkx-biconnectedcomponents-values"]], "CentralityMapping": [[40, "centralitymapping"]], "rustworkx.CentralityMapping.items": [[41, "rustworkx-centralitymapping-items"]], "rustworkx.CentralityMapping.keys": [[42, "rustworkx-centralitymapping-keys"]], "rustworkx.CentralityMapping.values": [[43, "rustworkx-centralitymapping-values"]], "Chains": [[44, "chains"]], "ColoringStrategy": [[45, "coloringstrategy"]], "Strategy description": [[45, "id1"]], "rustworkx.DAGHasCycle": [[46, "rustworkx-daghascycle"]], "rustworkx.DAGWouldCycle": [[47, "rustworkx-dagwouldcycle"]], "EdgeCentralityMapping": [[48, "edgecentralitymapping"]], "rustworkx.EdgeCentralityMapping.items": [[49, "rustworkx-edgecentralitymapping-items"]], "rustworkx.EdgeCentralityMapping.keys": [[50, "rustworkx-edgecentralitymapping-keys"]], "rustworkx.EdgeCentralityMapping.values": [[51, "rustworkx-edgecentralitymapping-values"]], "EdgeIndexMap": [[52, "edgeindexmap"]], "rustworkx.EdgeIndexMap.items": [[53, "rustworkx-edgeindexmap-items"]], "rustworkx.EdgeIndexMap.keys": [[54, "rustworkx-edgeindexmap-keys"]], "rustworkx.EdgeIndexMap.values": [[55, "rustworkx-edgeindexmap-values"]], "EdgeIndices": [[56, "edgeindices"]], "EdgeList": [[57, "edgelist"]], "rustworkx.GraphNotBipartite": [[58, "rustworkx-graphnotbipartite"]], "IndexPartitionBlock": [[59, "indexpartitionblock"]], "rustworkx.InvalidMapping": [[60, "rustworkx-invalidmapping"]], "rustworkx.InvalidNode": [[61, "rustworkx-invalidnode"]], "rustworkx.JSONSerializationError": [[62, "rustworkx-jsonserializationerror"]], "rustworkx.NegativeCycle": [[63, "rustworkx-negativecycle"]], "rustworkx.NoEdgeBetweenNodes": [[64, "rustworkx-noedgebetweennodes"]], "rustworkx.NoPathFound": [[65, "rustworkx-nopathfound"]], "rustworkx.NoSuitableNeighbors": [[66, "rustworkx-nosuitableneighbors"]], "NodeIndices": [[67, "nodeindices"]], "NodeMap": [[68, "nodemap"]], "rustworkx.NodeMap.items": [[69, "rustworkx-nodemap-items"]], "rustworkx.NodeMap.keys": [[70, "rustworkx-nodemap-keys"]], "rustworkx.NodeMap.values": [[71, "rustworkx-nodemap-values"]], "rustworkx.NullGraph": [[72, "rustworkx-nullgraph"]], "PathLengthMapping": [[73, "pathlengthmapping"]], "rustworkx.PathLengthMapping.items": [[74, "rustworkx-pathlengthmapping-items"]], "rustworkx.PathLengthMapping.keys": [[75, "rustworkx-pathlengthmapping-keys"]], "rustworkx.PathLengthMapping.values": [[76, "rustworkx-pathlengthmapping-values"]], "PathMapping": [[77, "pathmapping"]], "rustworkx.PathMapping.items": [[78, "rustworkx-pathmapping-items"]], "rustworkx.PathMapping.keys": [[79, "rustworkx-pathmapping-keys"]], "rustworkx.PathMapping.values": [[80, "rustworkx-pathmapping-values"]], "Pos2DMapping": [[81, "pos2dmapping"]], "rustworkx.Pos2DMapping.items": [[82, "rustworkx-pos2dmapping-items"]], "rustworkx.Pos2DMapping.keys": [[83, "rustworkx-pos2dmapping-keys"]], "rustworkx.Pos2DMapping.values": [[84, "rustworkx-pos2dmapping-values"]], "ProductNodeMap": [[85, "productnodemap"]], "rustworkx.ProductNodeMap.items": [[86, "rustworkx-productnodemap-items"]], "rustworkx.ProductNodeMap.keys": [[87, "rustworkx-productnodemap-keys"]], "rustworkx.ProductNodeMap.values": [[88, "rustworkx-productnodemap-values"]], "PyDAG": [[89, "pydag"]], "rustworkx.PyDAG.add_child": [[90, "rustworkx-pydag-add-child"]], "rustworkx.PyDAG.add_edge": [[91, "rustworkx-pydag-add-edge"]], "rustworkx.PyDAG.add_edges_from": [[92, "rustworkx-pydag-add-edges-from"]], "rustworkx.PyDAG.add_edges_from_no_data": [[93, "rustworkx-pydag-add-edges-from-no-data"]], "rustworkx.PyDAG.add_node": [[94, "rustworkx-pydag-add-node"]], "rustworkx.PyDAG.add_nodes_from": [[95, "rustworkx-pydag-add-nodes-from"]], "rustworkx.PyDAG.add_parent": [[96, "rustworkx-pydag-add-parent"]], "rustworkx.PyDAG.adj": [[97, "rustworkx-pydag-adj"]], "rustworkx.PyDAG.adj_direction": [[98, "rustworkx-pydag-adj-direction"]], "rustworkx.PyDAG.clear": [[99, "rustworkx-pydag-clear"]], "rustworkx.PyDAG.clear_edges": [[100, "rustworkx-pydag-clear-edges"]], "rustworkx.PyDAG.compose": [[101, "rustworkx-pydag-compose"]], "rustworkx.PyDAG.contract_nodes": [[102, "rustworkx-pydag-contract-nodes"]], "rustworkx.PyDAG.copy": [[103, "rustworkx-pydag-copy"]], "rustworkx.PyDAG.edge_index_map": [[104, "rustworkx-pydag-edge-index-map"]], "rustworkx.PyDAG.edge_indices": [[105, "rustworkx-pydag-edge-indices"]], "rustworkx.PyDAG.edge_indices_from_endpoints": [[106, "rustworkx-pydag-edge-indices-from-endpoints"]], "rustworkx.PyDAG.edge_list": [[107, "rustworkx-pydag-edge-list"]], "rustworkx.PyDAG.edge_subgraph": [[108, "rustworkx-pydag-edge-subgraph"]], "rustworkx.PyDAG.edges": [[109, "rustworkx-pydag-edges"]], "rustworkx.PyDAG.extend_from_edge_list": [[110, "rustworkx-pydag-extend-from-edge-list"]], "rustworkx.PyDAG.extend_from_weighted_edge_list": [[111, "rustworkx-pydag-extend-from-weighted-edge-list"]], "rustworkx.PyDAG.filter_edges": [[112, "rustworkx-pydag-filter-edges"]], "rustworkx.PyDAG.filter_nodes": [[113, "rustworkx-pydag-filter-nodes"]], "rustworkx.PyDAG.find_adjacent_node_by_edge": [[114, "rustworkx-pydag-find-adjacent-node-by-edge"]], "rustworkx.PyDAG.find_node_by_weight": [[115, "rustworkx-pydag-find-node-by-weight"]], "rustworkx.PyDAG.find_predecessor_node_by_edge": [[116, "rustworkx-pydag-find-predecessor-node-by-edge"]], "rustworkx.PyDAG.find_predecessors_by_edge": [[117, "rustworkx-pydag-find-predecessors-by-edge"]], "rustworkx.PyDAG.find_successors_by_edge": [[118, "rustworkx-pydag-find-successors-by-edge"]], "rustworkx.PyDAG.from_adjacency_matrix": [[119, "rustworkx-pydag-from-adjacency-matrix"]], "rustworkx.PyDAG.from_complex_adjacency_matrix": [[120, "rustworkx-pydag-from-complex-adjacency-matrix"]], "rustworkx.PyDAG.get_all_edge_data": [[121, "rustworkx-pydag-get-all-edge-data"]], "rustworkx.PyDAG.get_edge_data": [[122, "rustworkx-pydag-get-edge-data"]], "rustworkx.PyDAG.get_edge_data_by_index": [[123, "rustworkx-pydag-get-edge-data-by-index"]], "rustworkx.PyDAG.get_edge_endpoints_by_index": [[124, "rustworkx-pydag-get-edge-endpoints-by-index"]], "rustworkx.PyDAG.get_node_data": [[125, "rustworkx-pydag-get-node-data"]], "rustworkx.PyDAG.has_edge": [[126, "rustworkx-pydag-has-edge"]], "rustworkx.PyDAG.has_node": [[127, "rustworkx-pydag-has-node"]], "rustworkx.PyDAG.has_parallel_edges": [[128, "rustworkx-pydag-has-parallel-edges"]], "rustworkx.PyDAG.in_degree": [[129, "rustworkx-pydag-in-degree"]], "rustworkx.PyDAG.in_edges": [[130, "rustworkx-pydag-in-edges"]], "rustworkx.PyDAG.incident_edge_index_map": [[131, "rustworkx-pydag-incident-edge-index-map"]], "rustworkx.PyDAG.incident_edges": [[132, "rustworkx-pydag-incident-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges": [[133, "rustworkx-pydag-insert-node-on-in-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges_multiple": [[134, "rustworkx-pydag-insert-node-on-in-edges-multiple"]], "rustworkx.PyDAG.insert_node_on_out_edges": [[135, "rustworkx-pydag-insert-node-on-out-edges"]], "rustworkx.PyDAG.insert_node_on_out_edges_multiple": [[136, "rustworkx-pydag-insert-node-on-out-edges-multiple"]], "rustworkx.PyDAG.is_symmetric": [[137, "rustworkx-pydag-is-symmetric"]], "rustworkx.PyDAG.make_symmetric": [[138, "rustworkx-pydag-make-symmetric"]], "rustworkx.PyDAG.merge_nodes": [[139, "rustworkx-pydag-merge-nodes"]], "rustworkx.PyDAG.neighbors": [[140, "rustworkx-pydag-neighbors"]], "rustworkx.PyDAG.neighbors_undirected": [[141, "rustworkx-pydag-neighbors-undirected"]], "rustworkx.PyDAG.node_indexes": [[142, "rustworkx-pydag-node-indexes"]], "rustworkx.PyDAG.node_indices": [[143, "rustworkx-pydag-node-indices"]], "rustworkx.PyDAG.nodes": [[144, "rustworkx-pydag-nodes"]], "rustworkx.PyDAG.num_edges": [[145, "rustworkx-pydag-num-edges"]], "rustworkx.PyDAG.num_nodes": [[146, "rustworkx-pydag-num-nodes"]], "rustworkx.PyDAG.out_degree": [[147, "rustworkx-pydag-out-degree"]], "rustworkx.PyDAG.out_edges": [[148, "rustworkx-pydag-out-edges"]], "rustworkx.PyDAG.predecessor_indices": [[149, "rustworkx-pydag-predecessor-indices"]], "rustworkx.PyDAG.predecessors": [[150, "rustworkx-pydag-predecessors"]], "rustworkx.PyDAG.read_edge_list": [[151, "rustworkx-pydag-read-edge-list"]], "rustworkx.PyDAG.remove_edge": [[152, "rustworkx-pydag-remove-edge"]], "rustworkx.PyDAG.remove_edge_from_index": [[153, "rustworkx-pydag-remove-edge-from-index"]], "rustworkx.PyDAG.remove_edges_from": [[154, "rustworkx-pydag-remove-edges-from"]], "rustworkx.PyDAG.remove_node": [[155, "rustworkx-pydag-remove-node"]], "rustworkx.PyDAG.remove_node_retain_edges": [[156, "rustworkx-pydag-remove-node-retain-edges"]], "rustworkx.PyDAG.remove_node_retain_edges_by_id": [[157, "rustworkx-pydag-remove-node-retain-edges-by-id"]], "rustworkx.PyDAG.remove_node_retain_edges_by_key": [[158, "rustworkx-pydag-remove-node-retain-edges-by-key"]], "rustworkx.PyDAG.remove_nodes_from": [[159, "rustworkx-pydag-remove-nodes-from"]], "rustworkx.PyDAG.reverse": [[160, "rustworkx-pydag-reverse"]], "rustworkx.PyDAG.subgraph": [[161, "rustworkx-pydag-subgraph"]], "rustworkx.PyDAG.substitute_node_with_subgraph": [[162, "rustworkx-pydag-substitute-node-with-subgraph"]], "rustworkx.PyDAG.successor_indices": [[163, "rustworkx-pydag-successor-indices"]], "rustworkx.PyDAG.successors": [[164, "rustworkx-pydag-successors"]], "rustworkx.PyDAG.to_dot": [[165, "rustworkx-pydag-to-dot"]], "rustworkx.PyDAG.to_undirected": [[166, "rustworkx-pydag-to-undirected"]], "rustworkx.PyDAG.update_edge": [[167, "rustworkx-pydag-update-edge"]], "rustworkx.PyDAG.update_edge_by_index": [[168, "rustworkx-pydag-update-edge-by-index"]], "rustworkx.PyDAG.weighted_edge_list": [[169, "rustworkx-pydag-weighted-edge-list"]], "rustworkx.PyDAG.write_edge_list": [[170, "rustworkx-pydag-write-edge-list"]], "PyDiGraph": [[171, "pydigraph"]], "rustworkx.PyDiGraph.add_child": [[172, "rustworkx-pydigraph-add-child"]], "rustworkx.PyDiGraph.add_edge": [[173, "rustworkx-pydigraph-add-edge"]], "rustworkx.PyDiGraph.add_edges_from": [[174, "rustworkx-pydigraph-add-edges-from"]], "rustworkx.PyDiGraph.add_edges_from_no_data": [[175, "rustworkx-pydigraph-add-edges-from-no-data"]], "rustworkx.PyDiGraph.add_node": [[176, "rustworkx-pydigraph-add-node"]], "rustworkx.PyDiGraph.add_nodes_from": [[177, "rustworkx-pydigraph-add-nodes-from"]], "rustworkx.PyDiGraph.add_parent": [[178, "rustworkx-pydigraph-add-parent"]], "rustworkx.PyDiGraph.adj": [[179, "rustworkx-pydigraph-adj"]], "rustworkx.PyDiGraph.adj_direction": [[180, "rustworkx-pydigraph-adj-direction"]], "rustworkx.PyDiGraph.clear": [[181, "rustworkx-pydigraph-clear"]], "rustworkx.PyDiGraph.clear_edges": [[182, "rustworkx-pydigraph-clear-edges"]], "rustworkx.PyDiGraph.compose": [[183, "rustworkx-pydigraph-compose"]], "rustworkx.PyDiGraph.contract_nodes": [[184, "rustworkx-pydigraph-contract-nodes"]], "rustworkx.PyDiGraph.copy": [[185, "rustworkx-pydigraph-copy"]], "rustworkx.PyDiGraph.edge_index_map": [[186, "rustworkx-pydigraph-edge-index-map"]], "rustworkx.PyDiGraph.edge_indices": [[187, "rustworkx-pydigraph-edge-indices"]], "rustworkx.PyDiGraph.edge_indices_from_endpoints": [[188, "rustworkx-pydigraph-edge-indices-from-endpoints"]], "rustworkx.PyDiGraph.edge_list": [[189, "rustworkx-pydigraph-edge-list"]], "rustworkx.PyDiGraph.edge_subgraph": [[190, "rustworkx-pydigraph-edge-subgraph"]], "rustworkx.PyDiGraph.edges": [[191, "rustworkx-pydigraph-edges"]], "rustworkx.PyDiGraph.extend_from_edge_list": [[192, "rustworkx-pydigraph-extend-from-edge-list"]], "rustworkx.PyDiGraph.extend_from_weighted_edge_list": [[193, "rustworkx-pydigraph-extend-from-weighted-edge-list"]], "rustworkx.PyDiGraph.filter_edges": [[194, "rustworkx-pydigraph-filter-edges"]], "rustworkx.PyDiGraph.filter_nodes": [[195, "rustworkx-pydigraph-filter-nodes"]], "rustworkx.PyDiGraph.find_adjacent_node_by_edge": [[196, "rustworkx-pydigraph-find-adjacent-node-by-edge"]], "rustworkx.PyDiGraph.find_node_by_weight": [[197, "rustworkx-pydigraph-find-node-by-weight"]], "rustworkx.PyDiGraph.find_predecessor_node_by_edge": [[198, "rustworkx-pydigraph-find-predecessor-node-by-edge"]], "rustworkx.PyDiGraph.find_predecessors_by_edge": [[199, "rustworkx-pydigraph-find-predecessors-by-edge"]], "rustworkx.PyDiGraph.find_successors_by_edge": [[200, "rustworkx-pydigraph-find-successors-by-edge"]], "rustworkx.PyDiGraph.from_adjacency_matrix": [[201, "rustworkx-pydigraph-from-adjacency-matrix"]], "rustworkx.PyDiGraph.from_complex_adjacency_matrix": [[202, "rustworkx-pydigraph-from-complex-adjacency-matrix"]], "rustworkx.PyDiGraph.get_all_edge_data": [[203, "rustworkx-pydigraph-get-all-edge-data"]], "rustworkx.PyDiGraph.get_edge_data": [[204, "rustworkx-pydigraph-get-edge-data"]], "rustworkx.PyDiGraph.get_edge_data_by_index": [[205, "rustworkx-pydigraph-get-edge-data-by-index"]], "rustworkx.PyDiGraph.get_edge_endpoints_by_index": [[206, "rustworkx-pydigraph-get-edge-endpoints-by-index"]], "rustworkx.PyDiGraph.get_node_data": [[207, "rustworkx-pydigraph-get-node-data"]], "rustworkx.PyDiGraph.has_edge": [[208, "rustworkx-pydigraph-has-edge"]], "rustworkx.PyDiGraph.has_node": [[209, "rustworkx-pydigraph-has-node"]], "rustworkx.PyDiGraph.has_parallel_edges": [[210, "rustworkx-pydigraph-has-parallel-edges"]], "rustworkx.PyDiGraph.in_degree": [[211, "rustworkx-pydigraph-in-degree"]], "rustworkx.PyDiGraph.in_edges": [[212, "rustworkx-pydigraph-in-edges"]], "rustworkx.PyDiGraph.incident_edge_index_map": [[213, "rustworkx-pydigraph-incident-edge-index-map"]], "rustworkx.PyDiGraph.incident_edges": [[214, "rustworkx-pydigraph-incident-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges": [[215, "rustworkx-pydigraph-insert-node-on-in-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple": [[216, "rustworkx-pydigraph-insert-node-on-in-edges-multiple"]], "rustworkx.PyDiGraph.insert_node_on_out_edges": [[217, "rustworkx-pydigraph-insert-node-on-out-edges"]], "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple": [[218, "rustworkx-pydigraph-insert-node-on-out-edges-multiple"]], "rustworkx.PyDiGraph.is_symmetric": [[219, "rustworkx-pydigraph-is-symmetric"]], "rustworkx.PyDiGraph.make_symmetric": [[220, "rustworkx-pydigraph-make-symmetric"]], "rustworkx.PyDiGraph.merge_nodes": [[221, "rustworkx-pydigraph-merge-nodes"]], "rustworkx.PyDiGraph.neighbors": [[222, "rustworkx-pydigraph-neighbors"]], "rustworkx.PyDiGraph.neighbors_undirected": [[223, "rustworkx-pydigraph-neighbors-undirected"]], "rustworkx.PyDiGraph.node_indexes": [[224, "rustworkx-pydigraph-node-indexes"]], "rustworkx.PyDiGraph.node_indices": [[225, "rustworkx-pydigraph-node-indices"]], "rustworkx.PyDiGraph.nodes": [[226, "rustworkx-pydigraph-nodes"]], "rustworkx.PyDiGraph.num_edges": [[227, "rustworkx-pydigraph-num-edges"]], "rustworkx.PyDiGraph.num_nodes": [[228, "rustworkx-pydigraph-num-nodes"]], "rustworkx.PyDiGraph.out_degree": [[229, "rustworkx-pydigraph-out-degree"]], "rustworkx.PyDiGraph.out_edges": [[230, "rustworkx-pydigraph-out-edges"]], "rustworkx.PyDiGraph.predecessor_indices": [[231, "rustworkx-pydigraph-predecessor-indices"]], "rustworkx.PyDiGraph.predecessors": [[232, "rustworkx-pydigraph-predecessors"]], "rustworkx.PyDiGraph.read_edge_list": [[233, "rustworkx-pydigraph-read-edge-list"]], "rustworkx.PyDiGraph.remove_edge": [[234, "rustworkx-pydigraph-remove-edge"]], "rustworkx.PyDiGraph.remove_edge_from_index": [[235, "rustworkx-pydigraph-remove-edge-from-index"]], "rustworkx.PyDiGraph.remove_edges_from": [[236, "rustworkx-pydigraph-remove-edges-from"]], "rustworkx.PyDiGraph.remove_node": [[237, "rustworkx-pydigraph-remove-node"]], "rustworkx.PyDiGraph.remove_node_retain_edges": [[238, "rustworkx-pydigraph-remove-node-retain-edges"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_id": [[239, "rustworkx-pydigraph-remove-node-retain-edges-by-id"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_key": [[240, "rustworkx-pydigraph-remove-node-retain-edges-by-key"]], "rustworkx.PyDiGraph.remove_nodes_from": [[241, "rustworkx-pydigraph-remove-nodes-from"]], "rustworkx.PyDiGraph.reverse": [[242, "rustworkx-pydigraph-reverse"]], "rustworkx.PyDiGraph.subgraph": [[243, "rustworkx-pydigraph-subgraph"]], "rustworkx.PyDiGraph.substitute_node_with_subgraph": [[244, "rustworkx-pydigraph-substitute-node-with-subgraph"]], "rustworkx.PyDiGraph.successor_indices": [[245, "rustworkx-pydigraph-successor-indices"]], "rustworkx.PyDiGraph.successors": [[246, "rustworkx-pydigraph-successors"]], "rustworkx.PyDiGraph.to_dot": [[247, "rustworkx-pydigraph-to-dot"]], "rustworkx.PyDiGraph.to_undirected": [[248, "rustworkx-pydigraph-to-undirected"]], "rustworkx.PyDiGraph.update_edge": [[249, "rustworkx-pydigraph-update-edge"]], "rustworkx.PyDiGraph.update_edge_by_index": [[250, "rustworkx-pydigraph-update-edge-by-index"]], "rustworkx.PyDiGraph.weighted_edge_list": [[251, "rustworkx-pydigraph-weighted-edge-list"]], "rustworkx.PyDiGraph.write_edge_list": [[252, "rustworkx-pydigraph-write-edge-list"]], "PyGraph": [[253, "pygraph"]], "rustworkx.PyGraph.add_edge": [[254, "rustworkx-pygraph-add-edge"]], "rustworkx.PyGraph.add_edges_from": [[255, "rustworkx-pygraph-add-edges-from"]], "rustworkx.PyGraph.add_edges_from_no_data": [[256, "rustworkx-pygraph-add-edges-from-no-data"]], "rustworkx.PyGraph.add_node": [[257, "rustworkx-pygraph-add-node"]], "rustworkx.PyGraph.add_nodes_from": [[258, "rustworkx-pygraph-add-nodes-from"]], "rustworkx.PyGraph.adj": [[259, "rustworkx-pygraph-adj"]], "rustworkx.PyGraph.clear": [[260, "rustworkx-pygraph-clear"]], "rustworkx.PyGraph.clear_edges": [[261, "rustworkx-pygraph-clear-edges"]], "rustworkx.PyGraph.compose": [[262, "rustworkx-pygraph-compose"]], "rustworkx.PyGraph.contract_nodes": [[263, "rustworkx-pygraph-contract-nodes"]], "rustworkx.PyGraph.copy": [[264, "rustworkx-pygraph-copy"]], "rustworkx.PyGraph.degree": [[265, "rustworkx-pygraph-degree"]], "rustworkx.PyGraph.edge_index_map": [[266, "rustworkx-pygraph-edge-index-map"]], "rustworkx.PyGraph.edge_indices": [[267, "rustworkx-pygraph-edge-indices"]], "rustworkx.PyGraph.edge_indices_from_endpoints": [[268, "rustworkx-pygraph-edge-indices-from-endpoints"]], "rustworkx.PyGraph.edge_list": [[269, "rustworkx-pygraph-edge-list"]], "rustworkx.PyGraph.edge_subgraph": [[270, "rustworkx-pygraph-edge-subgraph"]], "rustworkx.PyGraph.edges": [[271, "rustworkx-pygraph-edges"]], "rustworkx.PyGraph.extend_from_edge_list": [[272, "rustworkx-pygraph-extend-from-edge-list"]], "rustworkx.PyGraph.extend_from_weighted_edge_list": [[273, "rustworkx-pygraph-extend-from-weighted-edge-list"]], "rustworkx.PyGraph.filter_edges": [[274, "rustworkx-pygraph-filter-edges"]], "rustworkx.PyGraph.filter_nodes": [[275, "rustworkx-pygraph-filter-nodes"]], "rustworkx.PyGraph.find_node_by_weight": [[276, "rustworkx-pygraph-find-node-by-weight"]], "rustworkx.PyGraph.from_adjacency_matrix": [[277, "rustworkx-pygraph-from-adjacency-matrix"]], "rustworkx.PyGraph.from_complex_adjacency_matrix": [[278, "rustworkx-pygraph-from-complex-adjacency-matrix"]], "rustworkx.PyGraph.get_all_edge_data": [[279, "rustworkx-pygraph-get-all-edge-data"]], "rustworkx.PyGraph.get_edge_data": [[280, "rustworkx-pygraph-get-edge-data"]], "rustworkx.PyGraph.get_edge_data_by_index": [[281, "rustworkx-pygraph-get-edge-data-by-index"]], "rustworkx.PyGraph.get_edge_endpoints_by_index": [[282, "rustworkx-pygraph-get-edge-endpoints-by-index"]], "rustworkx.PyGraph.get_node_data": [[283, "rustworkx-pygraph-get-node-data"]], "rustworkx.PyGraph.has_edge": [[284, "rustworkx-pygraph-has-edge"]], "rustworkx.PyGraph.has_node": [[285, "rustworkx-pygraph-has-node"]], "rustworkx.PyGraph.has_parallel_edges": [[286, "rustworkx-pygraph-has-parallel-edges"]], "rustworkx.PyGraph.in_edges": [[287, "rustworkx-pygraph-in-edges"]], "rustworkx.PyGraph.incident_edge_index_map": [[288, "rustworkx-pygraph-incident-edge-index-map"]], "rustworkx.PyGraph.incident_edges": [[289, "rustworkx-pygraph-incident-edges"]], "rustworkx.PyGraph.neighbors": [[290, "rustworkx-pygraph-neighbors"]], "rustworkx.PyGraph.node_indexes": [[291, "rustworkx-pygraph-node-indexes"]], "rustworkx.PyGraph.node_indices": [[292, "rustworkx-pygraph-node-indices"]], "rustworkx.PyGraph.nodes": [[293, "rustworkx-pygraph-nodes"]], "rustworkx.PyGraph.num_edges": [[294, "rustworkx-pygraph-num-edges"]], "rustworkx.PyGraph.num_nodes": [[295, "rustworkx-pygraph-num-nodes"]], "rustworkx.PyGraph.out_edges": [[296, "rustworkx-pygraph-out-edges"]], "rustworkx.PyGraph.read_edge_list": [[297, "rustworkx-pygraph-read-edge-list"]], "rustworkx.PyGraph.remove_edge": [[298, "rustworkx-pygraph-remove-edge"]], "rustworkx.PyGraph.remove_edge_from_index": [[299, "rustworkx-pygraph-remove-edge-from-index"]], "rustworkx.PyGraph.remove_edges_from": [[300, "rustworkx-pygraph-remove-edges-from"]], "rustworkx.PyGraph.remove_node": [[301, "rustworkx-pygraph-remove-node"]], "rustworkx.PyGraph.remove_nodes_from": [[302, "rustworkx-pygraph-remove-nodes-from"]], "rustworkx.PyGraph.subgraph": [[303, "rustworkx-pygraph-subgraph"]], "rustworkx.PyGraph.substitute_node_with_subgraph": [[304, "rustworkx-pygraph-substitute-node-with-subgraph"]], "rustworkx.PyGraph.to_directed": [[305, "rustworkx-pygraph-to-directed"]], "rustworkx.PyGraph.to_dot": [[306, "rustworkx-pygraph-to-dot"]], "rustworkx.PyGraph.update_edge": [[307, "rustworkx-pygraph-update-edge"]], "rustworkx.PyGraph.update_edge_by_index": [[308, "rustworkx-pygraph-update-edge-by-index"]], "rustworkx.PyGraph.weighted_edge_list": [[309, "rustworkx-pygraph-weighted-edge-list"]], "rustworkx.PyGraph.write_edge_list": [[310, "rustworkx-pygraph-write-edge-list"]], "RelationalCoarsestPartition": [[311, "relationalcoarsestpartition"]], "TopologicalSorter": [[312, "topologicalsorter"]], "rustworkx.TopologicalSorter.done": [[313, "rustworkx-topologicalsorter-done"]], "rustworkx.TopologicalSorter.get_ready": [[314, "rustworkx-topologicalsorter-get-ready"]], "rustworkx.TopologicalSorter.is_active": [[315, "rustworkx-topologicalsorter-is-active"]], "WeightedEdgeList": [[316, "weightededgelist"]], "rustworkx.adjacency_matrix": [[317, "rustworkx-adjacency-matrix"]], "rustworkx.all_pairs_all_simple_paths": [[318, "rustworkx-all-pairs-all-simple-paths"]], "rustworkx.all_pairs_bellman_ford_path_lengths": [[319, "rustworkx-all-pairs-bellman-ford-path-lengths"]], "rustworkx.all_pairs_bellman_ford_shortest_paths": [[320, "rustworkx-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.all_pairs_dijkstra_path_lengths": [[321, "rustworkx-all-pairs-dijkstra-path-lengths"]], "rustworkx.all_pairs_dijkstra_shortest_paths": [[322, "rustworkx-all-pairs-dijkstra-shortest-paths"]], "rustworkx.all_shortest_paths": [[323, "rustworkx-all-shortest-paths"]], "rustworkx.all_simple_paths": [[324, "rustworkx-all-simple-paths"]], "rustworkx.ancestors": [[325, "rustworkx-ancestors"]], "rustworkx.articulation_points": [[326, "rustworkx-articulation-points"]], "rustworkx.astar_shortest_path": [[327, "rustworkx-astar-shortest-path"]], "rustworkx.barabasi_albert_graph": [[328, "rustworkx-barabasi-albert-graph"]], "rustworkx.bellman_ford_shortest_path_lengths": [[329, "rustworkx-bellman-ford-shortest-path-lengths"]], "rustworkx.bellman_ford_shortest_paths": [[330, "rustworkx-bellman-ford-shortest-paths"]], "rustworkx.betweenness_centrality": [[331, "rustworkx-betweenness-centrality"]], "See Also": [[331, "see-also"], [366, "see-also"], [380, "see-also"], [413, "see-also"], [457, "see-also"], [472, "see-also"]], "rustworkx.bfs_predecessors": [[332, "rustworkx-bfs-predecessors"]], "rustworkx.bfs_search": [[333, "rustworkx-bfs-search"]], "rustworkx.bfs_successors": [[334, "rustworkx-bfs-successors"]], "rustworkx.biconnected_components": [[335, "rustworkx-biconnected-components"]], "rustworkx.bipartite_layout": [[336, "rustworkx-bipartite-layout"]], "rustworkx.bridges": [[337, "rustworkx-bridges"]], "rustworkx.cartesian_product": [[338, "rustworkx-cartesian-product"]], "rustworkx.chain_decomposition": [[339, "rustworkx-chain-decomposition"]], "rustworkx.circular_layout": [[340, "rustworkx-circular-layout"]], "rustworkx.closeness_centrality": [[341, "rustworkx-closeness-centrality"]], "rustworkx.collect_bicolor_runs": [[342, "rustworkx-collect-bicolor-runs"]], "rustworkx.collect_runs": [[343, "rustworkx-collect-runs"]], "rustworkx.complement": [[344, "rustworkx-complement"]], "rustworkx.connected_components": [[345, "rustworkx-connected-components"]], "rustworkx.connected_subgraphs": [[346, "rustworkx-connected-subgraphs"]], "rustworkx.core_number": [[347, "rustworkx-core-number"]], "rustworkx.cycle_basis": [[348, "rustworkx-cycle-basis"]], "rustworkx.dag_longest_path": [[349, "rustworkx-dag-longest-path"]], "rustworkx.dag_longest_path_length": [[350, "rustworkx-dag-longest-path-length"]], "rustworkx.dag_weighted_longest_path": [[351, "rustworkx-dag-weighted-longest-path"]], "rustworkx.dag_weighted_longest_path_length": [[352, "rustworkx-dag-weighted-longest-path-length"]], "rustworkx.descendants": [[353, "rustworkx-descendants"]], "rustworkx.dfs_edges": [[354, "rustworkx-dfs-edges"]], "rustworkx.dfs_search": [[355, "rustworkx-dfs-search"]], "rustworkx.digraph_adjacency_matrix": [[356, "rustworkx-digraph-adjacency-matrix"]], "rustworkx.digraph_all_pairs_all_simple_paths": [[357, "rustworkx-digraph-all-pairs-all-simple-paths"]], "rustworkx.digraph_all_pairs_bellman_ford_path_lengths": [[358, "rustworkx-digraph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths": [[359, "rustworkx-digraph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.digraph_all_pairs_dijkstra_path_lengths": [[360, "rustworkx-digraph-all-pairs-dijkstra-path-lengths"]], "rustworkx.digraph_all_pairs_dijkstra_shortest_paths": [[361, "rustworkx-digraph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.digraph_all_shortest_paths": [[362, "rustworkx-digraph-all-shortest-paths"]], "rustworkx.digraph_all_simple_paths": [[363, "rustworkx-digraph-all-simple-paths"]], "rustworkx.digraph_astar_shortest_path": [[364, "rustworkx-digraph-astar-shortest-path"]], "rustworkx.digraph_bellman_ford_shortest_path_lengths": [[365, "rustworkx-digraph-bellman-ford-shortest-path-lengths"]], "rustworkx.digraph_betweenness_centrality": [[366, "rustworkx-digraph-betweenness-centrality"]], "rustworkx.digraph_bfs_search": [[367, "rustworkx-digraph-bfs-search"]], "rustworkx.digraph_bipartite_layout": [[368, "rustworkx-digraph-bipartite-layout"]], "rustworkx.digraph_cartesian_product": [[369, "rustworkx-digraph-cartesian-product"]], "rustworkx.digraph_circular_layout": [[370, "rustworkx-digraph-circular-layout"]], "rustworkx.digraph_closeness_centrality": [[371, "rustworkx-digraph-closeness-centrality"]], "rustworkx.digraph_complement": [[372, "rustworkx-digraph-complement"]], "rustworkx.digraph_core_number": [[373, "rustworkx-digraph-core-number"]], "rustworkx.digraph_dfs_edges": [[374, "rustworkx-digraph-dfs-edges"]], "rustworkx.digraph_dfs_search": [[375, "rustworkx-digraph-dfs-search"]], "rustworkx.digraph_dijkstra_search": [[376, "rustworkx-digraph-dijkstra-search"]], "rustworkx.digraph_dijkstra_shortest_path_lengths": [[377, "rustworkx-digraph-dijkstra-shortest-path-lengths"]], "rustworkx.digraph_dijkstra_shortest_paths": [[378, "rustworkx-digraph-dijkstra-shortest-paths"]], "rustworkx.digraph_distance_matrix": [[379, "rustworkx-digraph-distance-matrix"]], "rustworkx.digraph_edge_betweenness_centrality": [[380, "rustworkx-digraph-edge-betweenness-centrality"]], "rustworkx.digraph_eigenvector_centrality": [[381, "rustworkx-digraph-eigenvector-centrality"]], "rustworkx.digraph_find_cycle": [[382, "rustworkx-digraph-find-cycle"]], "rustworkx.digraph_floyd_warshall": [[383, "rustworkx-digraph-floyd-warshall"]], "rustworkx.digraph_floyd_warshall_numpy": [[384, "rustworkx-digraph-floyd-warshall-numpy"]], "rustworkx.digraph_floyd_warshall_successor_and_distance": [[385, "rustworkx-digraph-floyd-warshall-successor-and-distance"]], "rustworkx.digraph_is_isomorphic": [[386, "rustworkx-digraph-is-isomorphic"]], "rustworkx.digraph_is_subgraph_isomorphic": [[387, "rustworkx-digraph-is-subgraph-isomorphic"]], "rustworkx.digraph_k_shortest_path_lengths": [[388, "rustworkx-digraph-k-shortest-path-lengths"]], "rustworkx.digraph_katz_centrality": [[389, "rustworkx-digraph-katz-centrality"]], "rustworkx.digraph_longest_simple_path": [[390, "rustworkx-digraph-longest-simple-path"]], "rustworkx.digraph_maximum_bisimulation": [[391, "rustworkx-digraph-maximum-bisimulation"]], "rustworkx.digraph_node_link_json": [[392, "rustworkx-digraph-node-link-json"]], "rustworkx.digraph_num_shortest_paths_unweighted": [[393, "rustworkx-digraph-num-shortest-paths-unweighted"]], "rustworkx.digraph_random_layout": [[394, "rustworkx-digraph-random-layout"]], "rustworkx.digraph_shell_layout": [[395, "rustworkx-digraph-shell-layout"]], "rustworkx.digraph_spiral_layout": [[396, "rustworkx-digraph-spiral-layout"]], "rustworkx.digraph_spring_layout": [[397, "rustworkx-digraph-spring-layout"]], "rustworkx.digraph_tensor_product": [[398, "rustworkx-digraph-tensor-product"]], "rustworkx.digraph_transitivity": [[399, "rustworkx-digraph-transitivity"]], "rustworkx.digraph_union": [[400, "rustworkx-digraph-union"]], "rustworkx.digraph_unweighted_average_shortest_path_length": [[401, "rustworkx-digraph-unweighted-average-shortest-path-length"]], "rustworkx.digraph_vf2_mapping": [[402, "rustworkx-digraph-vf2-mapping"]], "rustworkx.dijkstra_search": [[403, "rustworkx-dijkstra-search"]], "rustworkx.dijkstra_shortest_path_lengths": [[404, "rustworkx-dijkstra-shortest-path-lengths"]], "rustworkx.dijkstra_shortest_paths": [[405, "rustworkx-dijkstra-shortest-paths"]], "rustworkx.directed_barabasi_albert_graph": [[406, "rustworkx-directed-barabasi-albert-graph"]], "rustworkx.directed_gnm_random_graph": [[407, "rustworkx-directed-gnm-random-graph"]], "rustworkx.directed_gnp_random_graph": [[408, "rustworkx-directed-gnp-random-graph"]], "rustworkx.directed_random_bipartite_graph": [[409, "rustworkx-directed-random-bipartite-graph"]], "rustworkx.directed_sbm_random_graph": [[410, "rustworkx-directed-sbm-random-graph"]], "rustworkx.distance_matrix": [[411, "rustworkx-distance-matrix"]], "rustworkx.dominance_frontiers": [[412, "rustworkx-dominance-frontiers"]], "rustworkx.edge_betweenness_centrality": [[413, "rustworkx-edge-betweenness-centrality"]], "rustworkx.eigenvector_centrality": [[414, "rustworkx-eigenvector-centrality"]], "rustworkx.find_negative_cycle": [[415, "rustworkx-find-negative-cycle"]], "rustworkx.floyd_warshall": [[416, "rustworkx-floyd-warshall"]], "rustworkx.floyd_warshall_numpy": [[417, "rustworkx-floyd-warshall-numpy"]], "rustworkx.floyd_warshall_successor_and_distance": [[418, "rustworkx-floyd-warshall-successor-and-distance"]], "rustworkx.from_node_link_json_file": [[419, "rustworkx-from-node-link-json-file"]], "rustworkx.generators.barbell_graph": [[420, "rustworkx-generators-barbell-graph"]], "rustworkx.generators.binomial_tree_graph": [[421, "rustworkx-generators-binomial-tree-graph"]], "rustworkx.generators.complete_graph": [[422, "rustworkx-generators-complete-graph"]], "rustworkx.generators.cycle_graph": [[423, "rustworkx-generators-cycle-graph"]], "rustworkx.generators.directed_binomial_tree_graph": [[424, "rustworkx-generators-directed-binomial-tree-graph"]], "rustworkx.generators.directed_complete_graph": [[425, "rustworkx-generators-directed-complete-graph"]], "rustworkx.generators.directed_cycle_graph": [[426, "rustworkx-generators-directed-cycle-graph"]], "rustworkx.generators.directed_empty_graph": [[427, "rustworkx-generators-directed-empty-graph"]], "rustworkx.generators.directed_grid_graph": [[428, "rustworkx-generators-directed-grid-graph"]], "rustworkx.generators.directed_heavy_hex_graph": [[429, "rustworkx-generators-directed-heavy-hex-graph"]], "rustworkx.generators.directed_heavy_square_graph": [[430, "rustworkx-generators-directed-heavy-square-graph"]], "rustworkx.generators.directed_hexagonal_lattice_graph": [[431, "rustworkx-generators-directed-hexagonal-lattice-graph"]], "rustworkx.generators.directed_mesh_graph": [[432, "rustworkx-generators-directed-mesh-graph"]], "rustworkx.generators.directed_path_graph": [[433, "rustworkx-generators-directed-path-graph"]], "rustworkx.generators.directed_star_graph": [[434, "rustworkx-generators-directed-star-graph"]], "rustworkx.generators.dorogovtsev_goltsev_mendes_graph": [[435, "rustworkx-generators-dorogovtsev-goltsev-mendes-graph"]], "rustworkx.generators.empty_graph": [[436, "rustworkx-generators-empty-graph"]], "rustworkx.generators.full_rary_tree": [[437, "rustworkx-generators-full-rary-tree"]], "rustworkx.generators.generalized_petersen_graph": [[438, "rustworkx-generators-generalized-petersen-graph"]], "rustworkx.generators.grid_graph": [[439, "rustworkx-generators-grid-graph"]], "rustworkx.generators.heavy_hex_graph": [[440, "rustworkx-generators-heavy-hex-graph"]], "rustworkx.generators.heavy_square_graph": [[441, "rustworkx-generators-heavy-square-graph"]], "rustworkx.generators.hexagonal_lattice_graph": [[442, "rustworkx-generators-hexagonal-lattice-graph"]], "rustworkx.generators.lollipop_graph": [[443, "rustworkx-generators-lollipop-graph"]], "rustworkx.generators.mesh_graph": [[444, "rustworkx-generators-mesh-graph"]], "rustworkx.generators.path_graph": [[445, "rustworkx-generators-path-graph"]], "rustworkx.generators.star_graph": [[446, "rustworkx-generators-star-graph"]], "rustworkx.graph_adjacency_matrix": [[447, "rustworkx-graph-adjacency-matrix"]], "rustworkx.graph_all_pairs_all_simple_paths": [[448, "rustworkx-graph-all-pairs-all-simple-paths"]], "rustworkx.graph_all_pairs_bellman_ford_path_lengths": [[449, "rustworkx-graph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.graph_all_pairs_bellman_ford_shortest_paths": [[450, "rustworkx-graph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.graph_all_pairs_dijkstra_path_lengths": [[451, "rustworkx-graph-all-pairs-dijkstra-path-lengths"]], "rustworkx.graph_all_pairs_dijkstra_shortest_paths": [[452, "rustworkx-graph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.graph_all_shortest_paths": [[453, "rustworkx-graph-all-shortest-paths"]], "rustworkx.graph_all_simple_paths": [[454, "rustworkx-graph-all-simple-paths"]], "rustworkx.graph_astar_shortest_path": [[455, "rustworkx-graph-astar-shortest-path"]], "rustworkx.graph_bellman_ford_shortest_path_lengths": [[456, "rustworkx-graph-bellman-ford-shortest-path-lengths"]], "rustworkx.graph_betweenness_centrality": [[457, "rustworkx-graph-betweenness-centrality"]], "rustworkx.graph_bfs_search": [[458, "rustworkx-graph-bfs-search"]], "rustworkx.graph_bipartite_edge_color": [[459, "rustworkx-graph-bipartite-edge-color"]], "rustworkx.graph_bipartite_layout": [[460, "rustworkx-graph-bipartite-layout"]], "rustworkx.graph_cartesian_product": [[461, "rustworkx-graph-cartesian-product"]], "rustworkx.graph_circular_layout": [[462, "rustworkx-graph-circular-layout"]], "rustworkx.graph_closeness_centrality": [[463, "rustworkx-graph-closeness-centrality"]], "rustworkx.graph_complement": [[464, "rustworkx-graph-complement"]], "rustworkx.graph_core_number": [[465, "rustworkx-graph-core-number"]], "rustworkx.graph_dfs_edges": [[466, "rustworkx-graph-dfs-edges"]], "rustworkx.graph_dfs_search": [[467, "rustworkx-graph-dfs-search"]], "rustworkx.graph_dijkstra_search": [[468, "rustworkx-graph-dijkstra-search"]], "rustworkx.graph_dijkstra_shortest_path_lengths": [[469, "rustworkx-graph-dijkstra-shortest-path-lengths"]], "rustworkx.graph_dijkstra_shortest_paths": [[470, "rustworkx-graph-dijkstra-shortest-paths"]], "rustworkx.graph_distance_matrix": [[471, "rustworkx-graph-distance-matrix"]], "rustworkx.graph_edge_betweenness_centrality": [[472, "rustworkx-graph-edge-betweenness-centrality"]], "rustworkx.graph_eigenvector_centrality": [[473, "rustworkx-graph-eigenvector-centrality"]], "rustworkx.graph_floyd_warshall": [[474, "rustworkx-graph-floyd-warshall"]], "rustworkx.graph_floyd_warshall_numpy": [[475, "rustworkx-graph-floyd-warshall-numpy"]], "rustworkx.graph_floyd_warshall_successor_and_distance": [[476, "rustworkx-graph-floyd-warshall-successor-and-distance"]], "rustworkx.graph_greedy_color": [[477, "rustworkx-graph-greedy-color"]], "rustworkx.graph_greedy_edge_color": [[478, "rustworkx-graph-greedy-edge-color"]], "rustworkx.graph_is_isomorphic": [[479, "rustworkx-graph-is-isomorphic"]], "rustworkx.graph_is_subgraph_isomorphic": [[480, "rustworkx-graph-is-subgraph-isomorphic"]], "rustworkx.graph_k_shortest_path_lengths": [[481, "rustworkx-graph-k-shortest-path-lengths"]], "rustworkx.graph_katz_centrality": [[482, "rustworkx-graph-katz-centrality"]], "rustworkx.graph_line_graph": [[483, "rustworkx-graph-line-graph"]], "rustworkx.graph_longest_simple_path": [[484, "rustworkx-graph-longest-simple-path"]], "rustworkx.graph_misra_gries_edge_color": [[485, "rustworkx-graph-misra-gries-edge-color"]], "rustworkx.graph_node_link_json": [[486, "rustworkx-graph-node-link-json"]], "rustworkx.graph_num_shortest_paths_unweighted": [[487, "rustworkx-graph-num-shortest-paths-unweighted"]], "rustworkx.graph_random_layout": [[488, "rustworkx-graph-random-layout"]], "rustworkx.graph_shell_layout": [[489, "rustworkx-graph-shell-layout"]], "rustworkx.graph_spiral_layout": [[490, "rustworkx-graph-spiral-layout"]], "rustworkx.graph_spring_layout": [[491, "rustworkx-graph-spring-layout"]], "rustworkx.graph_tensor_product": [[492, "rustworkx-graph-tensor-product"]], "rustworkx.graph_token_swapper": [[493, "rustworkx-graph-token-swapper"]], "rustworkx.graph_transitivity": [[494, "rustworkx-graph-transitivity"]], "rustworkx.graph_union": [[495, "rustworkx-graph-union"]], "rustworkx.graph_unweighted_average_shortest_path_length": [[496, "rustworkx-graph-unweighted-average-shortest-path-length"]], "rustworkx.graph_vf2_mapping": [[497, "rustworkx-graph-vf2-mapping"]], "rustworkx.has_path": [[498, "rustworkx-has-path"]], "rustworkx.hits": [[499, "rustworkx-hits"]], "rustworkx.hyperbolic_random_graph": [[500, "rustworkx-hyperbolic-random-graph"]], "rustworkx.immediate_dominators": [[501, "rustworkx-immediate-dominators"]], "rustworkx.is_bipartite": [[502, "rustworkx-is-bipartite"]], "rustworkx.is_connected": [[503, "rustworkx-is-connected"]], "rustworkx.is_directed_acyclic_graph": [[504, "rustworkx-is-directed-acyclic-graph"]], "rustworkx.is_isomorphic": [[505, "rustworkx-is-isomorphic"]], "rustworkx.is_isomorphic_node_match": [[506, "rustworkx-is-isomorphic-node-match"]], "rustworkx.is_matching": [[507, "rustworkx-is-matching"]], "rustworkx.is_maximal_matching": [[508, "rustworkx-is-maximal-matching"]], "rustworkx.is_planar": [[509, "rustworkx-is-planar"]], "rustworkx.is_subgraph_isomorphic": [[510, "rustworkx-is-subgraph-isomorphic"]], "rustworkx.is_weakly_connected": [[511, "rustworkx-is-weakly-connected"]], "rustworkx.isolates": [[512, "rustworkx-isolates"]], "rustworkx.k_shortest_path_lengths": [[513, "rustworkx-k-shortest-path-lengths"]], "rustworkx.katz_centrality": [[514, "rustworkx-katz-centrality"]], "rustworkx.layers": [[515, "rustworkx-layers"]], "rustworkx.lexicographical_topological_sort": [[516, "rustworkx-lexicographical-topological-sort"]], "rustworkx.longest_simple_path": [[517, "rustworkx-longest-simple-path"]], "rustworkx.max_weight_matching": [[518, "rustworkx-max-weight-matching"]], "rustworkx.metric_closure": [[519, "rustworkx-metric-closure"]], "rustworkx.minimum_spanning_edges": [[520, "rustworkx-minimum-spanning-edges"]], "rustworkx.minimum_spanning_tree": [[521, "rustworkx-minimum-spanning-tree"]], "rustworkx.negative_edge_cycle": [[522, "rustworkx-negative-edge-cycle"]], "rustworkx.networkx_converter": [[523, "rustworkx-networkx-converter"]], "rustworkx.node_connected_component": [[524, "rustworkx-node-connected-component"]], "rustworkx.node_link_json": [[525, "rustworkx-node-link-json"]], "rustworkx.num_shortest_paths_unweighted": [[526, "rustworkx-num-shortest-paths-unweighted"]], "rustworkx.number_connected_components": [[527, "rustworkx-number-connected-components"]], "rustworkx.number_weakly_connected_components": [[528, "rustworkx-number-weakly-connected-components"]], "rustworkx.pagerank": [[529, "rustworkx-pagerank"]], "rustworkx.parse_node_link_json": [[530, "rustworkx-parse-node-link-json"]], "rustworkx.random_geometric_graph": [[531, "rustworkx-random-geometric-graph"]], "rustworkx.random_layout": [[532, "rustworkx-random-layout"]], "rustworkx.read_graphml": [[533, "rustworkx-read-graphml"]], "rustworkx.shell_layout": [[534, "rustworkx-shell-layout"]], "rustworkx.simple_cycles": [[535, "rustworkx-simple-cycles"]], "rustworkx.spiral_layout": [[536, "rustworkx-spiral-layout"]], "rustworkx.spring_layout": [[537, "rustworkx-spring-layout"]], "rustworkx.steiner_tree": [[538, "rustworkx-steiner-tree"]], "rustworkx.stoer_wagner_min_cut": [[539, "rustworkx-stoer-wagner-min-cut"]], "rustworkx.strongly_connected_components": [[540, "rustworkx-strongly-connected-components"]], "rustworkx.topological_generations": [[541, "rustworkx-topological-generations"]], "rustworkx.topological_sort": [[542, "rustworkx-topological-sort"]], "rustworkx.transitive_reduction": [[543, "rustworkx-transitive-reduction"]], "rustworkx.transitivity": [[544, "rustworkx-transitivity"]], "rustworkx.two_color": [[545, "rustworkx-two-color"]], "rustworkx.undirected_gnm_random_graph": [[546, "rustworkx-undirected-gnm-random-graph"]], "rustworkx.undirected_gnp_random_graph": [[547, "rustworkx-undirected-gnp-random-graph"]], "rustworkx.undirected_random_bipartite_graph": [[548, "rustworkx-undirected-random-bipartite-graph"]], "rustworkx.undirected_sbm_random_graph": [[549, "rustworkx-undirected-sbm-random-graph"]], "rustworkx.union": [[550, "rustworkx-union"]], "rustworkx.unweighted_average_shortest_path_length": [[551, "rustworkx-unweighted-average-shortest-path-length"]], "rustworkx.vf2_mapping": [[552, "rustworkx-vf2-mapping"]], "BFSVisitor": [[553, "bfsvisitor"]], "rustworkx.visit.BFSVisitor.black_target_edge": [[554, "rustworkx-visit-bfsvisitor-black-target-edge"]], "rustworkx.visit.BFSVisitor.discover_vertex": [[555, "rustworkx-visit-bfsvisitor-discover-vertex"]], "rustworkx.visit.BFSVisitor.finish_vertex": [[556, "rustworkx-visit-bfsvisitor-finish-vertex"]], "rustworkx.visit.BFSVisitor.gray_target_edge": [[557, "rustworkx-visit-bfsvisitor-gray-target-edge"]], "rustworkx.visit.BFSVisitor.non_tree_edge": [[558, "rustworkx-visit-bfsvisitor-non-tree-edge"]], "rustworkx.visit.BFSVisitor.tree_edge": [[559, "rustworkx-visit-bfsvisitor-tree-edge"]], "DFSVisitor": [[560, "dfsvisitor"]], "rustworkx.visit.DFSVisitor.back_edge": [[561, "rustworkx-visit-dfsvisitor-back-edge"]], "rustworkx.visit.DFSVisitor.discover_vertex": [[562, "rustworkx-visit-dfsvisitor-discover-vertex"]], "rustworkx.visit.DFSVisitor.finish_vertex": [[563, "rustworkx-visit-dfsvisitor-finish-vertex"]], "rustworkx.visit.DFSVisitor.forward_or_cross_edge": [[564, "rustworkx-visit-dfsvisitor-forward-or-cross-edge"]], "rustworkx.visit.DFSVisitor.tree_edge": [[565, "rustworkx-visit-dfsvisitor-tree-edge"]], "DijkstraVisitor": [[566, "dijkstravisitor"]], "rustworkx.visit.DijkstraVisitor.discover_vertex": [[567, "rustworkx-visit-dijkstravisitor-discover-vertex"]], "rustworkx.visit.DijkstraVisitor.edge_not_relaxed": [[568, "rustworkx-visit-dijkstravisitor-edge-not-relaxed"]], "rustworkx.visit.DijkstraVisitor.edge_relaxed": [[569, "rustworkx-visit-dijkstravisitor-edge-relaxed"]], "rustworkx.visit.DijkstraVisitor.examine_edge": [[570, "rustworkx-visit-dijkstravisitor-examine-edge"]], "rustworkx.visit.DijkstraVisitor.finish_vertex": [[571, "rustworkx-visit-dijkstravisitor-finish-vertex"]], "rustworkx.visit.PruneSearch": [[572, "rustworkx-visit-prunesearch"]], "rustworkx.visit.StopSearch": [[573, "rustworkx-visit-stopsearch"]], "rustworkx.visualization.graphviz_draw": [[574, "rustworkx-visualization-graphviz-draw"]], "rustworkx.visualization.mpl_draw": [[575, "rustworkx-visualization-mpl-draw"]], "rustworkx.weakly_connected_components": [[576, "rustworkx-weakly-connected-components"]], "Rustworkx Comparison Benchmarks With Other Libraries": [[577, "rustworkx-comparison-benchmarks-with-other-libraries"]], "Graph Creation": [[577, "graph-creation"]], "Single Source Shortest Path": [[577, "single-source-shortest-path"]], "All-Pairs Shortest Path": [[577, "all-pairs-shortest-path"]], "Subgraph Isomorphism": [[577, "subgraph-isomorphism"]], "Citation": [[577, "citation"]], "rustworkx Documentation": [[578, "rustworkx-documentation"]], "Project history": [[578, "project-history"]], "Getting Started": [[579, "getting-started"]], "Installing Rustworkx": [[579, "installing-rustworkx"]], "Installing on a platform without precompiled binaries": [[579, "installing-on-a-platform-without-precompiled-binaries"]], "Platform Support": [[579, "platform-support"], [579, "id7"]], "Tier 1": [[579, "tier-1"]], "Tier 2": [[579, "tier-2"]], "Tier 3": [[579, "tier-3"]], "Tier 4": [[579, "tier-4"]], "Using rustworkx": [[579, "using-rustworkx"]], "rustworkx for NetworkX users": [[580, "rustworkx-for-networkx-users"]], "Some Key Differences": [[580, "some-key-differences"]], "Graph Data and Attributes": [[580, "graph-data-and-attributes"]], "Nodes": [[580, "nodes"], [585, "nodes"]], "Edges": [[580, "edges"], [585, "edges"]], "Attributes": [[580, "attributes"]], "Examining elements of a graph": [[580, "examining-elements-of-a-graph"], [585, "examining-elements-of-a-graph"]], "API Equivalents": [[580, "api-equivalents"]], "Class Constructors": [[580, "class-constructors"]], "Graph Modifiers": [[580, "graph-modifiers"]], "Matrix Converter Functions": [[580, "matrix-converter-functions"]], "Visualization Functions": [[580, "visualization-functions"]], "Matplotlib Drawers": [[580, "matplotlib-drawers"]], "Converting from a networkx graph": [[580, "converting-from-a-networkx-graph"]], "Functionality Gaps": [[580, "functionality-gaps"]], "0.15.1-60": [[581, "relnotes-0-15-1-60"]], "New Features": [[581, "new-features"], [581, "relnotes-0-15-0-new-features"], [581, "relnotes-0-14-0-new-features"], [581, "relnotes-0-13-0-new-features"], [581, "relnotes-0-12-0-new-features"], [581, "relnotes-0-11-0-new-features"], [581, "relnotes-0-10-2-new-features"], [581, "relnotes-0-10-0-new-features"], [581, "relnotes-0-9-0-new-features"], [581, "relnotes-0-8-0-new-features"], [581, "id55"], [581, "id58"], [581, "id62"], [581, "id65"]], "Upgrade Notes": [[581, "upgrade-notes"], [581, "relnotes-0-15-0-upgrade-notes"], [581, "relnotes-0-14-0-upgrade-notes"], [581, "relnotes-0-13-0-upgrade-notes"], [581, "relnotes-0-12-0-upgrade-notes"], [581, "relnotes-0-11-0-upgrade-notes"], [581, "relnotes-0-10-0-upgrade-notes"], [581, "relnotes-0-9-0-upgrade-notes"], [581, "relnotes-0-8-0-upgrade-notes"], [581, "id56"], [581, "id59"], [581, "id66"]], "Bug Fixes": [[581, "bug-fixes"], [581, "relnotes-0-15-1-bug-fixes"], [581, "relnotes-0-15-0-bug-fixes"], [581, "relnotes-0-14-0-bug-fixes"], [581, "relnotes-0-13-0-bug-fixes"], [581, "relnotes-0-12-0-bug-fixes"], [581, "relnotes-0-11-0-bug-fixes"], [581, "relnotes-0-10-2-bug-fixes"], [581, "relnotes-0-10-0-bug-fixes"], [581, "relnotes-0-9-0-bug-fixes"], [581, "relnotes-0-8-0-bug-fixes"]], "0.15.1": [[581, "relnotes-0-15-1"]], "Prelude": [[581, "prelude"], [581, "relnotes-0-15-0-prelude"], [581, "relnotes-0-14-0-prelude"], [581, "relnotes-0-13-0-prelude"], [581, "relnotes-0-12-0-prelude"], [581, "relnotes-0-11-0-prelude"], [581, "relnotes-0-10-2-prelude"], [581, "relnotes-0-10-1-prelude"], [581, "relnotes-0-10-0-prelude"], [581, "relnotes-0-9-0-prelude"], [581, "relnotes-0-8-0-prelude"]], "0.15.0": [[581, "relnotes-0-15-0"]], "Other Notes": [[581, "other-notes"], [581, "relnotes-0-14-0-other-notes"]], "0.14.0": [[581, "relnotes-0-14-0"]], "Deprecation Notes": [[581, "deprecation-notes"]], "0.13.0": [[581, "relnotes-0-13-0"]], "0.12.0": [[581, "relnotes-0-12-0"]], "0.11.0": [[581, "relnotes-0-11-0"]], "0.10.2": [[581, "relnotes-0-10-2"]], "0.10.1": [[581, "relnotes-0-10-1"]], "0.10.0": [[581, "relnotes-0-10-0"]], "0.9.0": [[581, "relnotes-0-9-0"]], "0.8.0": [[581, "relnotes-0-8-0"]], "0.7.1": [[581, "id53"]], "0.7.0": [[581, "id54"]], "Fixes": [[581, "fixes"], [581, "id60"], [581, "id63"], [581, "id67"]], "0.6.0": [[581, "id57"]], "0.5.0": [[581, "id61"]], "0.4.0": [[581, "id64"]], "Working with Betweenness Centrality": [[582, "working-with-betweenness-centrality"]], "Generate a Graph": [[582, "generate-a-graph"]], "Calculate the Betweenness Centrality": [[582, "calculate-the-betweenness-centrality"]], "Visualize the Betweenness Centrality": [[582, "visualize-the-betweenness-centrality"]], "Directed Acyclic Graphs": [[583, "directed-acyclic-graphs"], [583, "id1"]], "Directed Graph": [[583, "directed-graph"]], "Applications of DAGs": [[583, "applications-of-dags"]], "Task Scheduling": [[583, "task-scheduling"]], "Qiskit\u2019s Compiler": [[583, "qiskit-s-compiler"]], "rustworkx Tutorials and Guides": [[584, "rustworkx-tutorials-and-guides"]], "Introduction to rustworkx": [[585, "introduction-to-rustworkx"]], "Installing rustworkx": [[585, "installing-rustworkx"]], "How to import rustworkx": [[585, "how-to-import-rustworkx"]], "Creating a Graph": [[585, "creating-a-graph"]], "Removing elements from a graph": [[585, "removing-elements-from-a-graph"]], "Modifying elements of a graph": [[585, "modifying-elements-of-a-graph"]], "What to use for node and edge data payload": [[585, "what-to-use-for-node-and-edge-data-payload"]], "Accessing edges and neighbors": [[585, "accessing-edges-and-neighbors"]], "Graph Attributes": [[585, "graph-attributes"]], "Directed Graphs": [[585, "directed-graphs"]], "Multigraphs": [[585, "multigraphs"]], "Graph Generators and operations": [[585, "graph-generators-and-operations"]], "Analyzing graphs": [[585, "analyzing-graphs"]], "Drawing graphs": [[585, "drawing-graphs"]], "Visualization": [[586, "visualization"]], "Visualization API": [[586, "visualization-api"]]}, "indexentries": {"allpairspathlengthmapping (class in rustworkx)": [[26, "rustworkx.AllPairsPathLengthMapping"]], "items() (allpairspathlengthmapping method)": [[27, "rustworkx.AllPairsPathLengthMapping.items"]], "keys() (allpairspathlengthmapping method)": [[28, "rustworkx.AllPairsPathLengthMapping.keys"]], "values() (allpairspathlengthmapping method)": [[29, "rustworkx.AllPairsPathLengthMapping.values"]], "allpairspathmapping (class in rustworkx)": [[30, "rustworkx.AllPairsPathMapping"]], "items() (allpairspathmapping method)": [[31, "rustworkx.AllPairsPathMapping.items"]], "keys() (allpairspathmapping method)": [[32, "rustworkx.AllPairsPathMapping.keys"]], "values() (allpairspathmapping method)": [[33, "rustworkx.AllPairsPathMapping.values"]], "bfspredecessors (class in rustworkx)": [[34, "rustworkx.BFSPredecessors"]], "bfssuccessors (class in rustworkx)": [[35, "rustworkx.BFSSuccessors"]], "biconnectedcomponents (class in rustworkx)": [[36, "rustworkx.BiconnectedComponents"]], "items() (biconnectedcomponents method)": [[37, "rustworkx.BiconnectedComponents.items"]], "keys() (biconnectedcomponents method)": [[38, "rustworkx.BiconnectedComponents.keys"]], "values() (biconnectedcomponents method)": [[39, "rustworkx.BiconnectedComponents.values"]], "centralitymapping (class in rustworkx)": [[40, "rustworkx.CentralityMapping"]], "items() (centralitymapping method)": [[41, "rustworkx.CentralityMapping.items"]], "keys() (centralitymapping method)": [[42, "rustworkx.CentralityMapping.keys"]], "values() (centralitymapping method)": [[43, "rustworkx.CentralityMapping.values"]], "chains (class in rustworkx)": [[44, "rustworkx.Chains"]], "coloringstrategy (class in rustworkx)": [[45, "rustworkx.ColoringStrategy"]], "degree (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.Degree"]], "independentset (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.IndependentSet"]], "saturation (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.Saturation"]], "daghascycle": [[46, "rustworkx.DAGHasCycle"]], "dagwouldcycle": [[47, "rustworkx.DAGWouldCycle"]], "edgecentralitymapping (class in rustworkx)": [[48, "rustworkx.EdgeCentralityMapping"]], "items() (edgecentralitymapping method)": [[49, "rustworkx.EdgeCentralityMapping.items"]], "keys() (edgecentralitymapping method)": [[50, "rustworkx.EdgeCentralityMapping.keys"]], "values() (edgecentralitymapping method)": [[51, "rustworkx.EdgeCentralityMapping.values"]], "edgeindexmap (class in rustworkx)": [[52, "rustworkx.EdgeIndexMap"]], "items() (edgeindexmap method)": [[53, "rustworkx.EdgeIndexMap.items"]], "keys() (edgeindexmap method)": [[54, "rustworkx.EdgeIndexMap.keys"]], "values() (edgeindexmap method)": [[55, "rustworkx.EdgeIndexMap.values"]], "edgeindices (class in rustworkx)": [[56, "rustworkx.EdgeIndices"]], "edgelist (class in rustworkx)": [[57, "rustworkx.EdgeList"]], "graphnotbipartite": [[58, "rustworkx.GraphNotBipartite"]], "indexpartitionblock (class in rustworkx)": [[59, "rustworkx.IndexPartitionBlock"]], "invalidmapping": [[60, "rustworkx.InvalidMapping"]], "invalidnode": [[61, "rustworkx.InvalidNode"]], "jsonserializationerror": [[62, "rustworkx.JSONSerializationError"]], "negativecycle": [[63, "rustworkx.NegativeCycle"]], "noedgebetweennodes": [[64, "rustworkx.NoEdgeBetweenNodes"]], "nopathfound": [[65, "rustworkx.NoPathFound"]], "nosuitableneighbors": [[66, "rustworkx.NoSuitableNeighbors"]], "nodeindices (class in rustworkx)": [[67, "rustworkx.NodeIndices"]], "nodemap (class in rustworkx)": [[68, "rustworkx.NodeMap"]], "items() (nodemap method)": [[69, "rustworkx.NodeMap.items"]], "keys() (nodemap method)": [[70, "rustworkx.NodeMap.keys"]], "values() (nodemap method)": [[71, "rustworkx.NodeMap.values"]], "nullgraph": [[72, "rustworkx.NullGraph"]], "pathlengthmapping (class in rustworkx)": [[73, "rustworkx.PathLengthMapping"]], "items() (pathlengthmapping method)": [[74, "rustworkx.PathLengthMapping.items"]], "keys() (pathlengthmapping method)": [[75, "rustworkx.PathLengthMapping.keys"]], "values() (pathlengthmapping method)": [[76, "rustworkx.PathLengthMapping.values"]], "pathmapping (class in rustworkx)": [[77, "rustworkx.PathMapping"]], "items() (pathmapping method)": [[78, "rustworkx.PathMapping.items"]], "keys() (pathmapping method)": [[79, "rustworkx.PathMapping.keys"]], "values() (pathmapping method)": [[80, "rustworkx.PathMapping.values"]], "pos2dmapping (class in rustworkx)": [[81, "rustworkx.Pos2DMapping"]], "items() (pos2dmapping method)": [[82, "rustworkx.Pos2DMapping.items"]], "keys() (pos2dmapping method)": [[83, "rustworkx.Pos2DMapping.keys"]], "values() (pos2dmapping method)": [[84, "rustworkx.Pos2DMapping.values"]], "productnodemap (class in rustworkx)": [[85, "rustworkx.ProductNodeMap"]], "items() (productnodemap method)": [[86, "rustworkx.ProductNodeMap.items"]], "keys() (productnodemap method)": [[87, "rustworkx.ProductNodeMap.keys"]], "values() (productnodemap method)": [[88, "rustworkx.ProductNodeMap.values"]], "pydag (class in rustworkx)": [[89, "rustworkx.PyDAG"]], "attrs (pydag attribute)": [[89, "rustworkx.PyDAG.attrs"]], "check_cycle (pydag attribute)": [[89, "rustworkx.PyDAG.check_cycle"]], "multigraph (pydag attribute)": [[89, "rustworkx.PyDAG.multigraph"]], "add_child() (pydag method)": [[90, "rustworkx.PyDAG.add_child"]], "add_edge() (pydag method)": [[91, "rustworkx.PyDAG.add_edge"]], "add_edges_from() (pydag method)": [[92, "rustworkx.PyDAG.add_edges_from"]], "add_edges_from_no_data() (pydag method)": [[93, "rustworkx.PyDAG.add_edges_from_no_data"]], "add_node() (pydag method)": [[94, "rustworkx.PyDAG.add_node"]], "add_nodes_from() (pydag method)": [[95, "rustworkx.PyDAG.add_nodes_from"]], "add_parent() (pydag method)": [[96, "rustworkx.PyDAG.add_parent"]], "adj() (pydag method)": [[97, "rustworkx.PyDAG.adj"]], "adj_direction() (pydag method)": [[98, "rustworkx.PyDAG.adj_direction"]], "clear() (pydag method)": [[99, "rustworkx.PyDAG.clear"]], "clear_edges() (pydag method)": [[100, "rustworkx.PyDAG.clear_edges"]], "compose() (pydag method)": [[101, "rustworkx.PyDAG.compose"]], "contract_nodes() (pydag method)": [[102, "rustworkx.PyDAG.contract_nodes"]], "copy() (pydag method)": [[103, "rustworkx.PyDAG.copy"]], "edge_index_map() (pydag method)": [[104, "rustworkx.PyDAG.edge_index_map"]], "edge_indices() (pydag method)": [[105, "rustworkx.PyDAG.edge_indices"]], "edge_indices_from_endpoints() (pydag method)": [[106, "rustworkx.PyDAG.edge_indices_from_endpoints"]], "edge_list() (pydag method)": [[107, "rustworkx.PyDAG.edge_list"]], "edge_subgraph() (pydag method)": [[108, "rustworkx.PyDAG.edge_subgraph"]], "edges() (pydag method)": [[109, "rustworkx.PyDAG.edges"]], "extend_from_edge_list() (pydag method)": [[110, "rustworkx.PyDAG.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydag method)": [[111, "rustworkx.PyDAG.extend_from_weighted_edge_list"]], "filter_edges() (pydag method)": [[112, "rustworkx.PyDAG.filter_edges"]], "filter_nodes() (pydag method)": [[113, "rustworkx.PyDAG.filter_nodes"]], "find_adjacent_node_by_edge() (pydag method)": [[114, "rustworkx.PyDAG.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydag method)": [[115, "rustworkx.PyDAG.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydag method)": [[116, "rustworkx.PyDAG.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydag method)": [[117, "rustworkx.PyDAG.find_predecessors_by_edge"]], "find_successors_by_edge() (pydag method)": [[118, "rustworkx.PyDAG.find_successors_by_edge"]], "from_adjacency_matrix() (pydag static method)": [[119, "rustworkx.PyDAG.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydag static method)": [[120, "rustworkx.PyDAG.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydag method)": [[121, "rustworkx.PyDAG.get_all_edge_data"]], "get_edge_data() (pydag method)": [[122, "rustworkx.PyDAG.get_edge_data"]], "get_edge_data_by_index() (pydag method)": [[123, "rustworkx.PyDAG.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydag method)": [[124, "rustworkx.PyDAG.get_edge_endpoints_by_index"]], "get_node_data() (pydag method)": [[125, "rustworkx.PyDAG.get_node_data"]], "has_edge() (pydag method)": [[126, "rustworkx.PyDAG.has_edge"]], "has_node() (pydag method)": [[127, "rustworkx.PyDAG.has_node"]], "has_parallel_edges() (pydag method)": [[128, "rustworkx.PyDAG.has_parallel_edges"]], "in_degree() (pydag method)": [[129, "rustworkx.PyDAG.in_degree"]], "in_edges() (pydag method)": [[130, "rustworkx.PyDAG.in_edges"]], "incident_edge_index_map() (pydag method)": [[131, "rustworkx.PyDAG.incident_edge_index_map"]], "incident_edges() (pydag method)": [[132, "rustworkx.PyDAG.incident_edges"]], "insert_node_on_in_edges() (pydag method)": [[133, "rustworkx.PyDAG.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydag method)": [[134, "rustworkx.PyDAG.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydag method)": [[135, "rustworkx.PyDAG.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydag method)": [[136, "rustworkx.PyDAG.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydag method)": [[137, "rustworkx.PyDAG.is_symmetric"]], "make_symmetric() (pydag method)": [[138, "rustworkx.PyDAG.make_symmetric"]], "merge_nodes() (pydag method)": [[139, "rustworkx.PyDAG.merge_nodes"]], "neighbors() (pydag method)": [[140, "rustworkx.PyDAG.neighbors"]], "neighbors_undirected() (pydag method)": [[141, "rustworkx.PyDAG.neighbors_undirected"]], "node_indexes() (pydag method)": [[142, "rustworkx.PyDAG.node_indexes"]], "node_indices() (pydag method)": [[143, "rustworkx.PyDAG.node_indices"]], "nodes() (pydag method)": [[144, "rustworkx.PyDAG.nodes"]], "num_edges() (pydag method)": [[145, "rustworkx.PyDAG.num_edges"]], "num_nodes() (pydag method)": [[146, "rustworkx.PyDAG.num_nodes"]], "out_degree() (pydag method)": [[147, "rustworkx.PyDAG.out_degree"]], "out_edges() (pydag method)": [[148, "rustworkx.PyDAG.out_edges"]], "predecessor_indices() (pydag method)": [[149, "rustworkx.PyDAG.predecessor_indices"]], "predecessors() (pydag method)": [[150, "rustworkx.PyDAG.predecessors"]], "read_edge_list() (pydag static method)": [[151, "rustworkx.PyDAG.read_edge_list"]], "remove_edge() (pydag method)": [[152, "rustworkx.PyDAG.remove_edge"]], "remove_edge_from_index() (pydag method)": [[153, "rustworkx.PyDAG.remove_edge_from_index"]], "remove_edges_from() (pydag method)": [[154, "rustworkx.PyDAG.remove_edges_from"]], "remove_node() (pydag method)": [[155, "rustworkx.PyDAG.remove_node"]], "remove_node_retain_edges() (pydag method)": [[156, "rustworkx.PyDAG.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydag method)": [[157, "rustworkx.PyDAG.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydag method)": [[158, "rustworkx.PyDAG.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydag method)": [[159, "rustworkx.PyDAG.remove_nodes_from"]], "reverse() (pydag method)": [[160, "rustworkx.PyDAG.reverse"]], "subgraph() (pydag method)": [[161, "rustworkx.PyDAG.subgraph"]], "substitute_node_with_subgraph() (pydag method)": [[162, "rustworkx.PyDAG.substitute_node_with_subgraph"]], "successor_indices() (pydag method)": [[163, "rustworkx.PyDAG.successor_indices"]], "successors() (pydag method)": [[164, "rustworkx.PyDAG.successors"]], "to_dot() (pydag method)": [[165, "rustworkx.PyDAG.to_dot"]], "to_undirected() (pydag method)": [[166, "rustworkx.PyDAG.to_undirected"]], "update_edge() (pydag method)": [[167, "rustworkx.PyDAG.update_edge"]], "update_edge_by_index() (pydag method)": [[168, "rustworkx.PyDAG.update_edge_by_index"]], "weighted_edge_list() (pydag method)": [[169, "rustworkx.PyDAG.weighted_edge_list"]], "write_edge_list() (pydag method)": [[170, "rustworkx.PyDAG.write_edge_list"]], "pydigraph (class in rustworkx)": [[171, "rustworkx.PyDiGraph"]], "attrs (pydigraph attribute)": [[171, "rustworkx.PyDiGraph.attrs"]], "check_cycle (pydigraph attribute)": [[171, "rustworkx.PyDiGraph.check_cycle"]], "multigraph (pydigraph attribute)": [[171, "rustworkx.PyDiGraph.multigraph"]], "add_child() (pydigraph method)": [[172, "rustworkx.PyDiGraph.add_child"]], "add_edge() (pydigraph method)": [[173, "rustworkx.PyDiGraph.add_edge"]], "add_edges_from() (pydigraph method)": [[174, "rustworkx.PyDiGraph.add_edges_from"]], "add_edges_from_no_data() (pydigraph method)": [[175, "rustworkx.PyDiGraph.add_edges_from_no_data"]], "add_node() (pydigraph method)": [[176, "rustworkx.PyDiGraph.add_node"]], "add_nodes_from() (pydigraph method)": [[177, "rustworkx.PyDiGraph.add_nodes_from"]], "add_parent() (pydigraph method)": [[178, "rustworkx.PyDiGraph.add_parent"]], "adj() (pydigraph method)": [[179, "rustworkx.PyDiGraph.adj"]], "adj_direction() (pydigraph method)": [[180, "rustworkx.PyDiGraph.adj_direction"]], "clear() (pydigraph method)": [[181, "rustworkx.PyDiGraph.clear"]], "clear_edges() (pydigraph method)": [[182, "rustworkx.PyDiGraph.clear_edges"]], "compose() (pydigraph method)": [[183, "rustworkx.PyDiGraph.compose"]], "contract_nodes() (pydigraph method)": [[184, "rustworkx.PyDiGraph.contract_nodes"]], "copy() (pydigraph method)": [[185, "rustworkx.PyDiGraph.copy"]], "edge_index_map() (pydigraph method)": [[186, "rustworkx.PyDiGraph.edge_index_map"]], "edge_indices() (pydigraph method)": [[187, "rustworkx.PyDiGraph.edge_indices"]], "edge_indices_from_endpoints() (pydigraph method)": [[188, "rustworkx.PyDiGraph.edge_indices_from_endpoints"]], "edge_list() (pydigraph method)": [[189, "rustworkx.PyDiGraph.edge_list"]], "edge_subgraph() (pydigraph method)": [[190, "rustworkx.PyDiGraph.edge_subgraph"]], "edges() (pydigraph method)": [[191, "rustworkx.PyDiGraph.edges"]], "extend_from_edge_list() (pydigraph method)": [[192, "rustworkx.PyDiGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydigraph method)": [[193, "rustworkx.PyDiGraph.extend_from_weighted_edge_list"]], "filter_edges() (pydigraph method)": [[194, "rustworkx.PyDiGraph.filter_edges"]], "filter_nodes() (pydigraph method)": [[195, "rustworkx.PyDiGraph.filter_nodes"]], "find_adjacent_node_by_edge() (pydigraph method)": [[196, "rustworkx.PyDiGraph.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydigraph method)": [[197, "rustworkx.PyDiGraph.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydigraph method)": [[198, "rustworkx.PyDiGraph.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydigraph method)": [[199, "rustworkx.PyDiGraph.find_predecessors_by_edge"]], "find_successors_by_edge() (pydigraph method)": [[200, "rustworkx.PyDiGraph.find_successors_by_edge"]], "from_adjacency_matrix() (pydigraph static method)": [[201, "rustworkx.PyDiGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydigraph static method)": [[202, "rustworkx.PyDiGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydigraph method)": [[203, "rustworkx.PyDiGraph.get_all_edge_data"]], "get_edge_data() (pydigraph method)": [[204, "rustworkx.PyDiGraph.get_edge_data"]], "get_edge_data_by_index() (pydigraph method)": [[205, "rustworkx.PyDiGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydigraph method)": [[206, "rustworkx.PyDiGraph.get_edge_endpoints_by_index"]], "get_node_data() (pydigraph method)": [[207, "rustworkx.PyDiGraph.get_node_data"]], "has_edge() (pydigraph method)": [[208, "rustworkx.PyDiGraph.has_edge"]], "has_node() (pydigraph method)": [[209, "rustworkx.PyDiGraph.has_node"]], "has_parallel_edges() (pydigraph method)": [[210, "rustworkx.PyDiGraph.has_parallel_edges"]], "in_degree() (pydigraph method)": [[211, "rustworkx.PyDiGraph.in_degree"]], "in_edges() (pydigraph method)": [[212, "rustworkx.PyDiGraph.in_edges"]], "incident_edge_index_map() (pydigraph method)": [[213, "rustworkx.PyDiGraph.incident_edge_index_map"]], "incident_edges() (pydigraph method)": [[214, "rustworkx.PyDiGraph.incident_edges"]], "insert_node_on_in_edges() (pydigraph method)": [[215, "rustworkx.PyDiGraph.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydigraph method)": [[216, "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydigraph method)": [[217, "rustworkx.PyDiGraph.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydigraph method)": [[218, "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydigraph method)": [[219, "rustworkx.PyDiGraph.is_symmetric"]], "make_symmetric() (pydigraph method)": [[220, "rustworkx.PyDiGraph.make_symmetric"]], "merge_nodes() (pydigraph method)": [[221, "rustworkx.PyDiGraph.merge_nodes"]], "neighbors() (pydigraph method)": [[222, "rustworkx.PyDiGraph.neighbors"]], "neighbors_undirected() (pydigraph method)": [[223, "rustworkx.PyDiGraph.neighbors_undirected"]], "node_indexes() (pydigraph method)": [[224, "rustworkx.PyDiGraph.node_indexes"]], "node_indices() (pydigraph method)": [[225, "rustworkx.PyDiGraph.node_indices"]], "nodes() (pydigraph method)": [[226, "rustworkx.PyDiGraph.nodes"]], "num_edges() (pydigraph method)": [[227, "rustworkx.PyDiGraph.num_edges"]], "num_nodes() (pydigraph method)": [[228, "rustworkx.PyDiGraph.num_nodes"]], "out_degree() (pydigraph method)": [[229, "rustworkx.PyDiGraph.out_degree"]], "out_edges() (pydigraph method)": [[230, "rustworkx.PyDiGraph.out_edges"]], "predecessor_indices() (pydigraph method)": [[231, "rustworkx.PyDiGraph.predecessor_indices"]], "predecessors() (pydigraph method)": [[232, "rustworkx.PyDiGraph.predecessors"]], "read_edge_list() (pydigraph static method)": [[233, "rustworkx.PyDiGraph.read_edge_list"]], "remove_edge() (pydigraph method)": [[234, "rustworkx.PyDiGraph.remove_edge"]], "remove_edge_from_index() (pydigraph method)": [[235, "rustworkx.PyDiGraph.remove_edge_from_index"]], "remove_edges_from() (pydigraph method)": [[236, "rustworkx.PyDiGraph.remove_edges_from"]], "remove_node() (pydigraph method)": [[237, "rustworkx.PyDiGraph.remove_node"]], "remove_node_retain_edges() (pydigraph method)": [[238, "rustworkx.PyDiGraph.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydigraph method)": [[239, "rustworkx.PyDiGraph.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydigraph method)": [[240, "rustworkx.PyDiGraph.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydigraph method)": [[241, "rustworkx.PyDiGraph.remove_nodes_from"]], "reverse() (pydigraph method)": [[242, "rustworkx.PyDiGraph.reverse"]], "subgraph() (pydigraph method)": [[243, "rustworkx.PyDiGraph.subgraph"]], "substitute_node_with_subgraph() (pydigraph method)": [[244, "rustworkx.PyDiGraph.substitute_node_with_subgraph"]], "successor_indices() (pydigraph method)": [[245, "rustworkx.PyDiGraph.successor_indices"]], "successors() (pydigraph method)": [[246, "rustworkx.PyDiGraph.successors"]], "to_dot() (pydigraph method)": [[247, "rustworkx.PyDiGraph.to_dot"]], "to_undirected() (pydigraph method)": [[248, "rustworkx.PyDiGraph.to_undirected"]], "update_edge() (pydigraph method)": [[249, "rustworkx.PyDiGraph.update_edge"]], "update_edge_by_index() (pydigraph method)": [[250, "rustworkx.PyDiGraph.update_edge_by_index"]], "weighted_edge_list() (pydigraph method)": [[251, "rustworkx.PyDiGraph.weighted_edge_list"]], "write_edge_list() (pydigraph method)": [[252, "rustworkx.PyDiGraph.write_edge_list"]], "pygraph (class in rustworkx)": [[253, "rustworkx.PyGraph"]], "attrs (pygraph attribute)": [[253, "rustworkx.PyGraph.attrs"]], "multigraph (pygraph attribute)": [[253, "rustworkx.PyGraph.multigraph"]], "add_edge() (pygraph method)": [[254, "rustworkx.PyGraph.add_edge"]], "add_edges_from() (pygraph method)": [[255, "rustworkx.PyGraph.add_edges_from"]], "add_edges_from_no_data() (pygraph method)": [[256, "rustworkx.PyGraph.add_edges_from_no_data"]], "add_node() (pygraph method)": [[257, "rustworkx.PyGraph.add_node"]], "add_nodes_from() (pygraph method)": [[258, "rustworkx.PyGraph.add_nodes_from"]], "adj() (pygraph method)": [[259, "rustworkx.PyGraph.adj"]], "clear() (pygraph method)": [[260, "rustworkx.PyGraph.clear"]], "clear_edges() (pygraph method)": [[261, "rustworkx.PyGraph.clear_edges"]], "compose() (pygraph method)": [[262, "rustworkx.PyGraph.compose"]], "contract_nodes() (pygraph method)": [[263, "rustworkx.PyGraph.contract_nodes"]], "copy() (pygraph method)": [[264, "rustworkx.PyGraph.copy"]], "degree() (pygraph method)": [[265, "rustworkx.PyGraph.degree"]], "edge_index_map() (pygraph method)": [[266, "rustworkx.PyGraph.edge_index_map"]], "edge_indices() (pygraph method)": [[267, "rustworkx.PyGraph.edge_indices"]], "edge_indices_from_endpoints() (pygraph method)": [[268, "rustworkx.PyGraph.edge_indices_from_endpoints"]], "edge_list() (pygraph method)": [[269, "rustworkx.PyGraph.edge_list"]], "edge_subgraph() (pygraph method)": [[270, "rustworkx.PyGraph.edge_subgraph"]], "edges() (pygraph method)": [[271, "rustworkx.PyGraph.edges"]], "extend_from_edge_list() (pygraph method)": [[272, "rustworkx.PyGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pygraph method)": [[273, "rustworkx.PyGraph.extend_from_weighted_edge_list"]], "filter_edges() (pygraph method)": [[274, "rustworkx.PyGraph.filter_edges"]], "filter_nodes() (pygraph method)": [[275, "rustworkx.PyGraph.filter_nodes"]], "find_node_by_weight() (pygraph method)": [[276, "rustworkx.PyGraph.find_node_by_weight"]], "from_adjacency_matrix() (pygraph static method)": [[277, "rustworkx.PyGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pygraph static method)": [[278, "rustworkx.PyGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pygraph method)": [[279, "rustworkx.PyGraph.get_all_edge_data"]], "get_edge_data() (pygraph method)": [[280, "rustworkx.PyGraph.get_edge_data"]], "get_edge_data_by_index() (pygraph method)": [[281, "rustworkx.PyGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pygraph method)": [[282, "rustworkx.PyGraph.get_edge_endpoints_by_index"]], "get_node_data() (pygraph method)": [[283, "rustworkx.PyGraph.get_node_data"]], "has_edge() (pygraph method)": [[284, "rustworkx.PyGraph.has_edge"]], "has_node() (pygraph method)": [[285, "rustworkx.PyGraph.has_node"]], "has_parallel_edges() (pygraph method)": [[286, "rustworkx.PyGraph.has_parallel_edges"]], "in_edges() (pygraph method)": [[287, "rustworkx.PyGraph.in_edges"]], "incident_edge_index_map() (pygraph method)": [[288, "rustworkx.PyGraph.incident_edge_index_map"]], "incident_edges() (pygraph method)": [[289, "rustworkx.PyGraph.incident_edges"]], "neighbors() (pygraph method)": [[290, "rustworkx.PyGraph.neighbors"]], "node_indexes() (pygraph method)": [[291, "rustworkx.PyGraph.node_indexes"]], "node_indices() (pygraph method)": [[292, "rustworkx.PyGraph.node_indices"]], "nodes() (pygraph method)": [[293, "rustworkx.PyGraph.nodes"]], "num_edges() (pygraph method)": [[294, "rustworkx.PyGraph.num_edges"]], "num_nodes() (pygraph method)": [[295, "rustworkx.PyGraph.num_nodes"]], "out_edges() (pygraph method)": [[296, "rustworkx.PyGraph.out_edges"]], "read_edge_list() (pygraph static method)": [[297, "rustworkx.PyGraph.read_edge_list"]], "remove_edge() (pygraph method)": [[298, "rustworkx.PyGraph.remove_edge"]], "remove_edge_from_index() (pygraph method)": [[299, "rustworkx.PyGraph.remove_edge_from_index"]], "remove_edges_from() (pygraph method)": [[300, "rustworkx.PyGraph.remove_edges_from"]], "remove_node() (pygraph method)": [[301, "rustworkx.PyGraph.remove_node"]], "remove_nodes_from() (pygraph method)": [[302, "rustworkx.PyGraph.remove_nodes_from"]], "subgraph() (pygraph method)": [[303, "rustworkx.PyGraph.subgraph"]], "substitute_node_with_subgraph() (pygraph method)": [[304, "rustworkx.PyGraph.substitute_node_with_subgraph"]], "to_directed() (pygraph method)": [[305, "rustworkx.PyGraph.to_directed"]], "to_dot() (pygraph method)": [[306, "rustworkx.PyGraph.to_dot"]], "update_edge() (pygraph method)": [[307, "rustworkx.PyGraph.update_edge"]], "update_edge_by_index() (pygraph method)": [[308, "rustworkx.PyGraph.update_edge_by_index"]], "weighted_edge_list() (pygraph method)": [[309, "rustworkx.PyGraph.weighted_edge_list"]], "write_edge_list() (pygraph method)": [[310, "rustworkx.PyGraph.write_edge_list"]], "relationalcoarsestpartition (class in rustworkx)": [[311, "rustworkx.RelationalCoarsestPartition"]], "topologicalsorter (class in rustworkx)": [[312, "rustworkx.TopologicalSorter"]], "done() (topologicalsorter method)": [[313, "rustworkx.TopologicalSorter.done"]], "get_ready() (topologicalsorter method)": [[314, "rustworkx.TopologicalSorter.get_ready"]], "is_active() (topologicalsorter method)": [[315, "rustworkx.TopologicalSorter.is_active"]], "weightededgelist (class in rustworkx)": [[316, "rustworkx.WeightedEdgeList"]], "adjacency_matrix() (in module rustworkx)": [[317, "rustworkx.adjacency_matrix"]], "all_pairs_all_simple_paths() (in module rustworkx)": [[318, "rustworkx.all_pairs_all_simple_paths"]], "all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[319, "rustworkx.all_pairs_bellman_ford_path_lengths"]], "all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[320, "rustworkx.all_pairs_bellman_ford_shortest_paths"]], "all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[321, "rustworkx.all_pairs_dijkstra_path_lengths"]], "all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[322, "rustworkx.all_pairs_dijkstra_shortest_paths"]], "all_shortest_paths() (in module rustworkx)": [[323, "rustworkx.all_shortest_paths"]], "all_simple_paths() (in module rustworkx)": [[324, "rustworkx.all_simple_paths"]], "ancestors() (in module rustworkx)": [[325, "rustworkx.ancestors"]], "articulation_points() (in module rustworkx)": [[326, "rustworkx.articulation_points"]], "astar_shortest_path() (in module rustworkx)": [[327, "rustworkx.astar_shortest_path"]], "barabasi_albert_graph() (in module rustworkx)": [[328, "rustworkx.barabasi_albert_graph"]], "bellman_ford_shortest_path_lengths() (in module rustworkx)": [[329, "rustworkx.bellman_ford_shortest_path_lengths"]], "bellman_ford_shortest_paths() (in module rustworkx)": [[330, "rustworkx.bellman_ford_shortest_paths"]], "betweenness_centrality() (in module rustworkx)": [[331, "rustworkx.betweenness_centrality"]], "bfs_predecessors() (in module rustworkx)": [[332, "rustworkx.bfs_predecessors"]], "bfs_search() (in module rustworkx)": [[333, "rustworkx.bfs_search"]], "bfs_successors() (in module rustworkx)": [[334, "rustworkx.bfs_successors"]], "biconnected_components() (in module rustworkx)": [[335, "rustworkx.biconnected_components"]], "bipartite_layout() (in module rustworkx)": [[336, "rustworkx.bipartite_layout"]], "bridges() (in module rustworkx)": [[337, "rustworkx.bridges"]], "cartesian_product() (in module rustworkx)": [[338, "rustworkx.cartesian_product"]], "chain_decomposition() (in module rustworkx)": [[339, "rustworkx.chain_decomposition"]], "circular_layout() (in module rustworkx)": [[340, "rustworkx.circular_layout"]], "closeness_centrality() (in module rustworkx)": [[341, "rustworkx.closeness_centrality"]], "collect_bicolor_runs() (in module rustworkx)": [[342, "rustworkx.collect_bicolor_runs"]], "collect_runs() (in module rustworkx)": [[343, "rustworkx.collect_runs"]], "complement() (in module rustworkx)": [[344, "rustworkx.complement"]], "connected_components() (in module rustworkx)": [[345, "rustworkx.connected_components"]], "connected_subgraphs() (in module rustworkx)": [[346, "rustworkx.connected_subgraphs"]], "core_number() (in module rustworkx)": [[347, "rustworkx.core_number"]], "cycle_basis() (in module rustworkx)": [[348, "rustworkx.cycle_basis"]], "dag_longest_path() (in module rustworkx)": [[349, "rustworkx.dag_longest_path"]], "dag_longest_path_length() (in module rustworkx)": [[350, "rustworkx.dag_longest_path_length"]], "dag_weighted_longest_path() (in module rustworkx)": [[351, "rustworkx.dag_weighted_longest_path"]], "dag_weighted_longest_path_length() (in module rustworkx)": [[352, "rustworkx.dag_weighted_longest_path_length"]], "descendants() (in module rustworkx)": [[353, "rustworkx.descendants"]], "dfs_edges() (in module rustworkx)": [[354, "rustworkx.dfs_edges"]], "dfs_search() (in module rustworkx)": [[355, "rustworkx.dfs_search"]], "digraph_adjacency_matrix() (in module rustworkx)": [[356, "rustworkx.digraph_adjacency_matrix"]], "digraph_all_pairs_all_simple_paths() (in module rustworkx)": [[357, "rustworkx.digraph_all_pairs_all_simple_paths"]], "digraph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[358, "rustworkx.digraph_all_pairs_bellman_ford_path_lengths"]], "digraph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[359, "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths"]], "digraph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[360, "rustworkx.digraph_all_pairs_dijkstra_path_lengths"]], "digraph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[361, "rustworkx.digraph_all_pairs_dijkstra_shortest_paths"]], "digraph_all_shortest_paths() (in module rustworkx)": [[362, "rustworkx.digraph_all_shortest_paths"]], "digraph_all_simple_paths() (in module rustworkx)": [[363, "rustworkx.digraph_all_simple_paths"]], "digraph_astar_shortest_path() (in module rustworkx)": [[364, "rustworkx.digraph_astar_shortest_path"]], "digraph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[365, "rustworkx.digraph_bellman_ford_shortest_path_lengths"]], "digraph_betweenness_centrality() (in module rustworkx)": [[366, "rustworkx.digraph_betweenness_centrality"]], "digraph_bfs_search() (in module rustworkx)": [[367, "rustworkx.digraph_bfs_search"]], "digraph_bipartite_layout() (in module rustworkx)": [[368, "rustworkx.digraph_bipartite_layout"]], "digraph_cartesian_product() (in module rustworkx)": [[369, "rustworkx.digraph_cartesian_product"]], "digraph_circular_layout() (in module rustworkx)": [[370, "rustworkx.digraph_circular_layout"]], "digraph_closeness_centrality() (in module rustworkx)": [[371, "rustworkx.digraph_closeness_centrality"]], "digraph_complement() (in module rustworkx)": [[372, "rustworkx.digraph_complement"]], "digraph_core_number() (in module rustworkx)": [[373, "rustworkx.digraph_core_number"]], "digraph_dfs_edges() (in module rustworkx)": [[374, "rustworkx.digraph_dfs_edges"]], "digraph_dfs_search() (in module rustworkx)": [[375, "rustworkx.digraph_dfs_search"]], "digraph_dijkstra_search() (in module rustworkx)": [[376, "rustworkx.digraph_dijkstra_search"]], "digraph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[377, "rustworkx.digraph_dijkstra_shortest_path_lengths"]], "digraph_dijkstra_shortest_paths() (in module rustworkx)": [[378, "rustworkx.digraph_dijkstra_shortest_paths"]], "digraph_distance_matrix() (in module rustworkx)": [[379, "rustworkx.digraph_distance_matrix"]], "digraph_edge_betweenness_centrality() (in module rustworkx)": [[380, "rustworkx.digraph_edge_betweenness_centrality"]], "digraph_eigenvector_centrality() (in module rustworkx)": [[381, "rustworkx.digraph_eigenvector_centrality"]], "digraph_find_cycle() (in module rustworkx)": [[382, "rustworkx.digraph_find_cycle"]], "digraph_floyd_warshall() (in module rustworkx)": [[383, "rustworkx.digraph_floyd_warshall"]], "digraph_floyd_warshall_numpy() (in module rustworkx)": [[384, "rustworkx.digraph_floyd_warshall_numpy"]], "digraph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[385, "rustworkx.digraph_floyd_warshall_successor_and_distance"]], "digraph_is_isomorphic() (in module rustworkx)": [[386, "rustworkx.digraph_is_isomorphic"]], "digraph_is_subgraph_isomorphic() (in module rustworkx)": [[387, "rustworkx.digraph_is_subgraph_isomorphic"]], "digraph_k_shortest_path_lengths() (in module rustworkx)": [[388, "rustworkx.digraph_k_shortest_path_lengths"]], "digraph_katz_centrality() (in module rustworkx)": [[389, "rustworkx.digraph_katz_centrality"]], "digraph_longest_simple_path() (in module rustworkx)": [[390, "rustworkx.digraph_longest_simple_path"]], "digraph_maximum_bisimulation() (in module rustworkx)": [[391, "rustworkx.digraph_maximum_bisimulation"]], "digraph_node_link_json() (in module rustworkx)": [[392, "rustworkx.digraph_node_link_json"]], "digraph_num_shortest_paths_unweighted() (in module rustworkx)": [[393, "rustworkx.digraph_num_shortest_paths_unweighted"]], "digraph_random_layout() (in module rustworkx)": [[394, "rustworkx.digraph_random_layout"]], "digraph_shell_layout() (in module rustworkx)": [[395, "rustworkx.digraph_shell_layout"]], "digraph_spiral_layout() (in module rustworkx)": [[396, "rustworkx.digraph_spiral_layout"]], "digraph_spring_layout() (in module rustworkx)": [[397, "rustworkx.digraph_spring_layout"]], "digraph_tensor_product() (in module rustworkx)": [[398, "rustworkx.digraph_tensor_product"]], "digraph_transitivity() (in module rustworkx)": [[399, "rustworkx.digraph_transitivity"]], "digraph_union() (in module rustworkx)": [[400, "rustworkx.digraph_union"]], "digraph_unweighted_average_shortest_path_length() (in module rustworkx)": [[401, "rustworkx.digraph_unweighted_average_shortest_path_length"]], "digraph_vf2_mapping() (in module rustworkx)": [[402, "rustworkx.digraph_vf2_mapping"]], "dijkstra_search() (in module rustworkx)": [[403, "rustworkx.dijkstra_search"]], "dijkstra_shortest_path_lengths() (in module rustworkx)": [[404, "rustworkx.dijkstra_shortest_path_lengths"]], "dijkstra_shortest_paths() (in module rustworkx)": [[405, "rustworkx.dijkstra_shortest_paths"]], "directed_barabasi_albert_graph() (in module rustworkx)": [[406, "rustworkx.directed_barabasi_albert_graph"]], "directed_gnm_random_graph() (in module rustworkx)": [[407, "rustworkx.directed_gnm_random_graph"]], "directed_gnp_random_graph() (in module rustworkx)": [[408, "rustworkx.directed_gnp_random_graph"]], "directed_random_bipartite_graph() (in module rustworkx)": [[409, "rustworkx.directed_random_bipartite_graph"]], "directed_sbm_random_graph() (in module rustworkx)": [[410, "rustworkx.directed_sbm_random_graph"]], "distance_matrix() (in module rustworkx)": [[411, "rustworkx.distance_matrix"]], "dominance_frontiers() (in module rustworkx)": [[412, "rustworkx.dominance_frontiers"]], "edge_betweenness_centrality() (in module rustworkx)": [[413, "rustworkx.edge_betweenness_centrality"]], "eigenvector_centrality() (in module rustworkx)": [[414, "rustworkx.eigenvector_centrality"]], "find_negative_cycle() (in module rustworkx)": [[415, "rustworkx.find_negative_cycle"]], "floyd_warshall() (in module rustworkx)": [[416, "rustworkx.floyd_warshall"]], "floyd_warshall_numpy() (in module rustworkx)": [[417, "rustworkx.floyd_warshall_numpy"]], "floyd_warshall_successor_and_distance() (in module rustworkx)": [[418, "rustworkx.floyd_warshall_successor_and_distance"]], "from_node_link_json_file() (in module rustworkx)": [[419, "rustworkx.from_node_link_json_file"]], "barbell_graph() (in module rustworkx.generators)": [[420, "rustworkx.generators.barbell_graph"]], "binomial_tree_graph() (in module rustworkx.generators)": [[421, "rustworkx.generators.binomial_tree_graph"]], "complete_graph() (in module rustworkx.generators)": [[422, "rustworkx.generators.complete_graph"]], "cycle_graph() (in module rustworkx.generators)": [[423, "rustworkx.generators.cycle_graph"]], "directed_binomial_tree_graph() (in module rustworkx.generators)": [[424, "rustworkx.generators.directed_binomial_tree_graph"]], "directed_complete_graph() (in module rustworkx.generators)": [[425, "rustworkx.generators.directed_complete_graph"]], "directed_cycle_graph() (in module rustworkx.generators)": [[426, "rustworkx.generators.directed_cycle_graph"]], "directed_empty_graph() (in module rustworkx.generators)": [[427, "rustworkx.generators.directed_empty_graph"]], "directed_grid_graph() (in module rustworkx.generators)": [[428, "rustworkx.generators.directed_grid_graph"]], "directed_heavy_hex_graph() (in module rustworkx.generators)": [[429, "rustworkx.generators.directed_heavy_hex_graph"]], "directed_heavy_square_graph() (in module rustworkx.generators)": [[430, "rustworkx.generators.directed_heavy_square_graph"]], "directed_hexagonal_lattice_graph() (in module rustworkx.generators)": [[431, "rustworkx.generators.directed_hexagonal_lattice_graph"]], "directed_mesh_graph() (in module rustworkx.generators)": [[432, "rustworkx.generators.directed_mesh_graph"]], "directed_path_graph() (in module rustworkx.generators)": [[433, "rustworkx.generators.directed_path_graph"]], "directed_star_graph() (in module rustworkx.generators)": [[434, "rustworkx.generators.directed_star_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module rustworkx.generators)": [[435, "rustworkx.generators.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module rustworkx.generators)": [[436, "rustworkx.generators.empty_graph"]], "full_rary_tree() (in module rustworkx.generators)": [[437, "rustworkx.generators.full_rary_tree"]], "generalized_petersen_graph() (in module rustworkx.generators)": [[438, "rustworkx.generators.generalized_petersen_graph"]], "grid_graph() (in module rustworkx.generators)": [[439, "rustworkx.generators.grid_graph"]], "heavy_hex_graph() (in module rustworkx.generators)": [[440, "rustworkx.generators.heavy_hex_graph"]], "heavy_square_graph() (in module rustworkx.generators)": [[441, "rustworkx.generators.heavy_square_graph"]], "hexagonal_lattice_graph() (in module rustworkx.generators)": [[442, "rustworkx.generators.hexagonal_lattice_graph"]], "lollipop_graph() (in module rustworkx.generators)": [[443, "rustworkx.generators.lollipop_graph"]], "mesh_graph() (in module rustworkx.generators)": [[444, "rustworkx.generators.mesh_graph"]], "path_graph() (in module rustworkx.generators)": [[445, "rustworkx.generators.path_graph"]], "star_graph() (in module rustworkx.generators)": [[446, "rustworkx.generators.star_graph"]], "graph_adjacency_matrix() (in module rustworkx)": [[447, "rustworkx.graph_adjacency_matrix"]], "graph_all_pairs_all_simple_paths() (in module rustworkx)": [[448, "rustworkx.graph_all_pairs_all_simple_paths"]], "graph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[449, "rustworkx.graph_all_pairs_bellman_ford_path_lengths"]], "graph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[450, "rustworkx.graph_all_pairs_bellman_ford_shortest_paths"]], "graph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[451, "rustworkx.graph_all_pairs_dijkstra_path_lengths"]], "graph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[452, "rustworkx.graph_all_pairs_dijkstra_shortest_paths"]], "graph_all_shortest_paths() (in module rustworkx)": [[453, "rustworkx.graph_all_shortest_paths"]], "graph_all_simple_paths() (in module rustworkx)": [[454, "rustworkx.graph_all_simple_paths"]], "graph_astar_shortest_path() (in module rustworkx)": [[455, "rustworkx.graph_astar_shortest_path"]], "graph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[456, "rustworkx.graph_bellman_ford_shortest_path_lengths"]], "graph_betweenness_centrality() (in module rustworkx)": [[457, "rustworkx.graph_betweenness_centrality"]], "graph_bfs_search() (in module rustworkx)": [[458, "rustworkx.graph_bfs_search"]], "graph_bipartite_edge_color() (in module rustworkx)": [[459, "rustworkx.graph_bipartite_edge_color"]], "graph_bipartite_layout() (in module rustworkx)": [[460, "rustworkx.graph_bipartite_layout"]], "graph_cartesian_product() (in module rustworkx)": [[461, "rustworkx.graph_cartesian_product"]], "graph_circular_layout() (in module rustworkx)": [[462, "rustworkx.graph_circular_layout"]], "graph_closeness_centrality() (in module rustworkx)": [[463, "rustworkx.graph_closeness_centrality"]], "graph_complement() (in module rustworkx)": [[464, "rustworkx.graph_complement"]], "graph_core_number() (in module rustworkx)": [[465, "rustworkx.graph_core_number"]], "graph_dfs_edges() (in module rustworkx)": [[466, "rustworkx.graph_dfs_edges"]], "graph_dfs_search() (in module rustworkx)": [[467, "rustworkx.graph_dfs_search"]], "graph_dijkstra_search() (in module rustworkx)": [[468, "rustworkx.graph_dijkstra_search"]], "graph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[469, "rustworkx.graph_dijkstra_shortest_path_lengths"]], "graph_dijkstra_shortest_paths() (in module rustworkx)": [[470, "rustworkx.graph_dijkstra_shortest_paths"]], "graph_distance_matrix() (in module rustworkx)": [[471, "rustworkx.graph_distance_matrix"]], "graph_edge_betweenness_centrality() (in module rustworkx)": [[472, "rustworkx.graph_edge_betweenness_centrality"]], "graph_eigenvector_centrality() (in module rustworkx)": [[473, "rustworkx.graph_eigenvector_centrality"]], "graph_floyd_warshall() (in module rustworkx)": [[474, "rustworkx.graph_floyd_warshall"]], "graph_floyd_warshall_numpy() (in module rustworkx)": [[475, "rustworkx.graph_floyd_warshall_numpy"]], "graph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[476, "rustworkx.graph_floyd_warshall_successor_and_distance"]], "graph_greedy_color() (in module rustworkx)": [[477, "rustworkx.graph_greedy_color"]], "graph_greedy_edge_color() (in module rustworkx)": [[478, "rustworkx.graph_greedy_edge_color"]], "graph_is_isomorphic() (in module rustworkx)": [[479, "rustworkx.graph_is_isomorphic"]], "graph_is_subgraph_isomorphic() (in module rustworkx)": [[480, "rustworkx.graph_is_subgraph_isomorphic"]], "graph_k_shortest_path_lengths() (in module rustworkx)": [[481, "rustworkx.graph_k_shortest_path_lengths"]], "graph_katz_centrality() (in module rustworkx)": [[482, "rustworkx.graph_katz_centrality"]], "graph_line_graph() (in module rustworkx)": [[483, "rustworkx.graph_line_graph"]], "graph_longest_simple_path() (in module rustworkx)": [[484, "rustworkx.graph_longest_simple_path"]], "graph_misra_gries_edge_color() (in module rustworkx)": [[485, "rustworkx.graph_misra_gries_edge_color"]], "graph_node_link_json() (in module rustworkx)": [[486, "rustworkx.graph_node_link_json"]], "graph_num_shortest_paths_unweighted() (in module rustworkx)": [[487, "rustworkx.graph_num_shortest_paths_unweighted"]], "graph_random_layout() (in module rustworkx)": [[488, "rustworkx.graph_random_layout"]], "graph_shell_layout() (in module rustworkx)": [[489, "rustworkx.graph_shell_layout"]], "graph_spiral_layout() (in module rustworkx)": [[490, "rustworkx.graph_spiral_layout"]], "graph_spring_layout() (in module rustworkx)": [[491, "rustworkx.graph_spring_layout"]], "graph_tensor_product() (in module rustworkx)": [[492, "rustworkx.graph_tensor_product"]], "graph_token_swapper() (in module rustworkx)": [[493, "rustworkx.graph_token_swapper"]], "graph_transitivity() (in module rustworkx)": [[494, "rustworkx.graph_transitivity"]], "graph_union() (in module rustworkx)": [[495, "rustworkx.graph_union"]], "graph_unweighted_average_shortest_path_length() (in module rustworkx)": [[496, "rustworkx.graph_unweighted_average_shortest_path_length"]], "graph_vf2_mapping() (in module rustworkx)": [[497, "rustworkx.graph_vf2_mapping"]], "has_path() (in module rustworkx)": [[498, "rustworkx.has_path"]], "hits() (in module rustworkx)": [[499, "rustworkx.hits"]], "hyperbolic_random_graph() (in module rustworkx)": [[500, "rustworkx.hyperbolic_random_graph"]], "immediate_dominators() (in module rustworkx)": [[501, "rustworkx.immediate_dominators"]], "is_bipartite() (in module rustworkx)": [[502, "rustworkx.is_bipartite"]], "is_connected() (in module rustworkx)": [[503, "rustworkx.is_connected"]], "is_directed_acyclic_graph() (in module rustworkx)": [[504, "rustworkx.is_directed_acyclic_graph"]], "is_isomorphic() (in module rustworkx)": [[505, "rustworkx.is_isomorphic"]], "is_isomorphic_node_match() (in module rustworkx)": [[506, "rustworkx.is_isomorphic_node_match"]], "is_matching() (in module rustworkx)": [[507, "rustworkx.is_matching"]], "is_maximal_matching() (in module rustworkx)": [[508, "rustworkx.is_maximal_matching"]], "is_planar() (in module rustworkx)": [[509, "rustworkx.is_planar"]], "is_subgraph_isomorphic() (in module rustworkx)": [[510, "rustworkx.is_subgraph_isomorphic"]], "is_weakly_connected() (in module rustworkx)": [[511, "rustworkx.is_weakly_connected"]], "isolates() (in module rustworkx)": [[512, "rustworkx.isolates"]], "k_shortest_path_lengths() (in module rustworkx)": [[513, "rustworkx.k_shortest_path_lengths"]], "katz_centrality() (in module rustworkx)": [[514, "rustworkx.katz_centrality"]], "layers() (in module rustworkx)": [[515, "rustworkx.layers"]], "lexicographical_topological_sort() (in module rustworkx)": [[516, "rustworkx.lexicographical_topological_sort"]], "longest_simple_path() (in module rustworkx)": [[517, "rustworkx.longest_simple_path"]], "max_weight_matching() (in module rustworkx)": [[518, "rustworkx.max_weight_matching"]], "metric_closure() (in module rustworkx)": [[519, "rustworkx.metric_closure"]], "minimum_spanning_edges() (in module rustworkx)": [[520, "rustworkx.minimum_spanning_edges"]], "minimum_spanning_tree() (in module rustworkx)": [[521, "rustworkx.minimum_spanning_tree"]], "negative_edge_cycle() (in module rustworkx)": [[522, "rustworkx.negative_edge_cycle"]], "networkx_converter() (in module rustworkx)": [[523, "rustworkx.networkx_converter"]], "node_connected_component() (in module rustworkx)": [[524, "rustworkx.node_connected_component"]], "node_link_json() (in module rustworkx)": [[525, "rustworkx.node_link_json"]], "num_shortest_paths_unweighted() (in module rustworkx)": [[526, "rustworkx.num_shortest_paths_unweighted"]], "number_connected_components() (in module rustworkx)": [[527, "rustworkx.number_connected_components"]], "number_weakly_connected_components() (in module rustworkx)": [[528, "rustworkx.number_weakly_connected_components"]], "pagerank() (in module rustworkx)": [[529, "rustworkx.pagerank"]], "parse_node_link_json() (in module rustworkx)": [[530, "rustworkx.parse_node_link_json"]], "random_geometric_graph() (in module rustworkx)": [[531, "rustworkx.random_geometric_graph"]], "random_layout() (in module rustworkx)": [[532, "rustworkx.random_layout"]], "read_graphml() (in module rustworkx)": [[533, "rustworkx.read_graphml"]], "shell_layout() (in module rustworkx)": [[534, "rustworkx.shell_layout"]], "simple_cycles() (in module rustworkx)": [[535, "rustworkx.simple_cycles"]], "spiral_layout() (in module rustworkx)": [[536, "rustworkx.spiral_layout"]], "spring_layout() (in module rustworkx)": [[537, "rustworkx.spring_layout"]], "steiner_tree() (in module rustworkx)": [[538, "rustworkx.steiner_tree"]], "stoer_wagner_min_cut() (in module rustworkx)": [[539, "rustworkx.stoer_wagner_min_cut"]], "strongly_connected_components() (in module rustworkx)": [[540, "rustworkx.strongly_connected_components"]], "topological_generations() (in module rustworkx)": [[541, "rustworkx.topological_generations"]], "topological_sort() (in module rustworkx)": [[542, "rustworkx.topological_sort"]], "transitive_reduction() (in module rustworkx)": [[543, "rustworkx.transitive_reduction"]], "transitivity() (in module rustworkx)": [[544, "rustworkx.transitivity"]], "two_color() (in module rustworkx)": [[545, "rustworkx.two_color"]], "undirected_gnm_random_graph() (in module rustworkx)": [[546, "rustworkx.undirected_gnm_random_graph"]], "undirected_gnp_random_graph() (in module rustworkx)": [[547, "rustworkx.undirected_gnp_random_graph"]], "undirected_random_bipartite_graph() (in module rustworkx)": [[548, "rustworkx.undirected_random_bipartite_graph"]], "undirected_sbm_random_graph() (in module rustworkx)": [[549, "rustworkx.undirected_sbm_random_graph"]], "union() (in module rustworkx)": [[550, "rustworkx.union"]], "unweighted_average_shortest_path_length() (in module rustworkx)": [[551, "rustworkx.unweighted_average_shortest_path_length"]], "vf2_mapping() (in module rustworkx)": [[552, "rustworkx.vf2_mapping"]], "bfsvisitor (class in rustworkx.visit)": [[553, "rustworkx.visit.BFSVisitor"]], "black_target_edge() (bfsvisitor method)": [[554, "rustworkx.visit.BFSVisitor.black_target_edge"]], "discover_vertex() (bfsvisitor method)": [[555, "rustworkx.visit.BFSVisitor.discover_vertex"]], "finish_vertex() (bfsvisitor method)": [[556, "rustworkx.visit.BFSVisitor.finish_vertex"]], "gray_target_edge() (bfsvisitor method)": [[557, "rustworkx.visit.BFSVisitor.gray_target_edge"]], "non_tree_edge() (bfsvisitor method)": [[558, "rustworkx.visit.BFSVisitor.non_tree_edge"]], "tree_edge() (bfsvisitor method)": [[559, "rustworkx.visit.BFSVisitor.tree_edge"]], "dfsvisitor (class in rustworkx.visit)": [[560, "rustworkx.visit.DFSVisitor"]], "back_edge() (dfsvisitor method)": [[561, "rustworkx.visit.DFSVisitor.back_edge"]], "discover_vertex() (dfsvisitor method)": [[562, "rustworkx.visit.DFSVisitor.discover_vertex"]], "finish_vertex() (dfsvisitor method)": [[563, "rustworkx.visit.DFSVisitor.finish_vertex"]], "forward_or_cross_edge() (dfsvisitor method)": [[564, "rustworkx.visit.DFSVisitor.forward_or_cross_edge"]], "tree_edge() (dfsvisitor method)": [[565, "rustworkx.visit.DFSVisitor.tree_edge"]], "dijkstravisitor (class in rustworkx.visit)": [[566, "rustworkx.visit.DijkstraVisitor"]], "discover_vertex() (dijkstravisitor method)": [[567, "rustworkx.visit.DijkstraVisitor.discover_vertex"]], "edge_not_relaxed() (dijkstravisitor method)": [[568, "rustworkx.visit.DijkstraVisitor.edge_not_relaxed"]], "edge_relaxed() (dijkstravisitor method)": [[569, "rustworkx.visit.DijkstraVisitor.edge_relaxed"]], "examine_edge() (dijkstravisitor method)": [[570, "rustworkx.visit.DijkstraVisitor.examine_edge"]], "finish_vertex() (dijkstravisitor method)": [[571, "rustworkx.visit.DijkstraVisitor.finish_vertex"]], "prunesearch": [[572, "rustworkx.visit.PruneSearch"]], "stopsearch": [[573, "rustworkx.visit.StopSearch"]], "graphviz_draw() (in module rustworkx.visualization)": [[574, "rustworkx.visualization.graphviz_draw"]], "mpl_draw() (in module rustworkx.visualization)": [[575, "rustworkx.visualization.mpl_draw"]], "weakly_connected_components() (in module rustworkx)": [[576, "rustworkx.weakly_connected_components"]]}})